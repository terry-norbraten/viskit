<?xml version="1.0" encoding="UTF-8"?>

<!-- Seems to render in Mozilla Firefox the best.  Broken in IE7 -->
<?xml-stylesheet type="text/xsl" href="./ant2html.xsl"?>

<project basedir="." default="build.run.no.runtime.extensions" name="Viskit">
    <description>
        Ant build file for the NPS Viskit and associated libraries. Third-party
        jar files are not compiled from source here, but they are copied as
        necessary for the Viskit distribution.
    </description>

    <!-- External properties file.  This contains properties that vary from developer       -->
    <!-- to developer.  Also, any properties in this file will override the properties set  -->
    <!-- in this build.xml file, so, be careful.                                            -->
    <property file="build.properties"/>

    <!-- magic properties, do not change or delete -->

    <property name="build.compiler" value="modern"/>

    <!-- ID properties (this file) -->
    <property name="SVNId" value="$Id$"/>

    <!-- Project directories -->

    <property description="Where the distribution files wind up." location="dist" name="dir.dist"/>

    <property description="Where all the JAXB 2.1 extensions are." location="${dir.lib}/jaxb" name="dir.lib.xml"/>

    <property description="Runtime module extension libraries." location="${dir.lib}/ext" name="dir.lib.ext"/>

    <property description="Root of the javadoc tree for Viskit." location="doc/api" name="dir.api.doc"/>

    <property description="Generated JAXB bindings for Simevg" location="${dir.bindings}/eventgraph" name="dir.src.simevg"/>

    <property description="Generated JAXB bindings for Simasm" location="${dir.bindings}/assembly" name="dir.src.simasm"/>

    <property description="Generated JAXB bindings for CLI config" location="${dir.bindings}/cli" name="dir.src.cli"/>

    <property description="Generated JAXB bindings for SGE qstat config" location="${dir.bindings}/sge/qstat" name="dir.src.sge.qstat"/>

    <property description="OA3302 Course Examples Directory" location="examples" name="examples.lib" />

    <property description="DISKIT directory" location="../DISKIT" name="dir.diskit"/>

    <property description="Simasm utility" location="${dir.src}/viskit/xsd/assembly" name="dir.src.simasm.util"/>

    <property description="CLI utility" location="${dir.src}/viskit/xsd/cli" name="dir.src.cli.util"/>

    <property description="SGE utilities" location="${dir.src}/viskit/xsd/sge" name="dir.src.sge.util"/>

    <property description="Simevg utility" location="${dir.src}/viskit/xsd/translator" name="dir.src.simevg.util"/>

    <property description="where the help source sits" location="${dir.src}/viskit/javahelp" name="javahelp"/>

    <property description="where the generated and copied help files go" location="${dir.build.classes}/viskit/javahelp" name="build.javahelp"/>

    <!-- access to local environment variables -->
    <property environment="env"/>

    <path id="runtime.extension.classes.path">
        <fileset dir="${dir.lib.ext}" includes="*.jar" id="runtime.extension.classes" />
    </path>

    <path id="jaxb.classes.path">
        <fileset dir="${dir.lib.xml}" includes="*.jar" id="jaxb.classes"/>
    </path>

    <!-- This convention will not work on Mac OS X as tools.jar does not exist
         in its Java installation, however, an encapsulating
         classes.jar does exist that is already on the Bootclasspath.  I move
         for insistance on installing a JDK to run Viskit on Win/Unix boxes. -->
    <!--fileset dir="${env.JAVA_HOME}/lib" id="runtime.javac">
        <include name="tools.jar"/>
    </fileset-->
    <fileset dir="${dir.build}/lib" id="runtime.viskit.exe">
        <include name="viskit-exe.jar"/>
    </fileset>
    <fileset dir="${dir.lib}" id="runtime.lib" >
        <!-- could use restrictions in current runtime.classpath -->
        <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${dir.lib.ext}" id="runtime.lib.ext" >
        <include name="**/*.jar"/>
    </fileset>

    <path id="runtime.classpath">

        <!-- See note above id="runtime.javac" -->
        <!--pathelement location="${env.JAVA_HOME}/lib/tools.jar"/-->
        <pathelement location="${dist.jar}"/>
        <pathelement location="${dir.lib}/simkit.jar"/>
        <pathelement location="${dir.lib}/bsh-2.0b4.jar"/>
        <pathelement location="${dir.lib}/jgraph.jar"/>
        <pathelement location="${dir.lib}/actions.jar"/>
        <pathelement location="${dir.lib}/jhall.jar"/>
        <pathelement location="${dir.lib}/jdom.jar"/>
        <pathelement location="${jfreechart.jar}"/>
        <pathelement location="${jcommon.jar}"/>
        <pathelement location="${dir.lib}/junit.jar"/>
        <pathelement location="${dir.lib}/commons-beanutils-1.7.0.jar"/>
        <pathelement location="${dir.lib}/commons-codec-1.3.jar"/>
        <pathelement location="${dir.lib}/commons-collections-3.1.jar"/>
        <pathelement location="${dir.lib}/commons-configuration-1.5.jar"/>
        <pathelement location="${dir.lib}/commons-digester-1.6.jar"/>
        <pathelement location="${dir.lib}/commons-lang-2.4.jar"/>
        <pathelement location="${dir.lib}/commons-logging-1.1.jar"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${dir.lib}/looks-1.3.1.jar"/>
        <pathelement location="${dir.lib}/xercesImpl.jar"/>
        <pathelement location="${dir.lib}/xalan.jar"/>
        <pathelement location="${dir.lib}/serializer.jar"/>
        <pathelement location="${dir.lib}/xmlrpc-2.0.jar"/>
        <path refid="jaxb.classes.path"/>
        <path refid="runtime.extension.classes.path"/>
    </path>

    <!-- TaskDefs -->
    <taskdef classname="com.sun.tools.xjc.XJCTask"
             name="xjc"
             classpathref="jaxb.classes.path"/>

    <taskdef classname="net.amadan.trang.ant.TrangTask" name="trang">
        <classpath>
            <fileset dir="${dir.lib}" includes="trang*.jar"/>
        </classpath>
    </taskdef>

    <!--  === TARGET: help === -->
    <target name="help">
        <echo>
            This is the Ant build file for the NPS Viskit and associated libraries.
            Third-party jar files are not compiled from source here, but they are
            copied as necessary for the simkit distribution.  This buildfile was created
            and tested using Ant version 1.7.1.  Modified from Simkit's build.xml.
        </echo>
    </target>

    <!--  === TARGET: hudson === -->
    <target name="hudson" description="hudson server-side continuous integration" depends="clean,dist">
        <echo message="https://savage.nps.edu/hudson/Viskit"/>
    </target>

    <!--  === TARGET: init === -->
    <target name="init"
            description="Preparatory actions required for all targets">
        <tstamp/>
        <echo message="Build started on ${DSTAMP} at ${TSTAMP}"/>
        <echo message="Buildfile version ${SVNId}"/>
        <echo message="Base directory: ${basedir}"/>
        <echo message="Source directory: ${dir.src}"/>
        <echo message="Build directory: ${dir.build}"/>
        <echo message="JAVA_HOME: ${env.JAVA_HOME}"/>
    </target>

    <!--  === TARGET: build.init === -->
    <target  name="build.init"
             depends="init"
             description="Preparatory actions for compilation and documentation targets">
        <mkdir dir="${dir.build}"/>
        <mkdir dir="${dir.build.lib}"/>
        <mkdir dir="${dir.build.classes}"/>
        <mkdir dir="${dir.src.simevg}"/>
        <mkdir dir="${dir.src.simasm}"/>
        <mkdir dir="${dir.src.simasm}/stats"/>
        <mkdir dir="${dir.src.cli}"/>
        <mkdir dir="${dir.lib.ext}"/>
    </target>

    <!-- Now a legacy target as we are no longer building schema from DTD -->
    <target name="build.schema"
            depends="build.init"
            description="Create xsd Schemas from dtd">
        <trang failonerror="true" input="${simkit.dtd}" output="${simkit.xsd}" schemaIn="dtd" schemaOut="xsd"/>
        <trang failonerror="true" input="${assembly.dtd}" output="${assembly.xsd}" schemaIn="dtd" schemaOut="xsd"/>

	<!-- useful for autogenerating stats schema and adding type validator -->
        <!--trang failonerror="true" input="${statistics.dtd}" output="${statistics.xsd}" schemaIn="dtd" schemaOut="xsd"/-->

	<!-- Requires GNU Patch on the %PATH% -->
	<!--patch patchfile="${statistics.xsd.patch}" originalfile="${statistics.xsd}"/-->
        <trang failonerror="true" input="${cli.dtd}" output="${cli.xsd}" schemaIn="dtd" schemaOut="xsd"/>
    </target>

    <target name="bindings.simkit"
            depends="build.init"
            description="Create bindings to the simkit XML Schema" >

        <xjc extension="true"
             package="viskit.xsd.bindings.eventgraph"
             schema="${simkit.xsd}"
             destdir="${dir.src}">
            <produces dir="${dir.src.simevg}"/>
        </xjc>
        <xjc extension="true"
             package="viskit.xsd.bindings.assembly"
             schema="${assembly.xsd}"
             destdir="${dir.src}">
            <produces dir="${dir.src.simasm}"/>
        </xjc>
        <xjc extension="true"
             package="viskit.xsd.bindings.assembly.stats"
             schema="${statistics.xsd}"
             destdir="${dir.src}">
            <produces dir="${dir.src.simasm}/stats"/>
        </xjc>
        <xjc extension="true"
             package="viskit.xsd.bindings.cli"
             schema="${cli.xsd}"
             destdir="${dir.src}">
            <produces dir="${dir.src.cli}"/>
        </xjc>
        <!--xjc extension="true"
                package="viskit.xsd.bindings.sge.qstat"
                schema="${qstat.xsd}"
                destdir="${dir.src}">
            <produces dir="${dir.src.sge.qstat}"/>
        </xjc-->
    </target>

    <target name="compile.bindings"
            depends="bindings.simkit"
            description="Build bindings to Schemas" >
        <javac destdir="${dir.build.classes}"
               debug="off"
               source="1.5"
               target="1.5"
               includeAntRuntime="no">

            <!-- Reveals generics and deprecation warnings -->
            <compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/>
            <classpath refid="jaxb.classes.path"/>
            <src path="${dir.src.simevg}"/>
        </javac>
        <javac destdir="${dir.build.classes}"
               debug="off"
               source="1.5"
               target="1.5"
               includeAntRuntime="no">

            <!-- Reveals generics and deprecation warnings -->
            <compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/>
            <classpath refid="jaxb.classes.path"/>
            <src path="${dir.src.simasm}"/>
        </javac>
        <javac destdir="${dir.build.classes}"
               debug="off"
               source="1.5"
               target="1.5"
               includeAntRuntime="no">

            <!-- Reveals generics and deprecation warnings -->
            <compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/>
            <classpath refid="jaxb.classes.path"/>
            <src path="${dir.src.simasm}/stats"/>
        </javac>
        <javac destdir="${dir.build.classes}"
               debug="off"
               source="1.5"
               target="1.5"
               includeAntRuntime="no">

            <!-- Reveals generics and deprecation warnings -->
            <compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/>
            <classpath refid="jaxb.classes.path"/>
            <src path="${dir.src.cli}"/>
        </javac>
        <!--javac destdir="${dir.build.classes}"
            debug="on"
            source="1.5"
            target="1.5">

            <compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/>
            <src path="${dir.src.sge.qstat}"/>
        </javac-->
    </target>

    <target name="jar.stage1" depends="compile.bindings">
         <jar basedir="${dir.build.classes}"
              compress="false"
              excludes="*/test/*"
              jarfile="${dir.build.lib}/visxml.jar"/>
    </target>

    <!-- depends on create stage 1 visxml.jar which later includes stuff from this compile to make ${dist.jar} -->
    <target name="compile.edu.util"
            depends="jar.stage1"
            description="Build nps.edu.utils">

        <javac destdir="${dir.build.classes}"
               source="1.5"
               target="1.5"
               includeantruntime="false">

            <!-- Reveals generics and deprecation warings -->
            <compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/>
	    <compilerarg value="${javac.debug}"/>
            <classpath>
                <pathelement location="${log4j.jar}"/>
            </classpath>
            <src path="${dir.src}/edu/"/>
        </javac>

        <jar update="yes"
             jarfile="${dir.build.lib}/visxml.jar"
             basedir="${dir.build.classes}"
             compress="false" />
    </target>

    <!--  === TARGET: compile === -->
    <target name="compile" depends="compile.edu.util">
        <javac verbose="no"
               destdir="${dir.build.classes}"
               excludes="xsd/** */test/*"
               source="1.5"
               target="1.5"
               includeantruntime="false">

            <!-- Reveals generics and deprecation warings -->
            <compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/>
	    <compilerarg value="${javac.debug}"/>
            <classpath>
                <pathelement location="${dir.lib}/bsh-2.0b4.jar"/>
                <pathelement location="${dir.lib}/jdom.jar"/>
                <pathelement location="${dir.lib}/jgraph.jar"/>
                <pathelement location="${dir.lib}/actions.jar"/>
                <pathelement location="${dir.lib}/simkit.jar"/>
                <pathelement location="${dir.lib}/jhall.jar"/>
                <pathelement location="${jfreechart.jar}"/>
                <pathelement location="${dir.lib}/commons-configuration-1.5.jar"/>
                <pathelement location="${dir.lib}/commons-codec-1.3.jar"/>
                <pathelement location="${dir.lib}/commons-lang-2.4.jar"/>
                <pathelement location="${log4j.jar}"/>
                <pathelement location="${dir.lib}/looks-1.3.1.jar"/>
                <pathelement location="${dir.lib}/xmlrpc-2.0.jar"/>
                <pathelement location="${dir.build.lib}/visxml.jar"/>
            </classpath>
            <src path="${dir.src}/viskit"/>
            <src path="${dir.test}"/>
            <src path="${dir.src.simevg.util}"/>
            <src path="${dir.src.simasm.util}"/>
            <src path="${dir.src.cli.util}"/>
        </javac>
        <copy todir="${dir.build.classes}">
            <fileset dir="${dir.src}">
                <include name="viskit/version.txt"/>
                <include name="viskit/xsd/cli/manif.txt"/>
                <include name="viskit/images/*.png"/>
                <include name="viskit/images/*.gif"/>
                <include name="viskit/images/*.jpg"/>
            </fileset>
            <fileset dir="${basedir}">
                <include name="${configuration.dir}/log4j.properties"/>
                <include name="${analyst.report.stylesheet}"/>
            </fileset>
        </copy>

        <!-- For some reason, viskit.doe.package-info.java makes its own directory in classes -->
        <delete dir="${dir.build.classes}/doe"/>
    </target>

    <target name="javahelp"
            depends="init"
            description="build the help search database">

        <java classname="com.sun.java.help.search.Indexer"
              fork="true">

            <!-- turn this on to make sure it's working -->
            <!--arg value="-verbose"/-->
            <arg value="-db"/>
            <arg value="${build.javahelp}/JavaHelpSearch"/>
            <arg value="${javahelp}/Pages"/>
            <classpath>
                <pathelement location="${dir.lib}/jhall.jar"/>
            </classpath>
        </java>
        <copy todir="${build.javahelp}">
            <fileset dir="${javahelp}"/>
        </copy>
    </target>

    <!--  === TARGET: jar === -->
    <target name="jar" depends="compile,javahelp">
        <jar basedir="${dir.build.classes}"
             compress="false"
             destfile="${dist.jar}">
            <manifest>
                <attribute name="Built-By" value="${my.name}"/>
                <attribute name="Specification-Title"
                           value="${product.Name}"/>
                <attribute name="Specification-Version"
                           value="${product.version.major}.${product.version.minor}"/>
                <attribute name="Specification-Vendor"
                           value="${spec.vendor}"/>
                <attribute name="Implementation-Title"
                           value="${impl.title}"/>
                <attribute name="Implementation-Version"
                           value="${product.Version} built on ${TODAY} at ${TSTAMP} hrs"/>
                <attribute name="Implementation-Vendor"
                           value="${nps}, ${moves.institute}, ${savage.research.group}"/>
                <attribute name="Implementation-URL"
                           value="${Savage.url}"/>
                <section name="edu.nps.util"/>
                <section name="viskit"/>
                <section name="viskit.doe"/>
                <section name="viskit.images"/>
                <section name="viskit.jgraph"/>
                <section name="viskit.model"/>
                <section name="viskit.mvc"/>
                <section name="viskit.util"/>
                <section name="viskit.xsd.assembly"/>
                <section name="viskit.xsd.bindings.assembly"/>
                <section name="viskit.xsd.bindings.stats"/>
                <section name="viskit.xsd.bindings.cli"/>
                <section name="viskit.xsd.bindings.eventgraph"/>
                <section name="viskit.xsd.cli"/>
                <section name="viskit.xsd.translator"/>
            </manifest>
            <metainf file="license/lgpl.txt"/>
            <metainf file="license/license.txt"/>
        </jar>
        <delete file="${dir.build.lib}/visxml.jar"/>
    </target>

    <target name="fresh.diskit" description="diskit module">
        <echo message="Building Diskit:"/>
        <ant dir="${dir.diskit}" target="jar" inheritAll="false"/>
        <copy file="${dir.diskit}/dist/lib/diskit.jar" todir="${dir.lib.ext}"/>
        <copy todir="${dir.lib.ext}">
            <fileset dir="${dir.diskit}/lib">
                <include name="open-dis.jar"/>
                <include name="dis-enums.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- just add new modules to the depends variable here -->
    <target name="runtime.extensions"
            depends="fresh.diskit"
            description="compile application specific modules, like diskit"/>

    <target name="build.viskit.with.runtime.extensions"
            depends="jar,runtime.extensions"
            description="Build viskit and diskit jars"/>

    <target name="build.viskit.no.runtime.extensions"
            depends="jar"
            description="Build viskit jar(s)"/>

    <target name="jar.executable" depends="jar">
        <pathconvert pathsep=" " property="launcher.jar.internal.classpath" refid="runtime.classpath">
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*" to="lib/*"/>
            </chainedmapper>
        </pathconvert>

        <jar basedir="${dir.build.classes}" compress="false" jarfile="${dir.build.lib}/viskit-exe.jar">
            <manifest>
                <!-- used by native launcher, see launch4j -->
                <attribute name="Main-Class" value="viskit.Splash2" />
                <attribute name="Class-Path" value="${launcher.jar.internal.classpath}" />
            </manifest>
        </jar>
        <delete file="${dist.jar}"/>
        <delete file="${dir.build.lib}/visxml.jar"/>
    </target>

    <!--  === TARGET: doc. Create javadocs and put the result in the docs directory. === -->
    <target name="doc"
            depends="build.init,compile"
            description="Create the javadoc for Viskit.">

        <delete dir="${dir.api.doc}"/>
        <mkdir dir="${dir.api.doc}"/>
        <javadoc access="public"
                 author="true"
                 destdir="${dir.api.doc}"
                 sourcepath="${dir.src}"
                 bottom="${copyright}"
                 version="true">

            <!-- Include all the jar files in the lib directory; this prevents some
            javadoc warnings about classes not being found. -->
            <classpath>
                <fileset refid="jaxb.classes"/>
                <fileset dir="${dir.lib}" includes="*.jar"/>
            </classpath>
            <package name="edu.nps.util"/>
            <package name="viskit"/>
            <package name="viskit.doe"/>
            <package name="viskit.images"/>
            <package name="viskit.jgraph"/>
            <package name="viskit.model"/>
            <package name="viskit.mvc"/>
            <package name="viskit.util"/>
            <package name="viskit.xsd.assembly"/>
            <package name="viskit.xsd.bindings.assembly"/>
            <package name="viskit.xsd.bindings.assembly.stats"/>
            <package name="viskit.xsd.bindings.cli"/>
            <package name="viskit.xsd.bindings.eventgraph"/>
            <package name="viskit.xsd.cli"/>
            <package name="viskit.xsd.translator"/>

            <!-- Updated links to current APIs -->
            <link href="${j2se.api}"/>
            <link href="${simkit.api}"/>
            <link href="${jdom.api}"/>
	    <link href="${commons.config.api}"/>
	    <link href="${jfreechart.api}"/>
	    <link href="${jgraph.api}"/>
        </javadoc>
    </target>

    <!-- === TARGET: dist === -->
    <target name="dist" depends="clean,jar,doc">
        <mkdir dir="${dir.dist}"/>
        <mkdir dir="${dir.dist}/doc/api"/>
        <mkdir dir="${dir.dist}/examples"/>
        <copy todir="${dir.dist}">
            <fileset dir="${dir.build.lib}"/>
        </copy>
        <copy todir="${dir.dist}/doc">
            <fileset dir="${dir.api.doc}"/>
        </copy>
        <copy todir="${dir.dist}/examples">
            <fileset dir="${examples.lib}">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>

    <target name="gridkit.jar" depends="jar">
        <delete dir="${dir.dist}/gridkit-stage"/>
        <mkdir dir="${dir.dist}/gridkit-stage"/>

        <mkdir dir="${dir.dist}/gridkit"/>
        <copy todir="${dir.dist}/gridkit-stage">
            <fileset dir="${dir.build.lib}">
                <include name="visxml.jar"/>
            </fileset>
            <fileset dir="${dir.lib}">
                <include name="simkit.jar"/>
                <include name="xmlrpc-2.0.jar"/>
                <include name="bsh-2.0b4.jar"/>
                <include name="commons-configuration-1.5.jar"/>
                <include name="commons-beanutils-1.7.0.jar"/>
                <include name="commons-codec-1.3.jar"/>
                <include name="commons-collections-3.1.jar"/>
                <include name="commons-digester-1.6.jar"/>
                <include name="commons-lang-2.4.jar"/>
                <include name="commons-logging-1.1.jar"/>
                <include name="jdom.jar"/>
            </fileset>
            <fileset dir="${dir.lib.ext}">
                <include name="*.jar"/>
            </fileset>
            <!--fileset refid="jaxb.classes"/-->
            <!--fileset refid="runtime.javac"/-->
            <fileset dir="${dir.src.cli.util}">
                <include name="config.properties"/>
            </fileset>
        </copy>
        <mkdir dir="${dir.dist}/gridkit-stage/viskit/xsd/cli"/>
        <copy todir="${dir.dist}/gridkit-stage/viskit/xsd/cli" >
            <fileset dir="${dir.build}/classes/viskit/xsd/cli" >
                <include name="Boot.class"/>
                <include name="Launcher.class"/>
            </fileset>
        </copy>
        <mkdir dir="${dir.dist}/gridkit-stage/examples"/>
        <copy todir="${dir.dist}/gridkit-stage/examples">
            <fileset dir="${examples.lib}">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
        <jar basedir="${dir.dist}/gridkit-stage"
             destfile="${dir.dist}/gridkit.jar"
             manifest="${dir.src.cli.util}/manif.txt" />

    </target>

    <target name="checkJAVA_HOME" unless="env.JAVA_HOME">
        <echo message="warning:  JAVA_HOME not set!"/>
    </target>

    <!-- TARGET: Run w/Viskit custom splash -->
    <target name="build.run.with.runtime.extensions"
            depends="build.viskit.with.runtime.extensions,checkJAVA_HOME"
            description="Build and Run Viskit extended, include external runtime modules, Viskit custom Splash">
        <java classname="viskit.Splash2"
              classpathref="runtime.classpath"
              fork="true">
            <arg value="viskit.EventGraphAssemblyComboMain"/>
            <jvmarg value="-XX:MaxPermSize=160m"/>
            <jvmarg value="-Xmx256m"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>
    <target name="build.run.no.runtime.extensions"
            depends="jar"
            description="Build and Run Viskit only, no module dependencies, Viskit custom Splash">
        <java classname="viskit.Splash2"
              classpathref="runtime.classpath"
              fork="true">
            <arg value="viskit.EventGraphAssemblyComboMain"/>
            <jvmarg value="-XX:MaxPermSize=160m"/>
            <jvmarg value="-Xmx256m"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>
    <target name="build.run.default.orig"
            depends="jar"
            description="Build and Run Viskit (original L and F) only, no module dependencies, Viskit custom Splash @deprecated (Use build.run.no.runtime.extensions)">
        <java classname="viskit.Splash2"
              classpathref="runtime.classpath"
              fork="true">
            <arg value="viskit.Main"/>
            <!-- Font anti-aliasing -->
            <jvmarg value="-Dswing.aatext=true"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>

     <target name="splashy" description="@deprecated">
        <splash imageurl="file:///${basedir}/${dir.src}/viskit/images/ViskitSplash2.png" showduration="0"/>
    </target>

    <!-- TARGET: Run w/Ant Splash @deprecated -->
    <target name="build.run"
            depends="splashy,jar,runtime.extensions,checkJAVA_HOME"
            description="Build and Run Viskit, include external runtime modules if any, display Ant Splash @deprecated (Use build.run.with.runtime.extensions)">
        <java classname="viskit.EventGraphAssemblyComboMain"
              classpathref="runtime.classpath"
              fork="true">
            <jvmarg value="-XX:MaxPermSize=160m"/>
            <jvmarg value="-Xmx256m"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>
    <target name="build.run.orig"
            depends="splashy,jar"
            description="Build and Run Viskit (original L and F) only, no module dependencies, display Ant Splash @deprecated (Use build.run.no.runtime.extensions)">
        <java classname="viskit.Main"
              classpathref="runtime.classpath"
              fork="true">
            <!-- Font anti-aliasing -->
            <jvmarg value="-Dswing.aatext=true"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>

    <!-- TARGET: Quick Run, don't check dependencies, TBD ant should be able to not rebuild if not needed -->
    <target name="quick.run" description="Run Viskit, don't check dependencies">
        <java classname="viskit.Splash2"
              classpathref="runtime.classpath"
              fork="true">
            <arg value="viskit.EventGraphAssemblyComboMain"/>
	    <!--arg value="Your path to an assembly file to initialize Viskit ready to run"/-->
	    <!--arg value="${basedir}/MyViskitProjects/DefaultProject/Assemblies/atfp/PortOfBaltimoreAssembly.xml"/-->
	    <!--arg value="${basedir}/MyViskitProjects/TestFoo/Assemblies/oa3302/ServerAssembly.xml"/-->
            <jvmarg value="-XX:MaxPermSize=160m"/>
            <jvmarg value="-Xmx256m"/>
            <!-- Font anti-aliasing -->
            <jvmarg value="-Dswing.aatext=true"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>
    <target name="quick.run.orig"
            description="Run Viskit (original L and F), don't check dependencies @deprecated (Use quick.run)">
        <java classname="viskit.Splash2"
              classpathref="runtime.classpath"
              fork="true">
            <arg value="viskit.Main"/>
            <!-- Font anti-aliasing -->
            <jvmarg value="-Dswing.aatext=true"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>

    <target name="test-code-format" description="TestCodeFormat runner">
        <java classname="viskit.test.TestCodeFormat" classpathref="runtime.classpath" fork="true">
            <arg value="viskit/test/ArrayTester.xml"/>
        </java>
    </target>

    <target name="test-gridkit-login" description="Test Gridkit login">
        <java classname="viskit.test.TestGridkitLogin" classpathref="runtime.classpath" fork="true">
            <arg value="localhost" />
            <arg value="4444" />
        </java>
    </target>

    <target name="test-gridkit-qstat" description="Test Gridkit qstat">
        <java classname="viskit.test.TestGridkitQstat" classpathref="runtime.classpath" fork="true">
            <arg value="localhost" />
            <arg value="4444" />
        </java>
    </target>

    <target name="test-gridkit-ServerAssembly3" description="Test Gridkit ServerAssembly3">
        <java classname="viskit.test.TestGridkitServerAssembly3" classpathref="runtime.classpath" fork="true">
            <arg value="localhost" />
            <arg value="4444" />
        </java>
    </target>

    <target  name="runDOE"
             depends="jar, runtime.extensions"
             description="Run Design-Of-Experiments">
        <java classname="viskit.doe.DoeMain" classpathref="runtime.classpath" fork="true" dir="${basedir}"/>
    </target>

    <!-- The Installer contains the JRE, a native wrapper around ${dist.jar} and its jars,
        and the actual installer. JRE, IzPack the installer generator, launch4j the wrapper
        maker, and orangevolt/roxes the sfx for win32 registries are downloaded if needed.
        To save time, all slow steps are checked if needed, including the build. -->

    <!-- get all izpack related packages -->
    <condition property="build.host.linux">
        <os family="unix"/>
    </condition>
    <condition property="build.host.windows">
        <os family="windows"/>
    </condition>
    <condition property="build.host.mac">
        <os family="mac"/>
    </condition>

    <property name="installer" value="${basedir}/installer" />
    <property name="izpack" value="${user.home}/IzPack" />
    <property name="launch4j" value="${user.home}/launch4j" />
    <property name="orangevolt" value="${user.home}/orangevolt"/>
    <!-- it could be the case from an svn checkout that asks for a pruned tree,
        in which case, this would get set before build.init can complete the path
        which will break runtime.jars below -->
    <mkdir dir="${dir.lib.ext}" />
    <property name="runtime.jars" refid="runtime.classpath" />
    <!-- the following name can be anything, the url link to download returns the latest jdk for windows -->
    <!-- it should be named manually though for what version has been tested -->
    <property name="winJREExe" value="jre-6u10-rc2-bin-b32-windows-i586-p-12_sep_2008.exe"/>
    <property name="winJRE" value="${user.home}${file.separator}${winJREExe}" />

    <target name="checkJRE" >
        <available file="${winJRE}" property="winJRE.exists" />
    </target>
    
    <target name="getJRE" depends="checkJRE" unless="winJRE.exists"  >
        <get src="http://www.java.net/download/jdk6/6u10/promoted/b32/binaries/jre-6u10-rc2-bin-b32-windows-i586-p-12_sep_2008.exe" dest="${winJRE}" />
    </target>

    <target name="checkIzPack" if="build.host.windows">
        <available file="/Program Files/IzPack/lib/compiler.jar" property="izPack.exists" />
    </target>
    <target name="getIzPack" depends="checkIzPack" unless="izPack.exists" >
        <get src="http://dist.codehaus.org/izpack/releases/3.11.0/IzPack-install-3.11.0.jar" dest="${user.home}/izpack-install.jar" />
        <echo>When installing IzPack from web, please use default install options when prompted.</echo>
        <echo>If you wish to then immediately uninstall, when prompted, force the deletion of </echo>
        <echo>/Program Files/IzPack.  If you wish to keep IzPack, then just quit.</echo>
        <java fork="true" jar="${user.home}/izpack-install.jar" />
    </target>

    <target name="moveIzPack" if="build.host.windows">
        <copy todir="${user.home}/IzPack">
            <!-- for 64 bit windows only
            <fileset dir="C:\Program Files (x86)\IzPack"/>
            -->
            <fileset dir="/Program Files/IzPack"/>
        </copy>
        <!-- This should delete /Program Files/IzPack and any registry entries after moving -->
        <java jar="/Program Files/IzPack/Uninstaller/uninstaller.jar" fork="true"/>
    </target>

    <target name="checkLaunch4j">
        <available file="${launch4j}/launch4j/launch4j.jar" property="launch4j.exists" />
    </target>
    <target name="getLaunch4j" depends="checkLaunch4j" unless="launch4j.exists" >
        <!-- only one of these should pass -->
        <ant target="getLaunch4jWin32"/>
        <ant target="getLaunch4jLinux"/>
        <ant target="getLaunch4jMac"/>
    </target>

    <target name="getLaunch4jWin32" if="build.host.windows">
        <get src="http://easynews.dl.sourceforge.net/sourceforge/launch4j/launch4j-3.0.0-pre1-win32.zip" dest="${user.home}/launch4j.zip" />
        <unzip src="${user.home}/launch4j.zip" dest="${user.home}/launch4j"/>
    </target>

    <target name="getLaunch4jLinux" if="build.host.linux">
        <get src="http://easynews.dl.sourceforge.net/sourceforge/launch4j/launch4j-3.0.0-pre1-linux.tgz" dest="${user.home}/launch4j.tgz" />
        <untar src="${user.home}/launch4j.tgz" dest="${user.home}/launch4j" compression="gzip"/>
        <chmod file="${user.home}/launch4j/launch4j/bin/windres" perm="a+x"/>
        <chmod file="${user.home}/launch4j/launch4j/bin/ld" perm="a+x"/>
    </target>

    <target name="getLaunch4jMac" if="build.host.mac">
        <get src="http://easynews.dl.sourceforge.net/sourceforge/launch4j/launch4j-3.0.0-pre1-macosx.tgz" dest="${user.home}/launch4j.tgz" />
        <untar src="${user.home}/launch4j.tgz" dest="${user.home}/launch4j" compression="gzip"/>
    </target>

    <target name="checkOrangevolt">
        <available file="${orangevolt}.jar" property="orangevolt.exists" />
    </target>
    <target name="getOrangevolt" depends="checkOrangevolt" unless="orangevolt.exists" >
        <get src="http://easynews.dl.sourceforge.net/sourceforge/ovanttasks/orangevolt-ant-tasks-1.3.5.jar" dest="${orangevolt}.jar" />
    </target>

    <target name="checkRoxes" >
        <available file="${user.home}/roxes.jar" property="roxes.exists" />
    </target>
    <target name="getRoxes" depends="checkRoxes" unless="roxes.exists" >
        <get src="http://easynews.dl.sourceforge.net/sourceforge/ovanttasks/roxes-win32forjava-1.0.4.jar" dest="${user.home}/roxes.jar" />
    </target>

    <target name="check.viskit">
        <available file="${dir.build.lib}/viskit-exe.jar" property="viskit.built"/>
    </target>
    <target name="check.extensions">
        <available file="${dir.lib.ext}/*.jar" property="extensions.built"/>
    </target>
    <target name="no.runtime.extensions" depends="check.viskit" unless="viskit.built" >
        <ant target="jar.executable"/>
    </target>
    <target name="with.runtime.extensions" depends="no.runtime.extensions" unless="extensions.built">
        <ant target="runtime.extensions"/>
    </target>

    <!-- adapted from izpack wiki for building IzPack with native Launch4j'er on Win32 -->
    <target name="build.installers.no.extensions"
            depends="no.runtime.extensions,getJRE,getIzPack,moveIzPack,getLaunch4j,getOrangevolt,getRoxes,clean.installers"
            description="Build the installers with no runtime extensions">
        <mkdir dir="${installer}/build" />
        <mkdir dir="${installer}/stage/lib"/>
        <mkdir dir="${installer}/stage/images"/>

        <copy todir="${installer}/stage/Schemas">
            <fileset dir="${schema.dir}"/>
        </copy>
        <copy todir="${installer}/stage/configuration">
            <fileset dir="${configuration.dir}"/>
        </copy>
        <copy todir="${installer}/stage/images">
            <fileset dir="${installer}/images"/>
        </copy>
        <copy todir="${installer}/stage/lib" >
            <fileset refid="runtime.lib"/>
        </copy>
        <!--copy todir="${installer}/stage/lib" >
            <fileset refid="runtime.javac"/>
        </copy-->
        <copy todir="${installer}/stage/lib/jaxb">
            <fileset refid="jaxb.classes"/>
        </copy>
        <copy todir="${installer}/stage">
            <fileset refid="runtime.viskit.exe"/>
        </copy>
        <delete>
            <fileset refid="runtime.viskit.exe"/>
        </delete>
        <copy todir="${installer}/stage/examples">
            <fileset dir="${examples.lib}"/>
        </copy>
        <copy todir="${installer}/stage/license">
            <fileset dir="${basedir}/license"/>
        </copy>
        <copy todir="${installer}/stage/">
            <fileset dir="${dir.src}/viskit/javahelp/VisPages">
                <include name="intro_no_diskit.html"/>
            </fileset>
        </copy>
        <!--copy todir="${installer}/stage">
            <fileset dir="${dir.src}">
                <include name="*.*"/>
            </fileset>
        </copy-->
        <delete file="${installer}/stage/build.xml"/>
        <copy todir="${installer}/stage/viskit/javahelp">
            <fileset dir="${dir.src}/viskit/javahelp"/>
        </copy>
        <copy file="${izpack}/bin/langpacks/installer/eng.xml" tofile="${izpack}/bin/langpacks/installer/usa.xml"/>
        <copy file="${installer}/images/american-flag.gif" tofile="${izpack}/bin/langpacks/flags/usa.gif"/>

        <taskdef name="izpack"
                 classpath="${izpack}/lib/compiler.jar"
                 classname="com.izforge.izpack.ant.IzPackTask"/>

        <taskdef name="launch4j"
                 classname="net.sf.launch4j.ant.Launch4jTask"
                 classpath="${launch4j}/launch4j/launch4j.jar:${launch4j}/launch4j/lib/xstream.jar"/>

        <taskdef classpath="${orangevolt}.jar:${user.home}/roxes.jar"
                 resource="com/orangevolt/tools/ant/taskdefs.properties"/>

        <launch4j configFile="${installer}/launch4jConfig.xml"/>

        <!-- create executable jar file that installs Viskit and related files, assumes java exists,
            however once Viskit.exe actually runs it should check and download latest 1.5.0 -->
        <izpack input="${installer}/izpack.xml"
                output="${installer}/build/ViskitInstall.jar"
                installerType="standard"
                basedir="${installer}"
                izPackDir="${izpack}" />

        <!-- create native win32 wrapper in case java doesn't exist yet to bootstrap ViskitInstall.jar as .exe -->
        <launch4j>
            <config chdir="."
                    dontwrapjar="false"
                    jar="${installer}/build/ViskitInstall.jar"
                    outfile="${installer}/build/ViskitInstall.exe"
                    headertype="gui"
                    icon="${installer}/images/ViskitIcon.ico" >
                <jre minVersion="1.6.0"/>
            </config>
        </launch4j>

        <!-- since above should have already made something that checks and installs JRE, the following
            should not be needed... in which case ViskitInstall.exe is already the deployable, unless CD only -->

        <!-- build Install-Viskit-Win32-JRE.exe, contains JRE and its installer -->

        <echo file="${installer}/build/both.bat" append="false">
            rem use the next line for a silent install.
            rem ${winJREExe} /S /v/qn
            ${winJREExe}
            ViskitInstall.exe
        </echo>

        <chmod perm="+x" file="${installer}/build/both.bat" />
        <!-- this would only work on Unix
        <symlink link="installer/build/${winJRE}" resource="../${winJRE}" />
        plus the file is 16M, do we need that in SVN?
        -->
        <copy file="${winJRE}" todir="${installer}/build" />

        <zip destfile="${installer}/build/install.zip"
             basedir="${installer}/build/."
             includes="both.bat,ViskitInstall.exe,${winJREExe}" />

        <sfx archive="${installer}/build/install.zip"
             mode="win32"
             execute="both.bat"
             icon="${installer}/images/ViskitIcon.ico"
             output="${installer}/build/Install-Viskit-Win32-JRE.exe"/>
    </target>

    <!-- adapted from izpack wiki for building IzPack with native Launch4j'er on Win32 -->
    <target name="build.installers.with.extensions"
            depends="with.runtime.extensions,getJRE,getIzPack,moveIzPack,getLaunch4j,getOrangevolt,getRoxes,clean.installers"
            description="Builds the installers with runtime extension libraries included">
        <mkdir dir="${installer}/build" />
        <mkdir dir="${installer}/stage/lib"/>
        <mkdir dir="${installer}/stage/images"/>

        <copy todir="${installer}/stage/sources/DISKIT">
            <fileset dir="${basedir}/../DISKIT"/>
        </copy>
        <copy todir="${installer}/stage/Schemas">
            <fileset dir="${basedir}/Schemas"/>
        </copy>
        <copy todir="${installer}/stage/configuration">
            <fileset dir="${configuration.dir}"/>
        </copy>
        <copy todir="${installer}/stage/images">
            <fileset dir="${installer}/images"/>
        </copy>
        <copy todir="${installer}/stage/lib" >
            <fileset refid="runtime.lib"/>
        </copy>
        <!--copy todir="${installer}/stage/lib" >
            <fileset refid="runtime.javac"/>
        </copy-->
        <copy todir="${installer}/stage/lib/ext">
            <fileset refid="runtime.lib.ext"/>
        </copy>
        <copy todir="${installer}/stage/lib/jaxb">
            <fileset refid="jaxb.classes"/>
        </copy>
        <copy todir="${installer}/stage">
            <fileset refid="runtime.viskit.exe"/>
        </copy>
        <delete>
            <fileset refid="runtime.viskit.exe"/>
        </delete>
        <copy todir="${installer}/stage/examples">
            <fileset dir="${examples.lib}"/>
        </copy>
        <copy todir="${installer}/stage/license">
            <fileset dir="${basedir}/license"/>
        </copy>
        <copy todir="${installer}/stage/">
            <fileset dir="${dir.src}/viskit/javahelp/VisPages">
                <include name="intro.html"/>
            </fileset>
        </copy>
        <delete file="${installer}/stage/build.xml"/>
        <copy todir="${installer}/stage/viskit/javahelp">
            <fileset dir="${dir.src}/viskit/javahelp"/>
        </copy>
        <!-- do this again just in case IzPack was installed previously -->
        <copy todir="${izpack}/bin/langpacks/flags">
            <fileset dir="${installer}/images">
                <include name="american-flag.gif"/>
            </fileset>
        </copy>
        <copy file="${izpack}/bin/langpacks/installer/eng.xml" tofile="${izpack}/bin/langpacks/installer/usa.xml"/>
        <copy file="${installer}/images/american-flag.gif" tofile="${izpack}/bin/langpacks/flags/usa.gif"/>

        <taskdef name="izpack"
                 classpath="${izpack}/lib/compiler.jar"
                 classname="com.izforge.izpack.ant.IzPackTask"/>

        <taskdef name="launch4j"
                 classname="net.sf.launch4j.ant.Launch4jTask"
                 classpath="${launch4j}/launch4j/launch4j.jar:${launch4j}/launch4j/lib/xstream.jar"/>

        <taskdef classpath="${orangevolt}.jar:${user.home}/roxes.jar"
                 resource="com/orangevolt/tools/ant/taskdefs.properties"/>

        <launch4j configFile="${installer}/launch4jConfig.xml"/>

        <!-- create executable jar file that installs Viskit and related files, assumes java exists,
            however once Viskit.exe actually runs it should check and download latest 1.5.0 -->
        <izpack input="${installer}/izpack.xml"
                output="${installer}/build/ViskitInstall.jar"
                installerType="standard"
                basedir="${installer}"
                izPackDir="${izpack}" />

        <!-- create native win32 wrapper in case java doesn't exist yet to bootstrap ViskitInstall.jar as .exe -->
        <launch4j>
            <config chdir="."
                    dontwrapjar="false"
                    jar="${installer}/build/ViskitInstall.jar"
                    outfile="${installer}/build/ViskitInstall.exe"
                    headertype="gui"
                    icon="${installer}/images/ViskitIcon.ico" >
                <jre minVersion="1.6.0"/>
            </config>
        </launch4j>

        <!-- since above should have already made something that checks and installs JRE, the following
            should not be needed... in which case ViskitInstall.exe is already the deployable, unless CD only -->

        <!-- build Install-Viskit-Win32-JRE.exe, contains JRE and its installer -->

        <echo file="${installer}/build/both.bat" append="false">
            rem use the next line for a silent install.
            rem ${winJREExe} /S /v/qn
            ${winJREExe}
            ViskitInstall.exe
        </echo>

        <chmod perm="+x" file="${installer}/build/both.bat" />
        <!-- this would only work on Unix
        <symlink link="installer/build/${winJRE}" resource="../${winJRE}" />
        plus the file is 16M, do we need that in CVS?
        -->
        <copy file="${winJRE}" todir="${installer}/build" />

        <zip destfile="${installer}/build/install.zip"
             basedir="${installer}/build/."
             includes="both.bat,ViskitInstall.exe,${winJREExe}" />

        <sfx archive="${installer}/build/install.zip"
             mode="win32"
             execute="both.bat"
             icon="${installer}/images/ViskitIcon.ico"
             output="${installer}/build/Install-Viskit-Win32-JRE.exe"/>
    </target>

    <target name="clean.installers">
        <delete dir="${installer}/build"/>
        <delete dir="${installer}/stage"/>
    </target>

    <target name="clean.installer.materials"
            depends="clean.installers"
            description="Clean up all materials from building a Viskit installation executable">

         <delete dir="${izpack}"/>
         <delete file="${user.home}/izpack-install.jar"/>
         <delete dir="${launch4j}"/>
         <delete file="${launch4j}.zip"/>
         <delete file="${orangevolt}.jar"/>
         <delete file="${user.home}/roxes.jar"/>
         <delete file="${winJRE}"/>
    </target>

    <!--  === TARGET: clean === -->
    <target name="clean"
            depends="init"
            description="Deletes build directory, javadoc and dist directories, and lib/ext/*.jar(s)">
        <delete dir="${dir.bindings}"/>
        <delete dir="${dir.build}"/>
        <delete dir="${dir.dist}"/>
        <delete dir="${dir.lib.ext}">
            <include name="*.jar"/>
        </delete>
    </target>

    <!--target name="delete.temps.cache" depends="init"-->
        <!-- create the batch file to delete temp files -->
        <!--echo file="deleteTempsCache.bat" append="false">@echo on
@rem Built by ${ant.project.name} on ${TODAY} at ${TSTAMP} hrs
${delete.temps.cache}</echo>
        <exec executable="deleteTempsCache.bat" resolveexecutable="true"/>
    </target-->

</project>