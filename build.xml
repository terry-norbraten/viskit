<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="build-run-default-plain" name="Viskit">
    <description>
        Ant build file for the NPS Viskit and associated libraries. Third-party
        jar files are not compiled from source here, but they are copied as
        necessary for the Viskit distribution.
    </description>
    
    <!-- External properties file.  This contains properties that vary from developer       -->
    <!-- to developer.  Also, any properties in this file will override the properties set  -->
    <!-- in this build.xml file, so, be careful.                                            -->
    <property file="build.properties"/>
    
    <!-- magic properties, do not change or delete -->

    <property name="build.compiler" value="modern"/>
    
    <!-- CVS properties (this file) -->
    <property name="CVSId" value="$Id: build.xml 1672 2007-12-21 02:45:44Z tdnorbra $"/>
    
    <!-- Project directories -->
    
    <property description="Where the distribution files wind up." location="dist" name="dir.dist"/>
    
    <property description="Where all the JAXB 2.1 extensions are." location="${dir.lib}/jaxb-2.1" name="dir.lib.xml"/>
    
    <property description="Runtime module extension libraries." location="${dir.lib}/ext" name="dir.lib.ext"/>
    
    <property description="Root of the javadoc tree for Viskit." location="doc/api" name="dir.api.doc"/>
    
    <property description="Generated JAXB bindings for Simevg" location="${dir.bindings}/eventgraph" name="dir.src.simevg"/>
    
    <property description="Generated JAXB bindings for Simasm" location="${dir.bindings}/assembly" name="dir.src.simasm"/>
    
    <property description="Generated JAXB bindings for CLI config" location="${dir.bindings}/cli" name="dir.src.cli"/>
    
    <property description="Generated JAXB bindings for SGE qstat config" location="${dir.bindings}/sge/qstat" name="dir.src.sge.qstat"/>
    
    <property description="Examples directory" location="examples" name="dir.examples"/>
    
    <property description="Behavior Libraries Directory" location="BehaviorLibraries" name="behavior.lib" />
    
    <property description="DISKIT directory" location="../DISKIT" name="dir.diskit"/>
    
    <property description="Simasm utility" location="${dir.src}/viskit/xsd/assembly" name="dir.src.simasm.util"/>
    
    <property description="CLI utility" location="${dir.src}/viskit/xsd/cli" name="dir.src.cli.util"/>
    
    <property description="SGE utilities" location="${dir.src}/viskit/xsd/sge" name="dir.src.sge.util"/>
    
    <property description="Simevg utility" location="${dir.src}/viskit/xsd/translator" name="dir.src.simevg.util"/>
    
    <property description="where the help source sits" location="${dir.src}/viskit/javahelp" name="javahelp"/>
    
    <property description="where the generated and copied help files go" location="${dir.build.classes}/viskit/javahelp" name="build.javahelp"/>
        
    <!-- access to local environment variables -->
    <property environment="env"/>
    
    <path id="runtime.extension.classes.path">
        <fileset dir="${dir.lib.ext}" includes="*.jar" id="runtime.extension.classes" />
    </path>
    
    <path id="jaxb.classes.path">        
        <fileset dir="${java.endorsed}" includes="jaxb-api.jar" id="jaxb.api"/>
        <fileset dir="${dir.lib.xml}" includes="*.jar" id="jaxb.classes"/>
    </path>
    
    <!-- pathconvert?, path refid can be used in classpath, but not copy -->
    <fileset dir="${env.JAVA_HOME}/lib" id="runtime.javac">
        <include name="tools.jar"/>
    </fileset>
    <fileset file="${dist.jar}" id="runtime.viskit"/>
    <fileset dir="${dir.build}/lib" id="runtime.viskit.exe">
        <include name="viskit-exe.jar"/>
    </fileset>
    <fileset dir="${dir.lib}" id="runtime.lib" >
        <!-- could use restrictions in current runtime.classpath -->
        <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${dir.lib}/ext" id="runtime.lib.ext" >        
        <include name="**/*.jar"/>
    </fileset>
    
    <!-- so following could replace the next path after the following -->
    
    <path id="runtime.classpath.paths">
        <fileset refid="runtime.javac"/>
        <fileset refid="runtime.viskit"/>
        <fileset refid="runtime.lib"/>
        <fileset refid="runtime.lib.ext"/>
        <fileset refid="jaxb.classes"/>
    </path>
    
    <!-- this path gets pathconverted for the native launcher in the jar target, see launch4j -->
    <path id="launcher.classpath">
        <fileset refid="runtime.lib"/>
        <fileset refid="runtime.lib.ext"/>
        <fileset refid="jaxb.classes"/>
    </path>
    
    <path id="runtime.classpath">
    
        <!-- use local JDK for tools.jar -->
        <!-- remember to override your environment variable for -->
        <!-- JAVA_HOME to point to the JDK version you are building -->
        <!-- against. Netbeans sets this in the NETBEANS_HOME/etc/netbeans.conf file -->
        <pathelement location="${env.JAVA_HOME}/lib/tools.jar"/>
        <pathelement location="${dist.jar}"/>
        <pathelement location="${dir.lib}/simkit.jar"/>
        <pathelement location="${dir.lib}/bsh-2.0b4.jar"/>
        <pathelement location="${dir.lib}/jgraph.jar"/>
        <pathelement location="${dir.lib}/actions.jar"/>
        <pathelement location="${dir.lib}/jhall.jar"/>
        <pathelement location="${dir.lib}/jdom.jar"/>
        <pathelement location="${jfreechart.jar}"/>
        <pathelement location="${jcommon.jar}"/>
        <pathelement location="${dir.lib}/jedit.jar"/>
        <pathelement location="${dir.lib}/junit.jar"/>
        <pathelement location="${dir.lib}/commons-beanutils-1.7.0.jar"/>
        <pathelement location="${dir.lib}/commons-codec-1.3.jar"/>
        <pathelement location="${dir.lib}/commons-collections-3.1.jar"/>
        <pathelement location="${dir.lib}/commons-configuration-1.2.jar"/>
        <pathelement location="${dir.lib}/commons-digester-1.6.jar"/>
        <pathelement location="${dir.lib}/commons-lang-2.0.jar"/>
        <pathelement location="${dir.lib}/commons-logging-1.1.jar"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${dir.lib}/looks-1.3.1.jar"/>
        <pathelement location="${dir.lib}/xercesImpl.jar"/>
        <pathelement location="${dir.lib}/xalan.jar"/>
        <pathelement location="${dir.lib}/serializer.jar"/>        
        <pathelement location="${dir.lib}/xmlrpc-2.0.jar"/>
        <path refid="jaxb.classes.path"/>
        <path refid="runtime.extension.classes.path"/>
    </path>
    
    <target name="checkJAVA_HOME" unless="env.JAVA_HOME">
        <echo message="warning:  JAVA_HOME not set!"/>
    </target>
    
    <!--  === TARGET: help === -->
    <target name="help">
        <echo>
            This is the Ant build file for the NPS Viskit and associated libraries.
            Third-party jar files are not compiled from source here, but they are
            copied as necessary for the simkit distribution.  This buildfile was created
            and tested using Ant version 1.6.5. Modified from Simkit's build.xml.
        </echo>
    </target>
    
    <!--  === TARGET: init === -->
    <target description="Preparatory actions required for all targets." name="init">
        <tstamp/>
        <echo message="Build started on ${DSTAMP} at ${TSTAMP}"/>
        <echo message="Buildfile version ${CVSId}"/>
        <echo message="Base directory: ${basedir}"/>
        <echo message="Source directory: ${dir.src}"/>
        <echo message="Build directory: ${dir.build}"/>
        <echo message="JAVA_HOME: ${env.JAVA_HOME}"/>
    </target>
    
    <!--  === TARGET: build.init === -->
    <target depends="init" description="Preparatory actions for compilation and documentation targets" name="build.init">
        <mkdir dir="${dir.build}"/>
        <mkdir dir="${dir.build.lib}"/>
        <mkdir dir="${dir.build.classes}"/>
        <mkdir dir="${dir.build.classes}/${analyst.reports.dir}"/>
        <mkdir dir="${dir.api.doc}"/>
        <mkdir dir="${dir.src.simevg}"/>
        <mkdir dir="${dir.src.simasm}"/>
        <mkdir dir="${dir.src.cli}"/>
        <mkdir dir="${dir.lib.ext}"/>       
        <mkdir dir="${event.graphs}"/>
        <mkdir dir="${assemblies}"/>
        <mkdir dir="${charts}"/>
    </target>
    
    <target depends="init" 
            description="build the help search database" 
            name="javahelp">
        <java classname="com.sun.java.help.search.Indexer"
              fork="true">            
            
            <!-- turn this on to make sure it's working -->
            <!--arg value="-verbose"/-->
            <arg value="-db"/>
            <arg value="${build.javahelp}/JavaHelpSearch"/>
            <arg value="${javahelp}/Pages"/>
            <classpath>
                <pathelement location="${dir.lib}/jhall.jar"/>
            </classpath>
        </java>
        <copy todir="${build.javahelp}">
            <fileset dir="${javahelp}"/>
        </copy>
        
    </target>
    
    <!--  === TARGET: compile === -->
    <target name="compile" depends="build.init,compile.simxml.util">
        <javac verbose="no" 
               destdir="${dir.build.classes}" 
               excludes="xsd/** test/**"
               debug="true"
               debugLevel="lines,vars,source"
               source="1.5"
               target="1.5">
            
            <!-- Reveals generics and deprecation warings -->
            <compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/>
            <classpath>
                <pathelement location="${dir.lib}/bsh-2.0b4.jar"/>
                <pathelement location="${dir.lib}/jdom.jar"/>
                <pathelement location="${dir.lib}/jgraph.jar"/>
                <pathelement location="${dir.lib}/actions.jar"/>
                <pathelement location="${dir.lib}/simkit.jar"/>
                <pathelement location="${dir.lib}/trang.jar"/>
                <pathelement location="${dir.lib}/trangtask.jar"/>
                <pathelement location="${dir.lib}/jhall.jar"/>
                <pathelement location="${jfreechart.jar}"/>
                <pathelement location="${jcommon.jar}"/>
                <pathelement location="${dir.lib}/jedit.jar"/>
                <pathelement location="${dir.lib}/commons-beanutils-1.7.0.jar"/>
                <pathelement location="${dir.lib}/commons-collections-3.1.jar"/>
                <pathelement location="${dir.lib}/commons-configuration-1.2.jar"/>
                <pathelement location="${dir.lib}/commons-digester-1.6.jar"/>
                <pathelement location="${dir.lib}/commons-lang-2.0.jar"/>
                <pathelement location="${dir.lib}/commons-logging-1.1.jar"/>
                <pathelement location="${dir.lib}/cli.jar"/>
                <pathelement location="${log4j.jar}"/>
                <pathelement location="${dir.lib}/looks-1.3.1.jar"/>
                <pathelement location="${dir.lib}/xercesImpl.jar"/>
                <pathelement location="${dir.lib}/xmlrpc-2.0.jar"/>
                <pathelement location="${dir.build.classes}"/>
                <fileset dir="${dir.lib.xml}" includes="*.jar"/>
            </classpath>
            <src path="${dir.src}/viskit"/>
        </javac>
        <copy todir="${dir.build.classes}">
            <fileset dir="${dir.src}">
                <include name="viskit/version.txt"/>
                <include name="viskit/xsd/cli/manif.txt"/>
                <include name="viskit/images/*.png"/>
                <include name="viskit/images/*.gif"/>
                <include name="viskit/images/*.jpg"/>                
            </fileset>
            <fileset dir="${basedir}">
                <include name="log4j.properties"/>
                <include name="${analyst.reports.stylesheet}"/>
            </fileset>
        </copy>
    </target>
    
    <!--  === TARGET: jar === -->
    <target depends="compile,javahelp" name="jar">       
        <jar basedir="${dir.build.classes}" 
             compress="false"
             destfile="${dist.jar}">
            <manifest>
                <attribute name="Built-By" value="${my.name}"/>
                <attribute name="Specification-Title" 
                           value="${product.Name}"/>
                <attribute name="Specification-Version" 
                           value="${product.version.major}.${product.version.minor}"/>
                <attribute name="Specification-Vendor" 
                           value="${spec.vendor}"/>
                <attribute name="Implementation-Title" 
                           value="${impl.title}"/>
                <attribute name="Implementation-Version" 
                           value="${product.Version} built on ${TODAY} at ${TSTAMP} hrs"/> 
                <attribute name="Implementation-Vendor" 
                           value="${nps}, ${moves.institute}, ${savage.research.group}"/>
                <attribute name="Implementation-URL" 
                           value="${Savage.url}"/>
                <section name="edu.nps.util"/>
                <section name="viskit"/>
                <section name="viskit.doe"/>
                <section name="viskit.images"/>
                <section name="viskit.jgraph"/>
                <section name="viskit.model"/>
                <section name="viskit.mvc"/>
                <section name="viskit.util"/>
                <section name="viskit.xsd.assembly"/>
                <section name="viskit.xsd.bindings.assembly"/>
                <section name="viskit.xsd.bindings.stats"/>
                <section name="viskit.xsd.bindings.cli"/>
                <section name="viskit.xsd.bindings.eventgraph"/>
                <section name="viskit.xsd.cli"/>
                <section name="viskit.xsd.translator"/>
            </manifest>
            <metainf file="license/lgpl.txt"/>
        </jar>
    </target>
    
    <target depends="compile" name="jar-executable">
        <pathconvert targetos="windows" pathsep=" " property="launcher.jar.internal.classpath" refid="launcher.classpath">
            <map from="${dir.lib}" to=".\lib" />
        </pathconvert>
        
        <jar basedir="${dir.build.classes}" compress="false" jarfile="${dir.build.lib}/viskit-exe.jar">
            <manifest>
                <!-- used by native launcher, see launch4j -->
                <attribute name="Main-Class" value="viskit.Splash2$DefaultEntry" />
                <attribute name="Class-Path" value=". ${launcher.jar.internal.classpath}" />
            </manifest>
        </jar>
        
    </target>
    
    <target depends="compile.bindings" name="jar-stage1">
         <jar basedir="${dir.build.classes}" 
              compress="false" 
              excludes="*/test/*" 
              jarfile="${dir.build.lib}/visxml.jar"/>        
    </target>
    
    <target name="splashy" description="@deprecated">
        <splash imageurl="file:///${basedir}/${dir.src}/viskit/images/ViskitSplash2.png" showduration="0"/>
    </target>
    
    <!--  === TARGET: doc. Create javadocs and put the result in the docs directory. === -->
    <target name="doc"
            depends="build.init,compile" 
            description="Create the javadoc for Viskit.">
        <javadoc access="public" 
                 author="true"
                 destdir="${dir.api.doc}"
                 sourcepath="${dir.src}"
                 bottom="${copyright}"
                 version="true">

            <!-- Include all the jar files in the lib directory; this prevents some
            javadoc warnings about classes not being found. -->
            <classpath>
                <fileset dir="${dir.lib.xml}" includes="*.jar"/>
                <fileset dir="${dir.lib}" includes="*.jar"/>
            </classpath>
            <package name="viskit"/>
            <package name="edu.nps.util"/>            
            <package name="viskit.doe"/>
            <package name="viskit.images"/>
            <package name="viskit.jgraph"/>
            <package name="viskit.model"/>
            <package name="viskit.mvc"/>
            <package name="viskit.util"/>
            <package name="viskit.xsd.assembly"/>
            <package name="viskit.xsd.bindings.assembly"/>
            <package name="viskit.xsd.bindings.assembly.stats"/>
            <package name="viskit.xsd.bindings.cli"/>            
            <package name="viskit.xsd.bindings.eventgraph"/>
            <package name="viskit.xsd.cli"/>       
            <package name="viskit.xsd.translator"/>
            
            <!-- Updated links to current APIs -->
            <link href="${j2se.api}"/>
            <link href="${simkit.api}"/>
            <link href="${jdom.api}"/>
        </javadoc>
    </target>
    
    <!-- === TARGET: dist === -->
    <target depends="clean.all,jar,doc" name="dist">
        <mkdir dir="${dir.dist}"/>
        <mkdir dir="${dir.dist}/doc/api"/>
        <mkdir dir="${dir.dist}/BehaviorLibraries"/>
        <copy todir="${dir.dist}">
            <fileset dir="${dir.build.lib}"/>
        </copy>
        <copy todir="${dir.dist}/doc">
            <fileset dir="${dir.api.doc}"/>
        </copy>
        <copy todir="${dir.dist}/BehaviorLibraries">
            <fileset dir="${behavior.lib}">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>
    
    <target depends="jar" name="gridkit-jar">
        <delete dir="${dir.dist}/gridkit-stage"/>
        <mkdir dir="${dir.dist}/gridkit-stage"/>
        
        <mkdir dir="${dir.dist}/gridkit"/>
        <copy todir="${dir.dist}/gridkit-stage">
            <fileset dir="${dir.build.lib}">
                <include name="visxml.jar"/>
            </fileset>
            <fileset dir="${dir.lib}">
                <include name="simkit.jar"/>
                <include name="xmlrpc-2.0.jar"/>
                <include name="bsh-2.0b4.jar"/>
                <include name="commons-configuration-1.2.jar"/>
                <include name="commons-beanutils-1.7.0.jar"/>
                <include name="commons-codec-1.3.jar"/>
                <include name="commons-collections-3.1.jar"/>
                <include name="commons-digester-1.6.jar"/>
                <include name="commons-lang-2.0.jar"/>
                <include name="commons-logging-1.1.jar"/>
                <include name="jdom.jar"/>
            </fileset>
            <fileset dir="${dir.lib.ext}">
                <include name="diskit.jar"/>
                <include name="dis.jar"/>
            </fileset>
            <!--  <fileset dir="${dir.lib.xml}">
                <include name="jaxb-api.jar"/>
                <include name="jaxb-impl.jar"/>
                <include name="jaxb-libs.jar"/> 
            </fileset>-->
            <fileset dir="${env.JAVA_HOME}/lib">
                <include name="tools.jar"/>
            </fileset>
            <fileset dir="${dir.src.cli.util}">
                <include name="config.properties"/>
            </fileset>
        </copy>
        <mkdir dir="${dir.dist}/gridkit-stage/viskit/xsd/cli"/>
        <copy todir="${dir.dist}/gridkit-stage/viskit/xsd/cli" >
            <fileset dir="${dir.build}/classes/viskit/xsd/cli" >
                <include name="Boot.class"/>
                <include name="Launcher.class"/>
            </fileset>
        </copy>
        <mkdir dir="${dir.dist}/gridkit-stage/BehaviorLibraries"/>
        <copy todir="${dir.dist}/gridkit-stage/BehaviorLibraries">
            <fileset dir="${behavior.lib}">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
        <jar basedir="${dir.dist}/gridkit-stage" 
             destfile="${dir.dist}/gridkit.jar"
             manifest="${dir.src.cli.util}/manif.txt" />
        
    </target>
    
    <taskdef classname="com.sun.tools.xjc.XJCTask" 
             name="xjc"
             classpathref="jaxb.classes.path"/>
    
    <taskdef classname="net.amadan.trang.ant.TrangTask" name="trang">
        <classpath>
            <fileset dir="${dir.lib}" includes="trang*.jar"/>
        </classpath>
    </taskdef>   
    
    <target depends="build.schema" description="Create bindings to the simkit XML Schema" name="bindings.simkit">
        
        <xjc extension="true" 
             package="viskit.xsd.bindings.eventgraph" 
             schema="${dir.src.simevg.util}/simkit.xsd" 
             destdir="${dir.src}">
            <produces dir="${dir.src.simevg}"/>
        </xjc>
        <xjc extension="true" 
             package="viskit.xsd.bindings.assembly" 
             schema="${dir.src.simasm.util}/assembly.xsd" 
             destdir="${dir.src}">
            <produces dir="${dir.src.simasm}"/>
        </xjc>
        <xjc extension="true" 
             package="viskit.xsd.bindings.assembly.stats" 
             schema="${dir.src.simasm.util}/statistics.xsd" 
             destdir="${dir.src}">
            <produces dir="${dir.src.simasm}/stats"/>
        </xjc>       
        <xjc extension="true" 
             package="viskit.xsd.bindings.cli" 
             schema="${dir.src.cli.util}/cli.xsd" 
             destdir="${dir.src}">
            <produces dir="${dir.src.cli}"/>
        </xjc>
        <!--
        <xjc extension="true" package="viskit.xsd.bindings.sge.qstat" schema="${dir.src.sge.util}/qstat/qstat.xsd" destdir="${dir.src}">
        <produces dir="${dir.src.sge.qstat}" includes="* impl/* impl/runtime/*" />
        </xjc>
        -->
    </target>
    
    <target depends="build.init" description="Create xsd Schemas from dtd" name="build.schema">
        <trang failonerror="true" input="${dir.src.simevg.util}/simkit.dtd" output="${dir.src.simevg.util}/simkit.xsd" schemaIn="dtd" schemaOut="xsd"/>
        <trang failonerror="true" input="${dir.src.simasm.util}/assembly.dtd" output="${dir.src.simasm.util}/assembly.xsd" schemaIn="dtd" schemaOut="xsd"/>
        <!-- useful for autogenerating stats schema and adding type validator
        <trang failonerror="true" input="${dir.src.simasm.util}/statistics.dtd" output="${dir.src.simasm.util}/statistics.xsd" schemaIn="dtd" schemaOut="xsd"/>
        <patch patchfile="${dir.src.simasm.util}/statistics.xsd.patch" originalfile="${dir.src.simasm.util}/statistics.xsd" /> 
        -->
        <trang failonerror="true" input="${dir.src.cli.util}/cli.dtd" output="${dir.src.cli.util}/cli.xsd" schemaIn="dtd" schemaOut="xsd"/>
    </target>
    
    <target depends="bindings.simkit" description="Build bindings to Schemas" name="compile.bindings">
        <javac destdir="${dir.build.classes}"
               debug="off"
               source="1.5"
               target="1.5">
            
            <!-- Reveals generics and deprecation warings -->
            <!--compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/-->
            <classpath id="jaxb.classapth">
                <fileset dir="${dir.lib.xml}" includes="*.jar"/>
            </classpath>
            <src path="${dir.src.simevg}"/>
        </javac>
        <copy todir="${dir.build.classes}/viskit/xsd/bindings/eventgraph">
            <fileset dir="${dir.bindings}/eventgraph" includes="jaxb.properties"/>
            <fileset dir="${dir.bindings}/eventgraph" includes="bgm.ser"/>
        </copy>
        <javac destdir="${dir.build.classes}"
               debug="on"
               source="1.5"
               target="1.5">
            
            <!-- Reveals generics and deprecation warins -->
            <!--compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/-->
            <classpath refid="jaxb.classapth"/>
            <src path="${dir.src.simasm}"/>
        </javac>
        <copy todir="${dir.build.classes}/viskit/xsd/bindings/assembly">
            <fileset dir="${dir.bindings}/assembly" includes="jaxb.properties"/>
            <fileset dir="${dir.bindings}/assembly" includes="bgm.ser"/>
        </copy>
        <javac destdir="${dir.build.classes}"
               debug="on"
               source="1.5"
               target="1.5">
            
            <!-- Reveals generics and deprecation warings -->
            <!--compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/-->
            <classpath refid="jaxb.classapth"/>
            <src path="${dir.src.simasm}/stats"/>
        </javac>
        <copy todir="${dir.build.classes}/viskit/xsd/bindings/assembly/stats">
            <fileset dir="${dir.bindings}/assembly/stats" includes="jaxb.properties"/>
            <fileset dir="${dir.bindings}/assembly/stats" includes="bgm.ser"/>
        </copy>
        <javac destdir="${dir.build.classes}"
               debug="on"
               source="1.5"
               target="1.5">
            
            <!-- Reveals generics and deprecation warings -->
            <!--compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/-->
            <classpath refid="jaxb.classapth"/>
            <src path="${dir.src.cli}"/>
        </javac>
        <copy todir="${dir.build.classes}/viskit/xsd/bindings/cli">
            <fileset dir="${dir.bindings}/cli" includes="jaxb.properties"/>
            <fileset dir="${dir.bindings}/cli" includes="bgm.ser"/>
        </copy>
        <!--
        <javac destdir="${dir.build.classes}"
            debug="on"
            source="1.5"
            target="1.5">

            <compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/>
            <src path="${dir.src.sge.qstat}"/>
        </javac>
        <copy todir="${dir.build.classes}/viskit/xsd/bindings/sge/qstat">
            <fileset dir="${dir.bindings}/sge/qstat" includes="jaxb.properties"/>
            <fileset dir="${dir.bindings}/sge/qstat" includes="bgm.ser"/>
        </copy>
        -->
    </target>
    
    <!-- depend create stage 1 visxml.jar which later includes stuff from this compile to make ${dist.jar} -->
    <target name="compile.simxml.util"
            depends="jar-stage1" 
            description="Build xml2java utils">

        <javac destdir="${dir.build.classes}"
               debug="off"
               source="1.5"
               target="1.5">
            
            <!-- Reveals generics and deprecation warings -->
            <compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/>
            <classpath>
                <pathelement location="${log4j.jar}"/>
                <pathelement location="${dir.lib}/visxml.jar"/>
            </classpath>            
            <src path="${dir.src}/edu/"/>
            <src path="${dir.src.simevg.util}"/>
        </javac>
        
        <javac destdir="${dir.build.classes}"
               debug="on"
               source="1.5"
               target="1.5">
            
            <!-- Reveals generics and deprecation warings -->
            <compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/>
            <classpath>
                <pathelement location="${log4j.jar}"/>
                <pathelement location="${dir.lib}/bsh-2.0b4.jar"/>
            </classpath>
            <src path="${dir.src.cli.util}"/>
            <include name="Launcher.java"/>
            <include name="Boot.java"/>
        </javac>        
        
        <javac destdir="${dir.build.classes}"
               debug="on"
               source="1.5"
               target="1.5">
            
            <!-- Reveals generics and deprecation warings -->
            <compilerarg value="${javac.unchecked}"/>
            <compilerarg value="${javac.deprecation}"/>
            <classpath>
                <pathelement location="${dir.lib}/visxml.jar"/>
                <pathelement location="${dir.lib}/bsh-2.0b4.jar"/>
                <pathelement location="${dir.lib}/simkit.jar"/>
                <pathelement location="${dir.lib}/xmlrpc-2.0.jar"/>
                <pathelement location="${dir.lib}/jdom.jar"/>
                <pathelement location="${dir.lib}/xercesImpl.jar"/>
                <pathelement location="${jfreechart.jar}"/>
                <pathelement location="${jcommon.jar}"/>
                <pathelement location="${log4j.jar}"/>
            </classpath>
            <src path="${dir.src}/viskit/doe"/>
            <src path="${dir.src.simasm.util}"/>
            <include name="LocalBootLoader.java"/>
            <include name="LocalTaskQueue.java"/>
            <include name="DoeException.java"/>
            <include name="GenericConversion.java"/>
            <include name="SimkitAssemblyXML2Java.java"/>
            <include name="ViskitAssembly.java"/>
            <include name="BasicAssembly.java"/>
            <include name="LatinPermutator.java"/>
            <include name="SessionManager.java"/>
            <include name="AssemblyServer.java"/>
            <include name="SecureAssemblyServer.java"/>
            <include name="AssemblyHandler.java"/>
            <include name="GridRunner.java"/>
            <include name="Gridlet.java"/>
            <include name="GridletEventList.java"/>
            <include name="ReportStatisticsConfig.java"/>
            <include name="ReportStatisticsDOM.java"/>
            <include name="XsltUtility.java"/>
            <include name="TempDir.java"/>
            <include name="DirDeleter.java"/>
            <include name="BshGridlet.java"/>
            <include name="ChartDrawer.java"/>
        </javac>        
        
        <jar update="yes" 
             jarfile="${dir.build.lib}/visxml.jar" 
             basedir="${dir.build.classes}" 
             compress="false" />
    </target>   
    
    <!-- just add new modules to the depends variable here -->
    <target name="examples"
            depends="fresh-diskit" 
            description="compile application specific modules, like diskit"/>
    
    <target name="fresh-diskit" description="diskit module">
        <echo message="Building Diskit:"/>
        <ant dir="${dir.diskit}" target="jar" inheritAll="false"/>
        <copy file="${dir.diskit}/lib/dis.jar" todir="${dir.lib.ext}"/>
        <copy file="${dir.diskit}/dist/lib/diskit.jar" todir="${dir.lib.ext}"/> 
    </target>
    
    <target depends="jar,examples" description="Build viskit and diskit jars" name="build.examples"/>
    
    <!-- TARGET: Run w/Viskit custom splash -->
    <target depends="build.examples,checkJAVA_HOME" description="Build and Run Viskit extended, include example modules, Viskit custom Splash" name="build-run-default-extended">
        <java classname="viskit.Splash2" 
              classpathref="runtime.classpath" 
              fork="true">
            <arg value="viskit.EventGraphAssemblyComboMain"/>
            <jvmarg value="-XX:MaxPermSize=160m"/>
            <jvmarg value="-Xmx256m"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>
    <target depends="jar" description="Build and Run Viskit only, no module dependencies, Viskit custom Splash" name="build-run-default-plain">
        <java classname="viskit.Splash2" 
              classpathref="runtime.classpath" 
              fork="true">
            <arg value="viskit.EventGraphAssemblyComboMain"/>
            <jvmarg value="-XX:MaxPermSize=160m"/>
            <jvmarg value="-Xmx256m"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>
    <target depends="jar" description="Build and Run Viskit (original L and F) only, no module dependencies, Viskit custom Splash @deprecated" name="build-run-default-orig">
        <java classname="viskit.Splash2" 
              classpathref="runtime.classpath" 
              fork="true">
            <arg value="viskit.Main"/>
            <!-- Font anti-aliasing -->
            <jvmarg value="-Dswing.aatext=true"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>
    
    <!-- TARGET: Run w/Ant Splash @deprecated-->
    <target depends="splashy,build.examples,checkJAVA_HOME" description="Build and Run Viskit, include example modules if any, display Ant Splash @deprecated" name="build-run">
        <java classname="viskit.EventGraphAssemblyComboMain" 
              classpathref="runtime.classpath" 
              fork="true">
            <jvmarg value="-XX:MaxPermSize=160m"/>
            <jvmarg value="-Xmx256m"/>            
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>
    <target depends="splashy,jar" description="Build and Run Viskit (original L and F) only, no module dependencies, display Ant Splash @deprecated" name="build-run-orig">
        <java classname="viskit.Main" 
              classpathref="runtime.classpath" 
              fork="true">
            <!-- Font anti-aliasing -->
            <jvmarg value="-Dswing.aatext=true"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>    
    
    <!-- TARGET: Quick Run, don't check dependencies, TBD ant should be able to not rebuild if not needed -->
    <target description="Run Viskit, don't check dependencies" name="quick-run">
        <java classname="viskit.Splash2" 
              classpathref="runtime.classpath" 
              fork="true">
            <arg value="viskit.EventGraphAssemblyComboMain"/>
            <jvmarg value="-XX:MaxPermSize=160m"/>
            <jvmarg value="-Xmx256m"/>            
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>
    <target description="Run Viskit (original L and F), don't check dependencies @deprecated" name="quick-run-orig">
        <java classname="viskit.Splash2" 
              classpathref="runtime.classpath" 
              fork="true">
            <arg value="viskit.Main"/>
            <!-- Font anti-aliasing -->
            <jvmarg value="-Dswing.aatext=true"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>
    
    <target description="TestCodeFormat runner" name="test-code-format">
        <java classname="viskit.test.TestCodeFormat" classpathref="runtime.classpath" fork="true">
            <arg value="viskit/test/ArrayTester.xml"/>
        </java>
    </target>
    
    <target description="Test Gridkit login" name="test-gridkit-login">
        <java classname="viskit.test.TestGridkitLogin" classpathref="runtime.classpath" fork="true">
            <arg value="localhost" />
            <arg value="4444" />
        </java>
    </target>
    
    <target description="Test Gridkit qstat" name="test-gridkit-qstat">
        <java classname="viskit.test.TestGridkitQstat" classpathref="runtime.classpath" fork="true">
            <arg value="localhost" />
            <arg value="4444" />
        </java>
    </target>
    
    <target description="Test Gridkit ServerAssembly3" name="test-gridkit-ServerAssembly3">
        <java classname="viskit.test.TestGridkitServerAssembly3" classpathref="runtime.classpath" fork="true">
            <arg value="localhost" />
            <arg value="4444" />
        </java>
    </target>
    
    <target depends="jar, examples" description="Run Design-Of-Experiments" name="runDOE">
        <java classname="viskit.doe.DoeMain" classpathref="runtime.classpath" fork="true" dir="${basedir}"/>
    </target>
    
    <target name="debug-quick"  description="Quick debug">
        <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>
        <nbjpdastart name="Viskit" addressproperty="jpda.address" transport="dt_socket">
            <classpath path="runtime.classpath"/>
            <!-- Optional - If source roots are properly declared in project, should
            wor/home/rmgold/CVS/Viskit/viskit/xsd/assembly/GridRunner.java:683: cannot find symbolk without setting source path.     
            <sourcepath path="debug.sourcepath"/> -->
        </nbjpdastart>
        <java classname="viskit.Splash2" fork="true">
            <arg value="viskit.EventGraphAssemblyComboMain"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xnoagent"/>
            <jvmarg value="-Djava.compiler=none"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
            <jvmarg value="-Dswing.aatext=true"/>
            <jvmarg value="-XX:MaxPermSize=1024m"/>
            <jvmarg value="-client"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
            <classpath refid="runtime.classpath"/>
        </java>
    </target>
    
    <target name="debug" depends="compile" description="Debug Project">
        <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>
        <nbjpdastart name="Viskit" addressproperty="jpda.address" transport="dt_socket">
            <classpath path="runtime.classpath"/>
            <!-- Optional - If source roots are properly declared in project, should
            work without setting source path.     
            <sourcepath path="debug.sourcepath"/> -->
        </nbjpdastart>
        <java fork="true" classname="viskit.Main">
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xnoagent"/>
            <jvmarg value="-Djava.compiler=none"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
            <classpath refid="runtime.classpath"/>
            <jvmarg value="-Djava.endorsed.dirs=${java.endorsed}"/>
        </java>
    </target>
    
    
    <!-- The Installer contains the JRE, a native wrapper around ${dist.jar} and its jars, 
        and the actual installer. JRE, IzPack the installer generator, launch4j the wrapper
        maker, and orangevolt/roxes the sfx for win32 registries are downloaded if needed.
        To save time, all slow steps are checked if needed, including the build. -->
        
    <!-- get all izpack related packages -->
    <condition property="build.host.linux">
        <os family="unix"/>
    </condition>
    <condition property="build.host.windows">
        <os family="windows"/>
    </condition>
    <condition property="build.host.mac">
        <os family="mac"/>
    </condition>
    
    <property name="installer" value="${basedir}/installer" />
    <property name="izpack" value="${user.home}/IzPack" />
    <property name="launch4j" value="${user.home}/launch4j" />
    <property name="orangevolt" value="${user.home}/orangevolt"/>
    <!-- it could be the case from a cvs checkout that asks for a pruned tree,
        in which case, this would get set before build.init can complete the path 
        which will break runtime.jars below -->
    <mkdir dir="${dir.lib.ext}" />
    <property name="runtime.jars" refid="runtime.classpath" />
    <!-- the following name can be anything, the url link to download returns the latest jre 1.5 for windows -->
    <!-- it should be named manually though for what version has been tested -->
    <property name="winJreExe" value="jdk-6u2-windows-i586-p.exe"/>
    <property name="winJre" value="${user.home}${file.separator}${winJreExe}" />
    
    <target name="checkJre" >
        <available file="${winJre}" property="winJre.exists" />
    </target>
    <target name="getJre" depends="checkJre" unless="winJre.exists"  >
        <get src="http://www.java.net/download/jdk6/6u2/promoted/b02/binaries/jdk-6u2-ea-bin-b02-windows-i586-p-12_apr_2007.exe" dest="${winJre}" />
    </target>
    
    <target name="moveIzPack" if="build.host.windows">
        <copy todir="${user.home}\IzPack">
            <!-- for 64 bit windows only
            <fileset dir="C:\Program Files (x86)\IzPack"/>
            -->
            <fileset dir="C:\Program Files\IzPack"/>
        </copy>
    </target>
    <target name="checkIzPack">
        <available file="${izpack}/lib/compiler.jar" property="izPack.exists" />
    </target>
    <target name="getIzPack" depends="checkIzPack" unless="izPack.exists" >
        <get src="http://download.berlios.de/izpack/IzPack-install-3.10.2.jar" dest="${user.home}/izpack-install.jar" />
        <echo>Installing IzPack from web, please just use default install path when prompted.</echo>
        <java fork="true" jar="${user.home}/izpack-install.jar" />
        <ant target="moveIzPack"/>
        <copy todir="${izpack}/bin/langpacks/flags">
            <fileset dir="${installer}/images">
                <include name="american-flag.gif"/>
            </fileset>
        </copy>
        <copy file="${izpack}/bin/langpacks/installer/eng.xml" tofile="${izpack}/bin/langpacks/installer/usa.xml"/>
        <move file="${izpack}/bin/langpacks/flags/american-flag.gif" tofile="${izpack}/bin/langpacks/flags/usa.gif"/>
    </target>
    
    <target name="checkLaunch4j">
        <available file="${launch4j}/launch4j/launch4j.jar" property="launch4j.exists" />
    </target>
    <target name="getLaunch4j" depends="checkLaunch4j" unless="launch4j.exists" >
        <!-- only one of these should pass -->
        <ant target="getLaunch4jWin32"/>
        <ant target="getLaunch4jLinux"/>     
        <ant target="getLaunch4jMac"/>
    </target>
    
    <target name="getLaunch4jWin32" if="build.host.windows">
        <get src="http://easynews.dl.sourceforge.net/sourceforge/launch4j/launch4j-3.0.0-pre1-win32.zip" dest="${user.home}/launch4j.zip" />
        <unzip src="${user.home}/launch4j.zip" dest="${user.home}/launch4j"/>
    </target>
    
    <target name="getLaunch4jLinux" if="build.host.linux">
        <get src="http://easynews.dl.sourceforge.net/sourceforge/launch4j/launch4j-3.0.0-pre1-linux.tgz" dest="${user.home}/launch4j.tgz" />
        <untar src="${user.home}/launch4j.tgz" dest="${user.home}/launch4j" compression="gzip"/>
        <chmod file="${user.home}/launch4j/launch4j/bin/windres" perm="a+x"/>
        <chmod file="${user.home}/launch4j/launch4j/bin/ld" perm="a+x"/>
    </target>
    
    <target name="getLaunch4jMac" if="build.host.mac">
        <get src="http://easynews.dl.sourceforge.net/sourceforge/launch4j/launch4j-3.0.0-pre1-macosx.tgz" dest="${user.home}/launch4j.tgz" />
        <untar src="${user.home}/launch4j.tgz" dest="${user.home}/launch4j" compression="gzip"/>
    </target>
    
    <target name="checkOrangevolt">
        <available file="${user.home}/orangevolt.jar" property="orangevolt.exists" />
    </target>
    <target name="getOrangevolt" depends="checkOrangevolt" unless="orangevolt.exists" >
        <get src="http://easynews.dl.sourceforge.net/sourceforge/ovanttasks/orangevolt-ant-tasks-1.3.5.jar" dest="${user.home}/orangevolt.jar" />
    </target>
    
    <target name="checkRoxes" >
        <available file="${user.home}/roxes.jar" property="roxes.exists" />
    </target>
    <target name="getRoxes" depends="checkRoxes" unless="roxes.exists" >
        <get src="http://easynews.dl.sourceforge.net/sourceforge/ovanttasks/roxes-win32forjava-1.0.4.jar" dest="${user.home}/roxes.jar" />
    </target>
    
    <target name="checkViskit" >
        <available file="${dir.build.lib}/viskit-exe.jar" property="viskit.built" />
    </target>
    <target name="buildViskit" depends="checkViskit" unless="viskit.built" >
        <ant target="jar-executable"/>
        <ant target="fresh-diskit"/>
    </target>
    
    <!-- adapted from izpack wiki for building IzPack with native Launch4j'er on Win32 -->
    <target name="build.installers" depends="buildViskit,getJre,getIzPack,getLaunch4j,getOrangevolt,getRoxes">
        <delete dir="${installer}/build"/>
        <mkdir dir="${installer}/build" />
        <delete dir="${installer}/stage"/>
        <mkdir dir="${installer}/stage/lib"/>
        <delete dir="${installer}/stage/images"/>
        <mkdir dir="${installer}/stage/images"/>
        <delete dir="${installer}/stage/sources"/>
        <mkdir dir="${installer}/stage/sources"/>
        
        <copy todir="${installer}/stage/sources/Viskit">
            <fileset dir="${basedir}">
                <exclude name="${basedir}/viskit/xsd/bindings"/>
            </fileset>
        </copy>
        <copy todir="${installer}/stage/sources/DISKIT">
            <fileset dir="${basedir}/../DISKIT"/>
        </copy>
        <copy todir="${installer}/stage/sources/Simkit">
            <fileset dir="${basedir}/../Simkit/Simkit"/>
        </copy>        
        <copy todir="${installer}/stage/images">
            <fileset dir="${images}"/>
        </copy>
        <copy todir="${installer}/stage/lib" >
            <fileset refid="runtime.lib"/>
        </copy>
        <copy todir="${installer}/stage/lib" >
            <fileset refid="runtime.javac"/>
        </copy>
        <copy todir="${installer}/stage/lib/ext">
            <fileset refid="runtime.lib.ext"/>
        </copy>
        <copy todir="${installer}/stage/lib/jaxb-2.1">
            <fileset refid="jaxb.classes"/>
            <fileset refid="jaxb.api"/>
        </copy>
        <copy todir="${installer}/stage">
            <fileset refid="runtime.viskit.exe"/>
        </copy>
        <copy todir="${installer}/stage/BehaviorLibraries">
            <fileset dir="${behavior.lib}"/>
        </copy>
        <copy todir="${installer}/stage/examples">
            <fileset dir="${basedir}/examples"/>
        </copy>
        <copy todir="${installer}/stage/license">
            <fileset dir="${dir.src}/license"/>
        </copy>
        <copy todir="${installer}/stage/">
            <fileset dir="${dir.src}/viskit/javahelp/VisPages">
                <include name="intro.html"/>
            </fileset>
        </copy>
        <copy todir="${installer}/stage">
            <fileset dir="${dir.src}">
                <include name="*.xml"/>
            </fileset>
        </copy>
        <delete file="${installer}/stage/build.xml"/>
        <copy todir="${installer}/stage/viskit/javahelp">
            <fileset dir="${dir.src}/viskit/javahelp"/>
        </copy>
        <!-- do this again just in case IzPack was installed previously -->
        <copy todir="${izpack}/bin/langpacks/flags">
            <fileset dir="${installer}/images">
                <include name="american-flag.gif"/>
            </fileset>
        </copy>
        <copy file="${izpack}/bin/langpacks/installer/eng.xml" tofile="${izpack}/bin/langpacks/installer/usa.xml"/>
        <move file="${izpack}/bin/langpacks/flags/american-flag.gif" tofile="${izpack}/bin/langpacks/flags/usa.gif"/>
        
        <taskdef name="izpack"
                 classpath="${izpack}/lib/compiler.jar"
                 classname="com.izforge.izpack.ant.IzPackTask"/>
        
        <taskdef name="launch4j"
                 classname="net.sf.launch4j.ant.Launch4jTask"
                 classpath="${launch4j}/launch4j/launch4j.jar:${launch4j}/launch4j/lib/xstream.jar"/>
        
        <taskdef
            classpath="${user.home}/orangevolt.jar:${user.home}/roxes.jar"
            resource="com/orangevolt/tools/ant/taskdefs.properties"/>
        
        <launch4j configFile="${installer}/launch4jConfig.xml"/>
        
        <!-- create executable jar file that installs Viskit and related files, assumes java exists, 
            however once Viskit.exe actually runs it should check and download latest 1.5.0 -->
        <izpack input="${installer}/izpack.xml"
                output="${installer}/build/ViskitInstall.jar"
                installerType="standard"
                basedir="${installer}"
                izPackDir="${izpack}" />
        
        <!-- create native win32 wrapper in case java doesn't exist yet to bootstrap ViskitInstall.jar as .exe --> 
        <launch4j>
            <config 
                chdir="." 
                dontwrapjar="false" 
                jar="${installer}/build/ViskitInstall.jar" 
                outfile="${installer}/build/ViskitInstall.exe" 
                headertype="gui" 
                icon="${installer}/images/ViskitIcon.ico" >
                <jre minVersion="1.6.0"/>
            </config>
        </launch4j>
        
        <!-- since above should have already made something that checks and installs JRE, the following
            should not be needed... in which case ViskitInstall.exe is already the deployable, unless CD only -->
            
        <!-- build Install-Viskit-Win32-JRE.exe, contains JRE and its installer -->
        
        <echo file="${installer}/build/both.bat" append="false">
            rem use the next line for a silent install. 
            rem ${winJreExe} /S /v/qn 
            ${winJreExe}
            ViskitInstall.exe
        </echo>
        
        <chmod perm="+x" file="${installer}/build/both.bat" />
        <!-- this would only work on Unix 
        <symlink link="installer/build/${winJre}" resource="../${winJre}" />
        plus the file is 16M, do we need that in CVS?
        -->
        <copy file="${winJre}" todir="${installer}/build" />
        
        <zip destfile="${installer}/build/install.zip"
             basedir="${installer}/build/."
             includes="both.bat,ViskitInstall.exe,${winJreExe}" />
        
        <sfx
            archive="${installer}/build/install.zip"
            mode="win32"
            execute="both.bat"
            icon="${installer}/images/ViskitIcon.ico"
            output="${installer}/build/Install-Viskit-Win32-JRE.exe"/>
        
    </target> 
    
    <target name="clean.installers">
        <delete file="${installer}/build/install.zip"/>
        <!-- <delete file="${installer}/build/both.bat"/>-->
        <delete file="${user.home}/izpack-installer.jar"/>
        <delete file="${user.home}/launch4j.*"/>
        <delete file="${installer}/build/${winJre}"/>
    </target>
    
    <!--  === TARGET: clean === -->
    <target depends="init" description="Deletes build directory, javadoc and dist directories, and lib/ext/diskit.jar" name="clean">
        <delete dir="${dir.bindings}"/>
        <delete dir="${dir.build}"/>
        <delete dir="${dir.api.doc}"/>
        <delete dir="${dir.dist}"/>
        <delete file="${dir.lib.ext}/dis.jar"/>
        <delete file="${dir.lib.ext}/diskit.jar"/>
    </target>
    
    <target name="delete.temps.and.hx" depends="init">
        <!-- create the batch file to delete temp files -->
        <echo file="deleteTempsAndHx.bat" append="false">@echo on
@rem Built by ${ant.project.name} on ${TODAY} at ${TSTAMP} hrs
${delete.temp.and.hx}</echo>
        <exec executable="deleteTempsAndHx.bat" resolveexecutable="true"/>
    </target>
    
    <!-- Clean everything, including Viskit generated temp files -->
    <target name="clean.all" 
            depends="delete.temps.and.hx,clean"
            description="Invokes the delete.temps.and.hx target to clean Viskit 
            created temp files and the .viskit_history.xml when switching back 
            and forth from SavageStuido Viskit to basic Viskit.  This will also
            delete all Analyst Report generated materials">
                       
         <delete includeemptydirs="true" dir="${images}"/>
         <delete includeemptydirs="true" dir="${charts}"/>
         <delete includeemptydirs="true" dir="${statistics}"/>
         <delete>
             <fileset dir="${analyst.reports.dir}" includes="*.xml,*.html"/>
         </delete>
     </target>
    
</project>
