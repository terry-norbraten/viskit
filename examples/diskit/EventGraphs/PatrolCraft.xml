<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<SimEntity author="Patrick Sullivan" extend="diskit.FriendlyForce" name="PatrolCraft" package="diskit" version="1.0" xsi:noNamespaceSchemaLocation="http://diana.nps.edu/Simkit/simkit.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Comment>A Patrol Craft Entity based on Rick Goldberg's Fisherman Event Graph to provide a simple base from which to develop a Patrol agent with naval tactical behavior.</Comment>
    <Parameter name="startPosition" type="diskit.Vec3d">
        <Comment>Start Position - different than first waypoint</Comment>
    </Parameter>
    <Parameter name="cruisingSpeed" type="double">
        <Comment>Speed of this entity</Comment>
    </Parameter>
    <Parameter name="moverID" type="int">
        <Comment>DIS entity ID</Comment>
    </Parameter>
    <StateVariable name="tacticalMode" type="diskit.TacticalMode">
        <Comment>Tactical Mode of this entity</Comment>
    </StateVariable>
    <StateVariable name="assetState" type="diskit.AssetState">
        <Comment>Asset State of this entity</Comment>
    </StateVariable>
    <StateVariable name="perception" type="diskit.Sensor">
        <Comment>Perceptual Range of Entity for Detection and Avoidance</Comment>
    </StateVariable>
    <StateVariable name="obstacleQueue" type="diskit.ObstacleQueue">
        <Comment/>
    </StateVariable>
    <StateVariable name="avoidanceRange" type="double">
        <Comment>Contact proximity tolerance for this entity</Comment>
    </StateVariable>
    <StateVariable name="activeMoverManager" type="diskit.MoverManager">
        <Comment>Used for Non-patrolling movement</Comment>
    </StateVariable>
    <StateVariable name="patrolManager" type="diskit.ZoneMoverManager">
        <Comment/>
    </StateVariable>
    <StateVariable name="waypointCreator" type="diskit.WaypointCreator">
        <Comment>generates waypoints within geometry bounds based on probabilities</Comment>
    </StateVariable>
    <StateVariable name="interceptMoverManager" type="diskit.InterceptMoverManager">
        <Comment/>
    </StateVariable>
    <StateVariable name="targetQueue" type="java.util.LinkedList">
        <Comment/>
    </StateVariable>
    <StateVariable name="canIntercept" type="boolean">
        <Comment/>
    </StateVariable>
    <StateVariable name="reach" type="diskit.Sensor">
        <Comment/>
    </StateVariable>
    <StateVariable name="geomIndex" type="int">
        <Comment/>
    </StateVariable>
    <StateVariable name="timeToIntercept" type="double">
        <Comment>TODO: add as property change</Comment>
    </StateVariable>
    <StateVariable name="averageSpeed" type="double">
        <Comment>TODO: add as property stat</Comment>
    </StateVariable>
    <StateVariable name="successfulIntercepts" type="int">
        <Comment>TODO: add as property stat</Comment>
    </StateVariable>
    <StateVariable name="unsuccessfullIntercept" type="int">
        <Comment>TODO: add as property stat</Comment>
    </StateVariable>
    <StateVariable name="numOfIDs" type="int">
        <Comment>TODO: add as property stat</Comment>
    </StateVariable>
    <Event name="Run">
        <Comment/>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.TRANSITING"/>
        </StateTransition>
        <StateTransition state="avoidanceRange">
            <Assignment value="10"/>
        </StateTransition>
        <StateTransition state="patrolManager">
            <Assignment value="null"/>
        </StateTransition>
        <StateTransition state="interceptMoverManager">
            <Assignment value="null"/>
        </StateTransition>
        <StateTransition state="targetQueue">
            <Operation method="clear()"/>
        </StateTransition>
        <StateTransition state="obstacleQueue">
            <Assignment value="new diskit.ObstacleQueue(getLocation())"/>
        </StateTransition>
        <Code/>
        <Coordinate x="20" y="30"/>
    </Event>
    <Event name="Patrol">
        <Comment/>
        <LocalVariable name="movement" type="boolean" value="true; setCruisingSpeed(getMaxSpeed()/2); start()">
            <Comment/>
        </LocalVariable>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.TRANSITING"/>
        </StateTransition>
        <Code>System.out.println("Active MM = " + getActiveMoverManager());</Code>
        <Coordinate x="20" y="330"/>
    </Event>
    <Event name="EndPatrol">
        <Comment/>
        <Argument name="mover" type="diskit.Mover3D"/>
        <LocalVariable name="m" type="boolean" value="true; setStartPosition(getLocation())">
            <Comment/>
        </LocalVariable>
        <Schedule condition="tacticalMode == diskit.TacticalMode.ESCORTED" delay="0.0" event="Patrol" priority="0">
            <Comment/>
        </Schedule>
        <Code/>
        <Coordinate x="280" y="330"/>
    </Event>
    <Event name="Init">
        <Comment/>
        <Argument name="entity" type="simkit.SimEntity"/>
        <StateTransition state="reach">
            <Assignment value="new diskit.SphereCutterSensor(this,avoidanceRange)"/>
        </StateTransition>
        <Schedule condition="entity == this" delay="0.0" event="RegisterTarget" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="RegisterSensor" priority="0">
            <Comment/>
            <EdgeParameter value="reach"/>
        </Schedule>
        <Code/>
        <Coordinate x="90" y="30"/>
    </Event>
    <Event name="RegisterTarget">
        <Comment/>
        <Argument name="target" type="diskit.Mover3D"/>
        <Coordinate x="200" y="30"/>
    </Event>
    <Event name="RegisterSensor">
        <Comment>Registering of Sensor with the Scenario Manager</Comment>
        <Argument name="newPercept" type="diskit.Sensor"/>
        <LocalVariable name="sensor" type="diskit.Sensor" value="newPercept">
            <Comment/>
        </LocalVariable>
        <Code>sensor.addSimEventListener(this);</Code>
        <Coordinate x="200" y="110"/>
    </Event>
    <Event name="Detection">
        <Comment/>
        <Argument name="sensor" type="diskit.Sensor"/>
        <Argument name="newTarget" type="diskit.Mover3D"/>
        <StateTransition state="obstacleQueue">
            <Operation method="add(newTarget)"/>
        </StateTransition>
        <Cancel event="EndPatrol"/>
        <Schedule condition="!obstacleQueue.contains(newTarget)" delay="0.0" event="AssessObstacle" priority="0">
            <Comment/>
            <EdgeParameter value="newTarget"/>
        </Schedule>
        <Schedule condition="7 &lt; 3" delay="0.0" event="SecurityAlert" priority="0">
            <Comment>if target is not an obstacle or friend</Comment>
        </Schedule>
        <Cancel event="StandOff"/>
        <Code>System.out.println(moverID + " detected " + newTarget.getMoverID());</Code>
        <Coordinate x="440" y="440"/>
    </Event>
    <Event name="AssessObstacle">
        <Comment/>
        <Argument name="newTarget" type="diskit.Mover3D"/>
        <LocalVariable name="closest" type="diskit.Mover3D" value="obstacleQueue.closest()">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="tgetVel" type="diskit.Vec3d" value="new diskit.Vec3d(newTarget.getVelocity())">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="times" type="double[]" value="diskit.Intersector3D.solve(perception.getLocation(),perception.getVelocity(), avoidanceRange, newTarget.getLocation(), newTarget.getVelocity());">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="collidePoint" type="diskit.Vec3d" value="diskit.util.Math3D.findInterceptPoint(newTarget,(diskit.Mover3D)this,getCruisingSpeed())">
            <Comment/>
        </LocalVariable>
        <StateTransition state="obstacleQueue">
            <Operation method="add(newTarget)"/>
        </StateTransition>
        <Schedule condition="( times[0] &gt; 0.0 ) &amp;&amp; (  times[0] &lt; Double.POSITIVE_INFINITY )" delay="0.0" event="AvoidObstacle" priority="0">
            <Comment/>
            <EdgeParameter value="newTarget"/>
        </Schedule>
        <Code>if (tgetVel.length() &lt; .1) {  tgetVel.set(getVelocity());  tgetVel.negate();tgetVel.scale(.1);  }</Code>
        <Coordinate x="280" y="440"/>
    </Event>
    <Event name="SecurityAlert">
        <Comment/>
        <Schedule event="StartIntercept"/>
        <Code/>
        <Coordinate x="440" y="330"/>
    </Event>
    <Event name="StartIntercept">
        <Comment/>
        <Schedule event="EndIntercept"/>
        <Schedule event="StandOff"/>
        <Code/>
        <Coordinate x="440" y="230"/>
    </Event>
    <Event name="EndIntercept">
        <Comment/>
        <Schedule event="Patrol"/>
        <Code/>
        <Coordinate x="280" y="230"/>
    </Event>
    <Event name="StandOff">
        <Comment/>
        <Code>System.out.println("Ship, this is Patrol Craft, I am unable to ID your contact from my present position - Over");</Code>
        <Coordinate x="690" y="330"/>
    </Event>
    <Event name="AvoidObstacle">
        <Comment>DELETED FROM CODE BLOCK  /**/</Comment>
        <Argument name="obstacle" type="diskit.Mover3D"/>
        <LocalVariable name="loc" type="diskit.Vec3d" value="new diskit.Vec3d(getLocation())">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="up" type="diskit.Vec3d" value="new diskit.Vec3d(0.0,0.0,-1.0)">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="steer" type="diskit.Vec3d" value="new diskit.Vec3d()">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="veer" type="diskit.Vec3d" value="new diskit.Vec3d()">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="amm" type="diskit.AvoidanceMoverManager" value="new diskit.AvoidanceMoverManager(this)">
            <Comment/>
        </LocalVariable>
        <Schedule event="Patrol"/>
        <Code>steer.cross(getVelocity(),obstacle.getVelocity()); /**      * Should be moved to Avoidance Mover Manager at some point     */  if ( steer.length() &lt; getCruisingSpeed() ) {          steer.cross(velocity,up);          veer.set(getLocation());   } else {       steer.cross(up);      veer.set(obstacle.getLocation());  veer.set(0,(veer.get(0)/2.0) + (loc.get(0)/2.0));  veer.set(1, (veer.get(1)/2.0)+(loc.get(1)/2.0));      veer.set( 2, (veer.get(2)/2.0)+(loc.get(2)/2.0) );   }      veer.add(steer); amm.avoidToOffset(veer, getActiveMoverManager());System.out.println(getMoverID() + " Avoiding entity# " + obstacle.getMoverID());</Code>
        <Coordinate x="100" y="440"/>
    </Event>
    <Event name="CreateZones">
        <Comment>Listens to the Harbor Creator to get Zone Assignment geometry</Comment>
        <Argument name="patrolAssignment" type="ZoneGeometry[]">
            <Comment>Passed by the Harbor Creator - states patrol responsibilities and contains entity ID for assignment</Comment>
        </Argument>
        <LocalVariable name="count" type="int" value="0">
            <Comment>tracks number of patrol zone assignments</Comment>
        </LocalVariable>
        <LocalVariable name="idx" type="int" value="0">
            <Comment>Used for patrol zone array construction</Comment>
        </LocalVariable>
        <LocalVariable name="duties" type="ZoneGeometry[]" value="null">
            <Comment/>
        </LocalVariable>
        <StateTransition state="waypointCreator">
            <Assignment value="new WaypointCreator(duties)"/>
        </StateTransition>
        <StateTransition state="patrolManager">
            <Assignment value="new diskit.ZoneMoverManager(this, waypointCreator)"/>
        </StateTransition>
        <StateTransition state="activeMoverManager">
            <Assignment value="patrolManager"/>
        </StateTransition>
        <Schedule event="Patrol"/>
        <Code>for(int i = 0; i&lt;patrolAssignment.length; i++){     if(patrolAssignment[i].getID() == moverID){                       count++;        }  }  duties = new ZoneGeometry[count];  for(int i = 0; i &lt; patrolAssignment.length; i++){   if(patrolAssignment[i].getID() == moverID){      duties[idx] = patrolAssignment[i];      idx++;      }  } setStartPosition(duties[0].getCenter3D());</Code>
        <Coordinate x="20" y="190"/>
    </Event>
    <Event name="IDContact">
        <Comment/>
        <Argument name="target" type="diskit.Mover3D"/>
        <Argument name="sensor" type="diskit.Sensor"/>
        <LocalVariable name="amm" type="diskit.MoverManager" value="getActiveMoverManager()">
            <Comment/>
        </LocalVariable>
        <StateTransition state="targetQueue">
            <Operation method="add(target)"/>
        </StateTransition>
        <StateTransition state="canIntercept">
            <Assignment value="interceptMoverManager.interceptToOffset(target,2.0*avoidanceRange)"/>
        </StateTransition>
        <Schedule condition="!canIntercept" delay="0.0" event="StandOff" priority="0">
            <Comment/>
        </Schedule>
        <Schedule condition="this.getLocation() == interceptMoverManager.getInterceptPoint() " delay="0.0" event="ClearExclusionZone" priority="0">
            <Comment/>
            <EdgeParameter value="target"/>
        </Schedule>
        <Code>this.setStartPosition(getLocation()); this.setCruisingSpeed(getMaxSpeed());interceptMoverManager = new diskit.InterceptMoverManager(this);System.out.println("Roger, this is patrol craft " + this.getMoverID() +  " enroute to contact #"+target.getMoverID() + " - Out");</Code>
        <Coordinate x="440" y="150"/>
    </Event>
    <Event name="ClearExclusionZone">
        <Comment/>
        <Argument name="target" type="diskit.Mover3D"/>
        <StateTransition state="interceptMoverManager">
            <Operation method="setMover(null)"/>
        </StateTransition>
        <StateTransition state="activeMoverManager">
            <Assignment value="patrolManager"/>
        </StateTransition>
        <StateTransition state="activeMoverManager">
            <Operation method="setMover(this)"/>
        </StateTransition>
        <Schedule event="Patrol"/>
        <Code>setStartPosition(getLocation());System.out.println("Un-Identified surface craft, this is a US Navy Patrol boat. You have entered restricted waters, please alter your course - Over");</Code>
        <Coordinate x="280" y="150"/>
    </Event>
</SimEntity>

