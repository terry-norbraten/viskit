<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<SimEntity author="Rick Goldberg" extend="diskit.FriendlyForce" name="Defender" package="diskit.xml" version="1.0" xsi:noNamespaceSchemaLocation="http://diana.nps.edu/Simkit/simkit.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Comment>This event graph is for documentation purposes, to outline the logic of the diskit package. It does not attempt to be functional.</Comment>
    <Parameter name="startPosition" type="diskit.Vec3d">
        <Comment>Must be anything but the first waypoint.</Comment>
    </Parameter>
    <Parameter name="maxSpeed" type="double">
        <Comment/>
    </Parameter>
    <Parameter name="moverID" type="int">
        <Comment/>
    </Parameter>
    <Parameter name="patrolMoverManager" type="diskit.PatrolMoverManager">
        <Comment/>
    </Parameter>
    <Parameter name="interceptMoverManager" type="diskit.InterceptMoverManager">
        <Comment/>
    </Parameter>
    <Parameter name="avoidanceRange" type="double">
        <Comment/>
    </Parameter>
    <StateVariable name="assetState" type="diskit.AssetState">
        <Comment/>
    </StateVariable>
    <StateVariable name="targetQueue" type="java.util.LinkedList">
        <Comment/>
    </StateVariable>
    <StateVariable name="activeMoverManager" type="diskit.MoverManager">
        <Comment/>
    </StateVariable>
    <StateVariable name="reach" type="diskit.Sensor">
        <Comment/>
    </StateVariable>
    <StateVariable name="weapon" type="diskit.Weapon">
        <Comment/>
    </StateVariable>
    <StateVariable name="obstacleQueue" type="diskit.ObstacleQueue">
        <Comment/>
    </StateVariable>
    <StateVariable name="missedIntercepts" type="int">
        <Comment/>
    </StateVariable>
    <StateVariable name="kills" type="int">
        <Comment/>
    </StateVariable>
    <StateVariable name="escorts" type="int">
        <Comment/>
    </StateVariable>
    <Event name="Run">
        <Comment/>
        <StateTransition state="assetState">
            <Assignment value="diskit.AssetState.STANDBY"/>
        </StateTransition>
        <StateTransition state="targetQueue">
            <Operation method="clear()"/>
        </StateTransition>
        <StateTransition state="activeMoverManager">
            <Assignment value="getPatrolMoverManager(); activeMoverManager.setMover(this); interceptMoverManager.setMover(null)"/>
        </StateTransition>
        <StateTransition state="reach">
            <Assignment value="new diskit.SphereCutterSensor(this,avoidanceRange)"/>
        </StateTransition>
        <StateTransition state="missedIntercepts">
            <Assignment value="0"/>
        </StateTransition>
        <StateTransition state="kills">
            <Assignment value="0"/>
        </StateTransition>
        <StateTransition state="escorts">
            <Assignment value="0"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="Init" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Schedule condition="patrolMoverManager.isStartOnReset()" delay="0.0" event="Patrol" priority="0">
            <Comment/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="AdjustRange" priority="0">
            <Comment/>
            <EdgeParameter value="reach"/>
        </Schedule>
        <Coordinate x="30" y="30"/>
    </Event>
    <Event name="Init">
        <Comment>listened to by ScenarioManager and others</Comment>
        <Argument name="mover" type="diskit.Mover3D"/>
        <Coordinate x="210" y="30"/>
    </Event>
    <Event name="Patrol">
        <Comment/>
        <StateTransition state="assetState">
            <Assignment value="diskit.AssetState.PATROLLING"/>
        </StateTransition>
        <Schedule event="Start"/>
        <Coordinate x="320" y="120"/>
    </Event>
    <Event name="AdjustRange">
        <Comment>scales the sensor</Comment>
        <Argument name="newReach" type="diskit.Sensor"/>
        <LocalVariable name="oldReach" type="diskit.Sensor" value="getReach()">
            <Comment/>
        </LocalVariable>
        <StateTransition state="reach">
            <Assignment value="newReach"/>
        </StateTransition>
        <Schedule condition="oldReach != null " delay="0.0" event="UnregisterSensor" priority="0">
            <Comment/>
            <EdgeParameter value="oldReach"/>
        </Schedule>
        <Schedule condition="newReach != null" delay="0.0" event="RegisterSensor" priority="0">
            <Comment/>
            <EdgeParameter value="newReach"/>
        </Schedule>
        <Coordinate x="30" y="160"/>
    </Event>
    <Event name="UnregisterSensor">
        <Comment>gets heard by ScenarioManager</Comment>
        <Argument name="sensor" type="diskit.Sensor"/>
        <LocalVariable name="oldRange" type="diskit.Sensor" value="sensor; oldRange.removeSimEventListener(this)">
            <Comment/>
        </LocalVariable>
        <Coordinate x="30" y="330"/>
    </Event>
    <Event name="RegisterSensor">
        <Comment>gets heard by ScenarioManager</Comment>
        <Argument name="newReach" type="diskit.Sensor"/>
        <LocalVariable name="sensor" type="diskit.Sensor" value="newReach; sensor.addSimEventListener(this)">
            <Comment/>
        </LocalVariable>
        <Coordinate x="140" y="160"/>
    </Event>
    <Event name="WeaponReady">
        <Comment>heard from weapon</Comment>
        <Argument name="activeWeapon" type="diskit.Weapon"/>
        <LocalVariable name="oldReach" type="diskit.Sensor" value="reach">
            <Comment/>
        </LocalVariable>
        <StateTransition state="weapon">
            <Assignment value="activeWeapon"/>
        </StateTransition>
        <StateTransition state="reach">
            <Assignment value="new diskit.SphereCutterSensor(this,weapon.getRange())"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="AdjustRange" priority="0">
            <Comment/>
            <EdgeParameter value="reach"/>
        </Schedule>
        <Coordinate x="140" y="330"/>
    </Event>
    <Event name="Detection">
        <Comment>entry event from a sensor detection</Comment>
        <Argument name="sensor" type="diskit.Sensor">
            <Comment>sensor that detected</Comment>
        </Argument>
        <Argument name="newTarget" type="diskit.Mover3D"/>
        <Schedule condition="!obstacleQueue.contains(newTarget)" delay="0.0" event="NewObstacle" priority="0">
            <Comment/>
            <EdgeParameter value="newTarget"/>
        </Schedule>
        <Schedule condition="!friendlyForces.contains(new Integer(newTarget.getMoverID()))" delay="0.0" event="NewTarget" priority="0">
            <Comment/>
            <EdgeParameter value="newTarget"/>
            <EdgeParameter value="sensor"/>
        </Schedule>
        <Coordinate x="250" y="330"/>
    </Event>
    <Event name="NewObstacle">
        <Comment/>
        <Argument name="newTarget" type="diskit.Mover3D"/>
        <StateTransition state="obstacleQueue">
            <Operation method="add(newTarget)"/>
        </StateTransition>
        <Schedule event="HandleObstacles"/>
        <Coordinate x="250" y="430"/>
    </Event>
    <Event name="HandleObstacles">
        <Comment>reprioritizes based on proximity in the queue</Comment>
        <LocalVariable name="closest" type="diskit.Mover3D" value="obstacleQueue.closest()">
            <Comment/>
        </LocalVariable>
        <Schedule condition="closest != null" delay="0.0" event="CheckIntercept" priority="0">
            <Comment/>
            <EdgeParameter value="closest"/>
        </Schedule>
        <Coordinate x="250" y="500"/>
    </Event>
    <Event name="CheckIntercept">
        <Comment>check if even possilbe to cross</Comment>
        <Argument name="newTarget" type="diskit.Mover3D"/>
        <LocalVariable name="tgetVel" type="diskit.Vec3d" value="new diskit.Vec3d(newTarget.getVelocity()); if (tgetVel.length() &lt; .1) { tgetVel.set(getVelocity()); tgetVel.negate();tgetVel.scale(.1); }">
            <Comment>small velocity should be faked to be about 1/10th negative defender velocity(?)</Comment>
        </LocalVariable>
        <LocalVariable name="times" type="double[]" value="diskit.Intersector3D.solve(reach.getLocation(), reach.getVelocity(), avoidanceRange, newTarget.getLocation(), newTarget.getVelocity());">
            <Comment/>
        </LocalVariable>
        <Schedule condition="( times[0] &gt; 0.0 ) &amp;&amp; (  times[0] &lt; Double.POSITIVE_INFINITY )" delay="0.0" event="StartAvoidance" priority="0">
            <Comment/>
            <EdgeParameter value="newTarget"/>
        </Schedule>
        <Coordinate x="250" y="570"/>
    </Event>
    <Event name="StartAvoidance">
        <Comment>must be in the way, avoid</Comment>
        <Argument name="target" type="diskit.Mover3D"/>
        <LocalVariable name="collidePoint" type="diskit.Vec3d" value="diskit.util.Math3D.findInterceptPoint(target,(diskit.Mover3D)this,getCruisingSpeed())">
            <Comment/>
        </LocalVariable>
        <Schedule condition="collidePoint != null" delay="0.0" event="Steer" priority="0">
            <Comment/>
            <EdgeParameter value="target"/>
        </Schedule>
        <Coordinate x="250" y="640"/>
    </Event>
    <Event name="Steer">
        <Comment>predict how much to steer, set up AvoidanceMoverManger</Comment>
        <Argument name="obstacle" type="diskit.Mover3D"/>
        <LocalVariable name="loc" type="diskit.Vec3d" value="new diskit.Vec3d(getLocation())">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="up" type="diskit.Vec3d" value="new diskit.Vec3d(0.0,0.0,-1.0)">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="steer" type="diskit.Vec3d" value="new diskit.Vec3d(); steer.cross(getVelocity(),obstacle.getVelocity());">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="veer" type="diskit.Vec3d" value="new diskit.Vec3d(); if ( steer.length() &lt; getCruisingSpeed() ) { steer.cross(velocity,up); veer.set(getLocation()); } else { steer.cross(up); veer.set(obstacle.getLocation()); veer.set(0,(veer.get(0)/2.0) + (loc.get(0)/2.0)); veer.set(1, (veer.get(1)/2.0)+(loc.get(1)/2.0));veer.set( 2, (veer.get(2)/2.0)+(loc.get(2)/2.0) ); } veer.add(steer)">
            <Comment>this should be moved to the AvoidanceMoverManager at some point</Comment>
        </LocalVariable>
        <LocalVariable name="amm" type="diskit.AvoidanceMoverManager" value="new diskit.AvoidanceMoverManager(this) ; amm.avoidToOffset(veer, getActiveMoverManager())">
            <Comment/>
        </LocalVariable>
        <Coordinate x="250" y="710"/>
    </Event>
    <Event name="NewTarget">
        <Comment/>
        <Argument name="newTarget" type="diskit.Mover3D"/>
        <Argument name="sensor" type="diskit.Sensor"/>
        <StateTransition state="targetQueue">
            <Operation method="add(newTarget)"/>
        </StateTransition>
        <Schedule condition="(assetState != diskit.AssetState.INTERCEPTING) &amp;&amp; (sensor.getMover().getMoverID() != getMoverID())" delay="0.0" event="StartIntercept" priority="0">
            <Comment/>
            <EdgeParameter value="newTarget"/>
        </Schedule>
        <Coordinate x="250" y="160"/>
    </Event>
    <Event name="StartIntercept">
        <Comment/>
        <Argument name="target" type="diskit.Mover3D"/>
        <LocalVariable name="mover" type="diskit.Mover3D" value="this; this.setStartPosition(getLocation()); this.setCruisingSpeed(getMaxSpeed());">
            <Comment>we don't have "this" on the menu yet...</Comment>
        </LocalVariable>
        <LocalVariable name="moverManager" type="diskit.MoverManager" value="getActiveMoverManager(); moverManager.setMover(null);">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="canIntercept" type="boolean" value="interceptMoverManager.interceptToOffset(target,2.0*avoidanceRange)">
            <Comment/>
        </LocalVariable>
        <StateTransition state="assetState">
            <Assignment value="diskit.AssetState.INTERCEPTING"/>
        </StateTransition>
        <StateTransition state="activeMoverManager">
            <Assignment value="interceptMoverManager"/>
        </StateTransition>
        <StateTransition state="activeMoverManager">
            <Operation method="setMover(this)"/>
        </StateTransition>
        <Schedule condition="canIntercept" delay="0.0" event="SafetyOff" priority="0">
            <Comment/>
        </Schedule>
        <Schedule condition="!canIntercept" delay="0.0" event="CantIntercept" priority="0">
            <Comment/>
            <EdgeParameter value="target"/>
        </Schedule>
        <Schedule event="Start"/>
        <Coordinate x="430" y="330"/>
    </Event>
    <Event name="UnDetection">
        <Comment>entry event from sensor for when mover leaves sensor bounds</Comment>
        <Argument name="sensor" type="diskit.Sensor">
            <Comment>sensor causing event, could be reach or exclusion zone for example</Comment>
        </Argument>
        <Argument name="target" type="diskit.Mover3D"/>
        <Schedule condition="( sensor.getMover() != this ) &amp;&amp; ( targetQueue.contains(target) ) &amp;&amp; (sensor != reach)" delay="0.0" event="RemoveTarget" priority="0">
            <Comment/>
            <EdgeParameter value="target"/>
        </Schedule>
        <Schedule condition="sensor == reach" delay="0.0" event="RemoveObstacle" priority="0">
            <Comment/>
            <EdgeParameter value="target"/>
        </Schedule>
        <Coordinate x="520" y="750"/>
    </Event>
    <Event name="RemoveTarget">
        <Comment/>
        <Argument name="target" type="diskit.Mover3D"/>
        <StateTransition state="targetQueue">
            <Operation method="remove(target)"/>
        </StateTransition>
        <Schedule condition="targetQueue.size() &gt; 0" delay="0.0" event="CheckIfMore" priority="0">
            <Comment/>
        </Schedule>
        <Schedule condition="( targetQueue.size() &lt;= 0 ) &amp;&amp; ( assetState != diskit.AssetState.ESCORTING )" delay="0.0" event="StopIntercept" priority="0">
            <Comment>should not get to &lt; 0</Comment>
        </Schedule>
        <Coordinate x="390" y="750"/>
    </Event>
    <Event name="CheckIfMore">
        <Comment/>
        <LocalVariable name="nextTarget" type="diskit.Mover3D" value="targetQueue.removeFirst()">
            <Comment/>
        </LocalVariable>
        <StateTransition state="targetQueue">
            <Assignment value="targetQueue"/>
        </StateTransition>
        <Cancel event="EndEscort"/>
        <Schedule condition="nextTarget != null" delay="0.0" event="StartIntercept" priority="0">
            <Comment/>
            <EdgeParameter value="nextTarget"/>
        </Schedule>
        <Coordinate x="570" y="330"/>
    </Event>
    <Event name="RemoveObstacle">
        <Comment/>
        <Argument name="target" type="diskit.Mover3D"/>
        <StateTransition state="obstacleQueue">
            <Operation method="remove(target)"/>
        </StateTransition>
        <Coordinate x="640" y="750"/>
    </Event>
    <Event name="SafetyOff">
        <Comment/>
        <Coordinate x="430" y="250"/>
    </Event>
    <Event name="CantIntercept">
        <Comment/>
        <Argument name="target" type="diskit.Mover3D"/>
        <LocalVariable name="moverManager" type="diskit.MoverManager" value="getActiveMoverManager(); moverManager.setMover(null)">
            <Comment/>
        </LocalVariable>
        <StateTransition state="activeMoverManager">
            <Assignment value="patrolMoverManager"/>
        </StateTransition>
        <StateTransition state="missedIntercepts">
            <Assignment value="missedIntercepts+1"/>
        </StateTransition>
        <StateTransition state="activeMoverManager">
            <Operation method="setMover(this)"/>
        </StateTransition>
        <Schedule condition="true" delay="0.1" event="SafetyOn" priority="0">
            <Comment/>
        </Schedule>
        <Schedule condition="targetQueue.size() &gt; 0" delay="0.0" event="CheckIfMore" priority="0">
            <Comment/>
        </Schedule>
        <Schedule event="Start"/>
        <Coordinate x="390" y="460"/>
    </Event>
    <Event name="SafetyOn">
        <Comment/>
        <Coordinate x="390" y="550"/>
    </Event>
    <Event name="EndIntercept">
        <Comment>entry event from InterceptMoverManager</Comment>
        <Schedule condition="targetQueue.size() &gt; 0" delay="0.0" event="NextEscort" priority="0">
            <Comment/>
        </Schedule>
        <Coordinate x="720" y="420"/>
    </Event>
    <Event name="NextEscort">
        <Comment/>
        <LocalVariable name="target" type="diskit.Mover3D" value="(diskit.Mover3D)(targetQueue.removeFirst())">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="offset" type="double" value="diskit.Vec3d.distance(target.getLocation(),getLocation())">
            <Comment/>
        </LocalVariable>
        <Schedule condition="true" delay="0.0" event="Escort" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
            <EdgeParameter value="target"/>
            <EdgeParameter value="getOriginalStartPosition()"/>
        </Schedule>
        <Schedule condition="offset &lt; reach.getMaxRange()/2.0" delay="offset/getMaxSpeed()" event="CloseInterdict" priority="0">
            <Comment/>
            <EdgeParameter value="target"/>
        </Schedule>
        <Schedule condition="offset &gt;= reach.getMaxRange()/2.0" delay="(reach.getMaxRange()/2.0)/getMaxSpeed()" event="FarInterdict" priority="0">
            <Comment/>
            <EdgeParameter value="target"/>
        </Schedule>
        <Coordinate x="640" y="420"/>
    </Event>
    <Event name="Escort">
        <Comment>message sent to ScenarioManager, if not replied in time, Interdict</Comment>
        <Argument name="mover" type="diskit.Mover3D">
            <Comment>this</Comment>
        </Argument>
        <Argument name="target" type="diskit.Mover3D"/>
        <Argument name="safePoint" type="diskit.Vec3d"/>
        <Coordinate x="640" y="560"/>
    </Event>
    <Event name="CloseInterdict">
        <Comment>not much warning</Comment>
        <Argument name="target" type="diskit.Mover3D"/>
        <Schedule condition="true" delay="0.0" event="Interdict" priority="0">
            <Comment/>
            <EdgeParameter value="target"/>
        </Schedule>
        <Coordinate x="720" y="30"/>
    </Event>
    <Event name="FarInterdict">
        <Comment>keep some distance but be within surefire range</Comment>
        <Argument name="target" type="diskit.Mover3D"/>
        <Schedule condition="true" delay="0.0" event="Interdict" priority="0">
            <Comment/>
            <EdgeParameter value="target"/>
        </Schedule>
        <Coordinate x="640" y="130"/>
    </Event>
    <Event name="EndEscort">
        <Comment/>
        <LocalVariable name="mover" type="diskit.DISMover3D" value="(diskit.DISMover3D)this; mover.setCruisingSpeed(getMaxSpeed())">
            <Comment/>
        </LocalVariable>
        <StateTransition state="assetState">
            <Assignment value="diskit.AssetState.PATROLLING"/>
        </StateTransition>
        <Coordinate x="600" y="190"/>
    </Event>
    <Event name="StopIntercept">
        <Comment/>
        <LocalVariable name="moverManager" type="diskit.InterceptMoverManager" value="interceptMoverManager; moverManager.setMover(null)">
            <Comment>should only be InterceptMoverManager at this point</Comment>
        </LocalVariable>
        <LocalVariable name="oldState" type="diskit.AssetState" value="assetState">
            <Comment/>
        </LocalVariable>
        <StateTransition state="assetState">
            <Assignment value="diskit.AssetState.PATROLLING"/>
        </StateTransition>
        <Schedule condition="oldState == diskit.AssetState.INTERDICTING" delay="0.0" event="ResumePatrol" priority="0">
            <Comment/>
        </Schedule>
        <Coordinate x="320" y="620"/>
    </Event>
    <Event name="ResumePatrol">
        <Comment/>
        <StateTransition state="activeMoverManager">
            <Assignment value="patrolMoverManager"/>
        </StateTransition>
        <StateTransition state="activeMoverManager">
            <Operation method="setMover(this)"/>
        </StateTransition>
        <Schedule event="Start"/>
        <Coordinate x="320" y="510"/>
    </Event>
    <Event name="StartMove">
        <Comment/>
        <Argument name="mover" type="diskit.Mover3D"/>
        <LocalVariable name="codeInsertion" type="int" value="0; super.doStartMove(mover)">
            <Comment>need to have a super, fix when code insertion implemented</Comment>
        </LocalVariable>
        <StateTransition state="obstacleQueue">
            <Operation method="setRelativePoint(getLocation())"/>
        </StateTransition>
        <Coordinate x="320" y="30"/>
    </Event>
    <Event name="EndMove">
        <Comment/>
        <Argument name="mover" type="diskit.Mover3D"/>
        <LocalVariable name="codeInsertion" type="int" value="0; super.doEndMove(mover)">
            <Comment>need to have a super, fix when code insertions are implemented</Comment>
        </LocalVariable>
        <StateTransition state="obstacleQueue">
            <Operation method="clear()"/>
        </StateTransition>
        <Coordinate x="400" y="30"/>
    </Event>
    <Event name="Killed">
        <Comment>to fix, ScenarioManager calls a kill() after this due to unregitration, which stop()s the mover</Comment>
        <Argument name="mover" type="diskit.Mover3D">
            <Comment>entry event from ScenarioManager</Comment>
        </Argument>
        <Schedule condition="mover != this" delay="0.0" event="RemoveTarget" priority="0">
            <Comment/>
            <EdgeParameter value="mover"/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="UnregisterSensor" priority="0">
            <Comment/>
            <EdgeParameter value="reach"/>
        </Schedule>
        <Schedule condition="mover == this" delay="0.0" event="UnregisterTarget" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Coordinate x="30" y="750"/>
    </Event>
    <Event name="UnregisterTarget">
        <Comment>sent to ScenarioManager</Comment>
        <Argument name="mover" type="diskit.Mover3D"/>
        <LocalVariable name="thisMover" type="diskit.Mover3D" value="mover; mover.stop()">
            <Comment/>
        </LocalVariable>
        <Coordinate x="140" y="430"/>
    </Event>
    <Event name="Interdict">
        <Comment>if EscortClear doesn't happen, attack</Comment>
        <Argument name="target" type="diskit.Mover3D"/>
        <LocalVariable name="interdicted" type="diskit.Mover3D" value="target; target.removeSimEventListener(this); removeSimEventListener(target)">
            <Comment>this may or may not be needed</Comment>
        </LocalVariable>
        <StateTransition state="assetState">
            <Assignment value="diskit.AssetState.INTERDICTING"/>
        </StateTransition>
        <StateTransition state="weapon">
            <Operation method="fireAt(target)"/>
        </StateTransition>
        <StateTransition state="kills">
            <Assignment value="kills + 1"/>
        </StateTransition>
        <Schedule event="EndInterdict"/>
        <Code/>
        <Coordinate x="530" y="30"/>
    </Event>
    <Event name="EndInterdict">
        <Comment/>
        <Schedule condition="targetQueue.size() &gt; 0" delay="0.0" event="CheckIfMore" priority="0">
            <Comment/>
        </Schedule>
        <Coordinate x="530" y="160"/>
    </Event>
    <Event name="EscortClear">
        <Comment>event comes back from ScenarioManager, or not</Comment>
        <Argument name="mover" type="diskit.Mover3D"/>
        <Argument name="safePoint" type="diskit.Vec3d"/>
        <LocalVariable name="cruiseSpeed" type="double" value="mover.getCruisingSpeed(); setCruisingSpeed(cruiseSpeed)">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="moverManager" type="diskit.MoverManager" value="getActiveMoverManager(); moverManager.setMover(null); setDestination(safePoint, getCruisingSpeed())">
            <Comment/>
        </LocalVariable>
        <StateTransition state="escorts">
            <Assignment value="escorts + 1"/>
        </StateTransition>
        <StateTransition state="assetState">
            <Assignment value="diskit.AssetState.ESCORTING"/>
        </StateTransition>
        <StateTransition state="activeMoverManager">
            <Assignment value="patrolMoverManager"/>
        </StateTransition>
        <StateTransition state="activeMoverManager">
            <Operation method="setMover(this)"/>
        </StateTransition>
        <Cancel event="Interdict"/>
        <Schedule condition="targetQueue.size() &gt; 0" delay="0.0" event="CheckIfMore" priority="0">
            <Comment/>
        </Schedule>
        <Schedule event="Start"/>
        <Coordinate x="430" y="160"/>
    </Event>
    <Event name="MagazineEmpty">
        <Comment>heard by weapon</Comment>
        <Schedule event="ReturnToBase"/>
        <Coordinate x="520" y="640"/>
    </Event>
    <Event name="ReturnToBase">
        <Comment/>
        <LocalVariable name="mover" type="diskit.Mover3D" value="this; setDestination(startPosition ,getMaxSpeed())">
            <Comment/>
        </LocalVariable>
        <StateTransition state="assetState">
            <Assignment value="diskit.AssetState.STANDBY"/>
        </StateTransition>
        <Schedule condition="true" delay="diskit.Vec3d.distance(startPosition,getLocation())/getMaxSpeed()" event="Reload" priority="0">
            <Comment/>
        </Schedule>
        <Coordinate x="640" y="640"/>
    </Event>
    <Event name="Reload">
        <Comment/>
        <Coordinate x="720" y="640"/>
    </Event>
    <Event name="Start">
        <Comment/>
        <Coordinate x="320" y="330"/>
    </Event>
</SimEntity>

