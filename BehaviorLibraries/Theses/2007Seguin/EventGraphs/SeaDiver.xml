<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<SimEntity author="John Seguin" extend="SimEntityBase" name="SeaDiver" package="seadiver" version="$Id$" xsi:noNamespaceSchemaLocation="http://diana.gl.nps.navy.mil/Simkit/simkit.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Comment>Mover IDs greater than 500 reserved for contacts to be detected.</Comment>
    <Parameter name="maximumSpeed" type="double">
        <Comment>The maximum speed for this entity.</Comment>
    </Parameter>
    <Parameter name="firstMoverID" type="int">
        <Comment>The unique DIS entity ID number for first entity.</Comment>
    </Parameter>
    <Parameter name="numberDivers" type="int">
        <Comment>Total number of divers to be created.</Comment>
    </Parameter>
    <Parameter name="sensorRange" type="double">
        <Comment>Range of sensor (sonar,MAD,etc).</Comment>
    </Parameter>
    <Parameter name="fixDelayTime" type="diskit.random.RandomVariateInstantiator">
        <Comment>Random variate for duration in minutes to conduct a gps fix.</Comment>
    </Parameter>
    <Parameter name="inputFileTemplate" type="String">
        <Comment>Name and Path of file to parse for use as a template for generation of AUVW missions.</Comment>
    </Parameter>
    <Parameter name="outputFileName" type="String">
        <Comment>Name and path (without extention) that will be used to create and write seadiver AUVW mission files.</Comment>
    </Parameter>
    <Parameter name="operatingDepth" type="double">
        <Comment>Nominal operating depth of the seadiver during mission runs.</Comment>
    </Parameter>
    <StateVariable name="sensorObject" type="diskit.Sensor">
        <Comment>Cookie cutter spherical sensor that detects all objects that get within sensorRange.</Comment>
    </StateVariable>
    <StateVariable name="submerged" type="boolean">
        <Comment>Flag to determine if submerged or at surface.</Comment>
    </StateVariable>
    <StateVariable name="gpsFixNeeded" type="boolean">
        <Comment>Flag to store need for GPS fix (after each mine location).</Comment>
    </StateVariable>
    <StateVariable name="detectionData" type="java.util.HashMap">
        <Comment>Container that holds mine detection data.</Comment>
    </StateVariable>
    <StateVariable name="mineDetections" type="int">
        <Comment>Number of mines detected.</Comment>
    </StateVariable>
    <StateVariable name="fixMoverManager" type="seadiver.PathDeviationMoverManager">
        <Comment>Mover manager used during time fixes required.</Comment>
    </StateVariable>
    <StateVariable name="activeMoverManager" type="seadiver.MoverManager">
        <Comment>Stores the active mover manager.</Comment>
    </StateVariable>
    <StateVariable name="wpsCreator" type="seadiver.LawnMowerWaypointCreator">
        <Comment>Creates waypoints in a lawn mower pattern from a zone supplied by ZoneMap event graph.</Comment>
    </StateVariable>
    <StateVariable name="zone" type="seadiver.SymmetricZoneMap">
        <Comment>Class containing zones of each mover.</Comment>
    </StateVariable>
    <StateVariable name="targetCollector" type="java.util.LinkedList">
        <Comment>Container holding target objects detected for analysis.</Comment>
    </StateVariable>
    <StateVariable name="mineCollector" type="java.util.LinkedList">
        <Comment>Container holder mine objects detected for analysis.</Comment>
    </StateVariable>
    <StateVariable name="targetDetections" type="int">
        <Comment>Number of times the targets were detected.</Comment>
    </StateVariable>
    <StateVariable name="numberOfTargets" type="int">
        <Comment>The number of surface/submerged targets in this simulation (if any). Used to check if all targets located.</Comment>
    </StateVariable>
    <StateVariable name="totalNumberOfTargetDetections" type="int">
        <Comment>Stores total amount of target detections.</Comment>
    </StateVariable>
    <Event name="Run">
        <Comment>Required event that is called at the begining of each simulation run</Comment>
        <StateTransition state="fixMoverManager">
            <Assignment value="null"/>
        </StateTransition>
        <StateTransition state="gpsFixNeeded">
            <Assignment value="false"/>
        </StateTransition>
        <StateTransition state="wpsCreator">
            <Assignment value="null"/>
        </StateTransition>
        <StateTransition state="detectionData">
            <Assignment value="new java.util.HashMap()"/>
        </StateTransition>
        <StateTransition state="zone">
            <Assignment value="null"/>
        </StateTransition>
        <StateTransition state="targetDetections">
            <Assignment value="0"/>
        </StateTransition>
        <StateTransition state="mineDetections">
            <Assignment value="0"/>
        </StateTransition>
        <StateTransition state="numberOfTargets">
            <Assignment value="0"/>
        </StateTransition>
        <StateTransition state="targetCollector">
            <Operation method="clear()"/>
        </StateTransition>
        <StateTransition state="mineCollector">
            <Operation method="clear()"/>
        </StateTransition>
        <StateTransition state="totalNumberOfTargetDetections">
            <Assignment value="0"/>
        </StateTransition>
        <Schedule condition="true" delay="0" event="CreateMap" priority="0.0">
            <Comment/>
            <EdgeParameter value="numberDivers"/>
            <EdgeParameter value="firstMoverID"/>
        </Schedule>
        <Code>//System.out.println("Run event for Seadiver:  ");</Code>
        <Coordinate x="60" y="40"/>
    </Event>
    <Event name="RegisterTarget">
        <Comment>Registers this entity as a mover in the scenario</Comment>
        <Argument name="mover" type="diskit.Mover3D">
            <Comment>This mover</Comment>
        </Argument>
        <Code/>
        <Coordinate x="270" y="230"/>
    </Event>
    <Event name="ProcessWaypoints">
        <Comment>This event creates a mover manager object with the waypoints that were included as a parameter to this graph. If no waypoints are specificed the movement process will not be scheduled.</Comment>
        <Argument name="wpCreator" type="seadiver.LawnMowerWaypointCreator[]"/>
        <Argument name="mover" type="diskit.Mover3D"/>
        <Schedule condition="true" delay="0.0" event="StartMoving" priority="10.0">
            <Comment/>
            <EdgeParameter value="mover"/>
            <EdgeParameter value="waypoints[0]"/>
        </Schedule>
        <Code>wpCreator[mover.getMoverID() - getFirstMoverID()] = new seadiver.LawnMowerWaypointCreator(mover, zone.getZone(mover.getMoverID()), getSensorRange(), getInputFileTemplate(), getOutputFileName(), getOperatingDepth());

diskit.Vec3d[] waypoints = new diskit.Vec3d[numberDivers]; 
waypoints =  wpCreator[mover.getMoverID()-firstMoverID].getWaypoints();

seadiver.PathMoverManager pathMoverManager =  new seadiver.PathMoverManager(mover, waypoints, true, true);

pathMoverManager.setPersistant(false);

activeMoverManager=pathMoverManager;

activeMoverManager.setPersistant(false);

//System.out.println(pathMoverManager.toString());</Code>
        <Coordinate x="340" y="130"/>
    </Event>
    <Event name="StartMoving">
        <Comment>Begins the movement of this entity. Continuous movement based on waypoints from the provided zones will continue until the mover manager is changed</Comment>
        <Argument name="diver" type="seadiver.DISMover3D">
            <Comment>Mover object argument passed from RegisterDiver event.</Comment>
        </Argument>
        <Argument name="wp" type="diskit.Vec3d"/>
        <Code>diver.setTacticalMode(diskit.TacticalMode.TRANSITING);
diver.setMaximumSpeed(maximumSpeed);
diver.setStartPosition(new diskit.Vec3d( zone.getZone(diver.getMoverID()).getLowX(),  zone.getZone(diver.getMoverID()).getLowY(),  zone.getZone(diver.getMoverID()).getLowZ()));

//System.out.println(diver.getStartPosition());
diver.setCruiseSpeed(maximumSpeed);
diver.setDestination(wp);

//System.out.println(diver.getDestination());
diver.start();</Code>
        <Coordinate x="340" y="230"/>
    </Event>
    <Event name="RegisterSensor">
        <Comment/>
        <Argument name="sensorIn" type="diskit.Sensor"/>
        <LocalVariable name="sensor" type="diskit.Sensor" value="sensorIn">
            <Comment/>
        </LocalVariable>
        <Code>sensor.addSimEventListener(this);
sensor.setPersistant(false);</Code>
        <Coordinate x="210" y="230"/>
    </Event>
    <Event name="Detection">
        <Comment>Detection of objects by the sphere sensor.</Comment>
        <Argument name="sensor" type="diskit.Sensor"/>
        <Argument name="contact" type="diskit.Mover3D"/>
        <Schedule condition="(contact.getMoverID() &gt; 499) &amp;&amp; (!mineCollector.contains(contact))" delay="0.0" event="RegisterMineDetection" priority="0.0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Schedule condition="(contact.getMoverID() &gt; 399) &amp;&amp; (!targetCollector.contains(contact))" delay="0.0" event="RegisterTargetDetection" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="AllTargetDetections" priority="0">
            <Comment>(contact.getMoverID() &gt; 399) &amp;&amp; (contact.getMoverID() &lt; 500)</Comment>
        </Schedule>
        <Code>//System.out.println(sensor.getName() + " Detected: " + contact.getMoverID());</Code>
        <Coordinate x="60" y="350"/>
    </Event>
    <Event name="UnDetection">
        <Comment>Undetect event from a registered sensor.</Comment>
        <Argument name="sensor" type="diskit.Sensor"/>
        <Argument name="contact" type="diskit.Mover3D"/>
        <LocalVariable name="data" type="seadiver.MineData" value="detectionData.get(contact)">
            <Comment/>
        </LocalVariable>
        <StateTransition state="gpsFixNeeded">
            <Assignment value="true"/>
        </StateTransition>
        <Schedule condition="contact.getMoverID() &gt; 399" delay="0.0" event="TakeGPSFix" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Code>//data.setUndetectionTime(Schedule.getSimTime());
//data.setUndetLocation(contact.getLocation());

//System.out.println(sensor.getName() + " Detected: " + contact.getName());</Code>
        <Coordinate x="60" y="500"/>
    </Event>
    <Event name="TakeGPSFix">
        <Comment>Takes GPS fix by changing mover managers momentarily.</Comment>
        <Argument name="mover" type="seadiver.DISMover3D"/>
        <StateTransition state="fixMoverManager">
            <Assignment value="new seadiver.PathDeviationMoverManager(mover, fixDelayTime.generate())"/>
        </StateTransition>
        <StateTransition state="fixMoverManager">
            <Operation method="obtainFix(getActiveMoverManager())"/>
        </StateTransition>
        <StateTransition state="submerged">
            <Assignment value="!true"/>
        </StateTransition>
        <StateTransition state="fixMoverManager">
            <Operation method="setPersistant(false)"/>
        </StateTransition>
        <Code>mover.setStartPosition(mover.getLocation());

mover.setTacticalMode(diskit.TacticalMode.IDLE);</Code>
        <Coordinate x="150" y="500"/>
    </Event>
    <Event name="CreateMap">
        <Comment/>
        <Argument name="numdivers" type="int">
            <Comment>Total number of seadivers to create zones for.</Comment>
        </Argument>
        <Argument name="firstMoverID" type="int">
            <Comment>ID of first mover</Comment>
        </Argument>
        <Code/>
        <Coordinate x="160" y="40"/>
    </Event>
    <Event name="RegisterMap">
        <Comment/>
        <Argument name="moverZones" type="seadiver.SymmetricZoneMap">
            <Comment>Zones for the movers.</Comment>
        </Argument>
        <Argument name="numTargets" type="int"/>
        <StateTransition state="zone">
            <Assignment value="moverZones"/>
        </StateTransition>
        <StateTransition state="numberOfTargets">
            <Assignment value="numTargets"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="CreateDiver" priority="10.0">
            <Comment/>
            <EdgeParameter value="getFirstMoverID()"/>
        </Schedule>
        <Code>//Schedule.stopOnEvent("StopSimWhenAllObjectsDetected", 100);

// new Class[] {diskit.Mover3D.class} ,</Code>
        <Coordinate x="60" y="130"/>
    </Event>
    <Event name="CreateDiver">
        <Comment/>
        <Argument name="moverID" type="int">
            <Comment>ID of the mover</Comment>
        </Argument>
        <LocalVariable name="movID" type="int" value="moverID">
            <Comment>Iterated ID of the mover</Comment>
        </LocalVariable>
        <Schedule condition="true" delay="0.0" event="RegisterDiver" priority="10.0">
            <Comment/>
            <EdgeParameter value="movID"/>
            <EdgeParameter value="new diskit.Vec3d(0.0,0.0,0.0)"/>
            <EdgeParameter value="movID - getFirstMoverID()"/>
        </Schedule>
        <Schedule condition="movID &lt; (getFirstMoverID() + getNumberDivers() - 1)" delay="0.0" event="CreateDiver" priority="10.0">
            <Comment/>
            <EdgeParameter value="movID + 1"/>
        </Schedule>
        <Code/>
        <Coordinate x="160" y="130"/>
    </Event>
    <Event name="RegisterDiver">
        <Comment/>
        <Argument name="moverID" type="int">
            <Comment>Id of the mover</Comment>
        </Argument>
        <Argument name="startLoc" type="diskit.Vec3d">
            <Comment>Arbitrary starting location for mover creation.</Comment>
        </Argument>
        <Argument name="iterator" type="int"/>
        <LocalVariable name="diver" type="seadiver.DISMover3D" value="new seadiver.DISMover3D(startLoc, getMaximumSpeed(), moverID)">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="pts" type="seadiver.LawnMowerWaypointCreator[]" value="new seadiver.LawnMowerWaypointCreator[numberDivers]">
            <Comment/>
        </LocalVariable>
        <Schedule condition="true" delay="0.0" event="RegisterTarget" priority="20.0">
            <Comment/>
            <EdgeParameter value="diver"/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="RegisterSensor" priority="20.0">
            <Comment/>
            <EdgeParameter value="new diskit.SphereCutterSensor(diver, sensorRange)"/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="ProcessWaypoints" priority="10.0">
            <Comment/>
            <EdgeParameter value="pts"/>
            <EdgeParameter value="diver"/>
        </Schedule>
        <Code>diver.setPersistant(false);

diver.setTacticalMode(diskit.TacticalMode.IDLE);</Code>
        <Coordinate x="250" y="130"/>
    </Event>
    <Event name="RegisterMineDetection">
        <Comment/>
        <Argument name="mine" type="diskit.Mover3D"/>
        <StateTransition state="mineDetections">
            <Assignment value="mineDetections + 1"/>
        </StateTransition>
        <StateTransition state="mineCollector">
            <Operation method="add(mine)"/>
        </StateTransition>
        <Schedule event="StopSimWhenAllObjectsDetected"/>
        <Code>//System.out.println( " Detected: " + mine.getName());</Code>
        <Coordinate x="150" y="320"/>
    </Event>
    <Event name="RegisterTargetDetection">
        <Comment/>
        <Argument name="target" type="diskit.Mover3D"/>
        <StateTransition state="targetCollector">
            <Operation method="add(target)"/>
        </StateTransition>
        <StateTransition state="targetDetections">
            <Assignment value="targetDetections + 1"/>
        </StateTransition>
        <Schedule event="StopSimWhenAllObjectsDetected"/>
        <Code>//System.out.println( " Detected: " + target.getName());</Code>
        <Coordinate x="150" y="370"/>
    </Event>
    <Event name="StopSimWhenAllObjectsDetected">
        <Comment>Stops simulation when all targets or mines detected.</Comment>
        <Code>//System.out.println("numberTargets is: "+ getNumberOfTargets());</Code>
        <Coordinate x="250" y="350"/>
    </Event>
    <Event name="AllTargetDetections">
        <Comment>Counts total amount targets are detected.</Comment>
        <StateTransition state="totalNumberOfTargetDetections">
            <Assignment value="totalNumberOfTargetDetections + 1"/>
        </StateTransition>
        <Code/>
        <Coordinate x="60" y="430"/>
    </Event>
    <Code/>
</SimEntity>

