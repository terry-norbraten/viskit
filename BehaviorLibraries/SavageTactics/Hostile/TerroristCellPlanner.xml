<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<SimEntity author="pjsulliv" extend="diskit.HostileForce" name="TerroristCellPlanner" package="Hostile" version="1.0" xsi:noNamespaceSchemaLocation="http://diana.gl.nps.navy.mil/Simkit/simkit.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Comment>This object connects to a nautical chart and uses that information to develop and adjust attack plans.  It passes attack plans to the entities that are listed as potential terrorist platforms. These entities must be listening to this object to get the information.  Starting positions are selected from the perimeter zones of the nautical chart. 

Terrorists report back to this object as to whether or not they were succesfull. Adjustments are made and the cell planner will issue new attack orders based on it's evaluation of the success of the mission.

The planner also stops a simulation run when it thinks that a complete attack is over.

NOTE: Though this entity is not a mover it is instantiated as one so that it has access to the hostileForceList that is resident in the superclass diskit.HostileForce. It is important to have the starting position of this entity definition so far from the environment (e.g. 10000 meters below where all other entites are) that it will not be detected by any of the movers in a simulation run.</Comment>
    <Parameter name="entityID" type="int">
        <Comment>Unique DIS entity ID number</Comment>
    </Parameter>
    <Parameter name="entityDefinition" type="diskit.SMAL.EntityDefinition">
        <Comment>The SMAL entity definition for this entity</Comment>
    </Parameter>
    <Parameter name="terroristIDs" type="int[]">
        <Comment>The moverID numbers for all entities that can be used as a terrorist platform</Comment>
    </Parameter>
    <Parameter name="targetPriorityList" type="java.lang.String[]">
        <Comment>The types of entities that can be targets listed in the array in the order of priority (e.g. index[0] is the highest priority)</Comment>
    </Parameter>
    <Parameter name="initialAssignments" type="java.lang.String[]">
        <Comment>An array of all AStarZoneGeometry names that are potential destinations for a terrorist (e.g. 'go to this zone and find a target'). This array is checked against the nautical chart. Any zones that are not part of the chart are ignored</Comment>
    </Parameter>
    <Parameter name="tacticalOptions" type="diskit.Tactic[]">
        <Comment>A list of the possible tactics that the cell may choose to employ</Comment>
    </Parameter>
    <Parameter name="attackStartDelay" type="diskit.random.RandomVariateInstantiator">
        <Comment>The distribution of delay times for this object to use</Comment>
    </Parameter>
    <Parameter name="communicationsChannel" type="int">
        <Comment>The communication channel for this entity</Comment>
    </Parameter>
    <StateVariable name="harborChart" type="diskit.AStarZoneMap">
        <Comment>A chart of all of the areas where an agent can travel</Comment>
    </StateVariable>
    <StateVariable name="planIndex" type="int">
        <Comment>Control variable for plan creation</Comment>
    </StateVariable>
    <StateVariable name="aStarSearch" type="diskit.AStarSearch">
        <Comment>The A* search algorithm for path finding</Comment>
    </StateVariable>
    <StateVariable name="rn" type="java.util.Random">
        <Comment>A pseudorandom number generator for selecting attack plan components</Comment>
    </StateVariable>
    <StateVariable name="terroristID" type="int">
        <Comment>The id of the terrorist whose plan is being created</Comment>
    </StateVariable>
    <StateVariable name="attackPlanStartZone" type="diskit.AStarZoneGeometry">
        <Comment>The area from which the start position for the attack plan being created</Comment>
    </StateVariable>
    <StateVariable name="attackPlanGoalZone" type="diskit.AStarZoneGeometry">
        <Comment>The zone that's the goal</Comment>
    </StateVariable>
    <StateVariable name="selectedTactic" type="diskit.Tactic">
        <Comment>The selected Tactic for the current attack plan</Comment>
    </StateVariable>
    <StateVariable name="totalPlans" type="int">
        <Comment>The total number of plans that are generated for a single simulation run</Comment>
    </StateVariable>
    <StateVariable name="completedAttacks" type="int">
        <Comment>Number of attacks that have been completed</Comment>
    </StateVariable>
    <StateVariable name="replicationNumber" type="int">
        <Comment/>
    </StateVariable>
    <StateVariable name="mapReceived" type="boolean">
        <Comment>This is a special case filter that prevents multiple scheduling of the 'doAStarZoneMapDistributed' event as a result of the bi-directional listener between this object in terrorists. Without this flag multiple events would be scheduled (one from the scenario manager and one for each connected terrorist)</Comment>
    </StateVariable>
    <StateVariable name="radioCommunication" type="diskit.RadioCommunication">
        <Comment>The communication object used to send/display messages in this simulation</Comment>
    </StateVariable>
    <StateVariable name="attackStartTime" type="double">
        <Comment>The time chosen for an attack to start</Comment>
    </StateVariable>
    <StateVariable name="successfullAttacks" type="int">
        <Comment>Number of successfull attacks for this run</Comment>
    </StateVariable>
    <StateVariable name="timeToExecuteAttack" type="double">
        <Comment>The amount of time that it took to execute the attack</Comment>
    </StateVariable>
    <Event name="Run">
        <Comment/>
        <StateTransition state="planIndex">
            <Assignment value="0"/>
        </StateTransition>
        <StateTransition state="completedAttacks">
            <Assignment value="0"/>
        </StateTransition>
        <StateTransition state="replicationNumber">
            <Assignment value="replicationNumber + 1"/>
        </StateTransition>
        <Code/>
        <Coordinate x="30" y="30"/>
    </Event>
    <Event name="AStarZoneMapDistributed">
        <Comment>Listens to this event from the scenario manager and uses the object 'harborMap' to plan and order attacks. Must have a bi-directional listening connection to the scenario manager.</Comment>
        <Argument name="harborMap" type="diskit.AStarZoneMap">
            <Comment>The map of the harbor</Comment>
        </Argument>
        <StateTransition state="harborChart">
            <Assignment value="harborMap"/>
        </StateTransition>
        <StateTransition state="rn">
            <Assignment value="new java.util.Random()"/>
        </StateTransition>
        <Schedule event="ChoosePlatformsToDeploy"/>
        <Schedule condition="true" delay="0.0" event="TargetListSent" priority="0">
            <Comment/>
            <EdgeParameter value="targetPriorityList"/>
            <EdgeParameter value="this"/>
            <EdgeParameter value="communicationsChannel"/>
        </Schedule>
        <Code/>
        <Coordinate x="130" y="120"/>
    </Event>
    <Event name="ChoosePlatformsToDeploy">
        <Comment>Selects at random a number of units to deploy</Comment>
        <LocalVariable name="totalPossiblePlatforms" type="int" value="terroristIDs.length">
            <Comment>The maximum number of terrorist that this planner can deploy</Comment>
        </LocalVariable>
        <LocalVariable name="terroristSelection" type="int" value="rn.nextInt(totalPossiblePlatforms)">
            <Comment>Generates a random selection between 1 and the maximum number of platforms</Comment>
        </LocalVariable>
        <StateTransition state="totalPlans">
            <Assignment value="terroristSelection"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="CreateAttackPlan" priority="0">
            <Comment/>
            <EdgeParameter value="totalPlans"/>
        </Schedule>
        <Code/>
        <Coordinate x="130" y="200"/>
    </Event>
    <Event name="CreateAttackPlan">
        <Comment>Creates a unique attack plan for each terrorist selected</Comment>
        <Argument name="numOfPlans" type="int">
            <Comment>The total number of plans to make</Comment>
        </Argument>
        <Schedule condition="true" delay="0.0" event="SelectTerrorist" priority="0">
            <Comment>Selects a terrorist based on the current index of the plan by selecting the moverID number of the terrorist at that index position</Comment>
            <EdgeParameter value="planIndex"/>
        </Schedule>
        <Code/>
        <Coordinate x="130" y="300"/>
    </Event>
    <Event name="SelectTerrorist">
        <Comment>Picks the terrorist platform for the attack plan</Comment>
        <Argument name="moverIndex" type="int">
            <Comment>The index of the ID number of the terrorist that is selected</Comment>
        </Argument>
        <StateTransition state="terroristID">
            <Assignment value="terroristIDs[moverIndex]"/>
        </StateTransition>
        <Schedule event="SelectStartArea"/>
        <Code/>
        <Coordinate x="30" y="300"/>
    </Event>
    <Event name="SelectStartArea">
        <Comment>Generates the start position for this attack plan and updates the current plan with that zone</Comment>
        <LocalVariable name="potentialStartPositions" type="java.lang.String[]" value="harborChart.getPerimeterZoneNames()">
            <Comment>Returns the names of all of the perimeter zones</Comment>
        </LocalVariable>
        <LocalVariable name="startIdx" type="int" value="rn.nextInt(potentialStartPositions.length)">
            <Comment>Generates a random selection index bounded by the total number of possible perimeter zones to choose from</Comment>
        </LocalVariable>
        <LocalVariable name="startZoneName" type="java.lang.String" value="potentialStartPositions[startIdx]">
            <Comment>Retrives the name of the perimeter zone selected</Comment>
        </LocalVariable>
        <StateTransition state="attackPlanStartZone">
            <Assignment value="harborChart.getZone(startZoneName)"/>
        </StateTransition>
        <Schedule event="SelectGoalArea"/>
        <Code/>
        <Coordinate x="30" y="400"/>
    </Event>
    <Event name="SelectGoalArea">
        <Comment>Identifies the area that the terrorist should head towards in executing this plan</Comment>
        <LocalVariable name="goalIdx" type="int" value="rn.nextInt(initialAssignments.length)">
            <Comment>Selects a random initial goal for the plan bounded by the total number of possible destinations</Comment>
        </LocalVariable>
        <LocalVariable name="goalZoneName" type="java.lang.String" value="initialAssignments[goalIdx]">
            <Comment>The name of the goal zone</Comment>
        </LocalVariable>
        <StateTransition state="attackPlanGoalZone">
            <Assignment value="harborChart.getZone(goalZoneName)"/>
        </StateTransition>
        <Schedule event="SelectTactic"/>
        <Code/>
        <Coordinate x="120" y="400"/>
    </Event>
    <Event name="SelectTactic">
        <Comment>Chooses a tactic to assign to the terrorist</Comment>
        <LocalVariable name="tacticIdx" type="int" value="rn.nextInt(tacticalOptions.length)">
            <Comment>Picks a tactic index at random bounded by the length of the available options</Comment>
        </LocalVariable>
        <LocalVariable name="attackStart" type="double" value="attackStartDelay.generate()">
            <Comment>The time from when the order is sent to when the entity should attack</Comment>
        </LocalVariable>
        <StateTransition state="selectedTactic">
            <Assignment value="tacticalOptions[tacticIdx]"/>
        </StateTransition>
        <StateTransition state="attackStartTime">
            <Assignment value="attackStart"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="AttackOrderSent" priority="0">
            <Comment/>
            <EdgeParameter value="terroristID"/>
            <EdgeParameter value="attackPlanStartZone"/>
            <EdgeParameter value="attackPlanGoalZone"/>
            <EdgeParameter value="selectedTactic"/>
        </Schedule>
        <Code/>
        <Coordinate x="220" y="400"/>
    </Event>
    <Event name="AttackOrderSent">
        <Comment>Transmits the complete attack plan to the listening terrorist with the same moverID as the one passed</Comment>
        <Argument name="entityID" type="int">
            <Comment>The mover ID of the terrorist that this order is for</Comment>
        </Argument>
        <Argument name="attackStart" type="diskit.AStarZoneGeometry">
            <Comment>The starting zone assignment for this order</Comment>
        </Argument>
        <Argument name="attackGoal" type="diskit.AStarZoneGeometry">
            <Comment>The initial goal for the terrorist (e.g. 'head to this zone to find a target'). This is not a target order</Comment>
        </Argument>
        <Argument name="tactic" type="diskit.Tactic">
            <Comment>The name of the tactical behavior expected from this terrorist</Comment>
        </Argument>
        <LocalVariable name="attackOrder" type="java.lang.String" value="&quot;Okay, terrorist # &quot; + entityID +&quot;. Start your attack  from &quot; +attackStart.getName() + &quot;.  When you arrive at &quot; + attackGoal.getName() + &quot; you are authorized to attack&quot;">
            <Comment>The order that is being given for an attack</Comment>
        </LocalVariable>
        <StateTransition state="planIndex">
            <Assignment value="planIndex + 1"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setMessage(attackOrder)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setContext(this)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setType(&quot;AttackOrder&quot;)"/>
        </StateTransition>
        <Schedule condition="planIndex &lt;= totalPlans " delay="0.0" event="CreateAttackPlan" priority="0">
            <Comment/>
            <EdgeParameter value="totalPlans"/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="SendRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="radioCommunication"/>
        </Schedule>
        <Schedule condition="planIndex &gt; totalPlans" delay="0.0" event="BeginAttack" priority="0">
            <Comment/>
        </Schedule>
        <Code>/*System.out.println("**********************************");
System.out.println("Terrorist Attack Order");
System.out.println("\t Terrorist: " + entityID);
System.out.println("\t Start: " + attackStart.getName());
System.out.println("\t Head to : " + attackGoal.getName());
System.out.println("\t Tactic: " + selectedTactic);
System.out.println("**********************************\n");*/</Code>
        <Coordinate x="220" y="300"/>
    </Event>
    <Event name="TargetListSent">
        <Comment>Sends the target priority list to listening terrorists</Comment>
        <Argument name="list" type="java.lang.String[]">
            <Comment>The target priority list parameter for this object</Comment>
        </Argument>
        <Argument name="terroristLeader" type="diskit.Mover3D">
            <Comment>Planner notifies the terrorists who the leader is so that reports can be received</Comment>
        </Argument>
        <Argument name="commsChannel" type="java.lang.Integer">
            <Comment>The channel to use for radio communications</Comment>
        </Argument>
        <LocalVariable name="targetOrders" type="java.lang.String" value="&quot;Listen up...your primary target is: &quot; + list[0]">
            <Comment>String representation of the hi priority target for display purposes</Comment>
        </LocalVariable>
        <StateTransition state="radioCommunication">
            <Operation method="setMessage(targetOrders)"/>
        </StateTransition>
        <Code/>
        <Coordinate x="220" y="120"/>
    </Event>
    <Event name="BeginAttack">
        <Comment>Once all plans have been constructed and distributed the attacks are ordered to begin. Also clears the registration lists. By the time of the attack the sensors, terrorists, and munitions will have been registered</Comment>
        <Code/>
        <Coordinate x="350" y="300"/>
    </Event>
    <Event name="Stop">
        <Comment>Stops this replication if all attacks have finished</Comment>
        <Code>/*System.out.println("SimRunEndTime: " +Schedule.getSimTime());*/
Schedule.stopSimulation();</Code>
        <Coordinate x="120" y="550"/>
    </Event>
    <Event name="AttackComplete">
        <Comment>Recieves a report from each active terrorist as they complete their attacks. Once all attacks are complete the cell planner stops the simulation. In this case an attack is complete when it has reached its end state (e.g. it suceeded or failed, but it's over).  TODO: Add attack report so that planner can change it's knowledge base</Comment>
        <Argument name="attackResult" type="java.lang.String">
            <Comment>True if it was a success, false otherwise</Comment>
        </Argument>
        <Argument name="targetDestroyed" type="diskit.Mover3D">
            <Comment>The target that was destroyed</Comment>
        </Argument>
        <Argument name="attackLocation" type="java.lang.String">
            <Comment>The location of the attack</Comment>
        </Argument>
        <Argument name="reportingUnit" type="diskit.Mover3D">
            <Comment>The terrorist making this report</Comment>
        </Argument>
        <StateTransition state="completedAttacks">
            <Assignment value="completedAttacks + 1"/>
        </StateTransition>
        <StateTransition state="timeToExecuteAttack">
            <Assignment value="Schedule.getSimTime()"/>
        </StateTransition>
        <Schedule condition="attackResult.equals(&quot;Succeeded&quot;)" delay="0.0" event="RecordAttackResults" priority="0">
            <Comment/>
        </Schedule>
        <Schedule condition="true" delay=".1" event="Stop" priority="0">
            <Comment/>
        </Schedule>
        <Code/>
        <Coordinate x="30" y="510"/>
    </Event>
    <Event name="SendRadioMessage">
        <Comment>Transmits diskit.RadioCommunication objects through the ScenarioManager</Comment>
        <Argument name="message" type="diskit.RadioCommunication">
            <Comment>The message to transmit</Comment>
        </Argument>
        <Code/>
        <Coordinate x="340" y="120"/>
    </Event>
    <Event name="Init">
        <Comment>The initialization event for this simulation</Comment>
        <Argument name="entity" type="simkit.SimEntity"/>
        <StateTransition state="radioCommunication">
            <Assignment value="new diskit.RadioCommunication(communicationsChannel, this)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setRecipients(hostileForceList)"/>
        </StateTransition>
        <Code/>
        <Coordinate x="130" y="30"/>
    </Event>
    <Event name="RegisterTarget">
        <Comment>Registers this entity with the simulation.</Comment>
        <Argument name="mover" type="diskit.Mover3D">
            <Comment>The mover to register</Comment>
        </Argument>
        <Code/>
        <Coordinate x="220" y="30"/>
    </Event>
    <Event name="RecordAttackResults">
        <Comment>Records the result of the attack as the reports are received</Comment>
        <StateTransition state="successfullAttacks">
            <Assignment value="successfullAttacks + 1"/>
        </StateTransition>
        <Code/>
        <Coordinate x="120" y="490"/>
    </Event>
    <Event name="RadioMessageRecieved">
        <Comment>Received a radio message from a terrorist</Comment>
        <Argument name="msg" type="diskit.RadioCommunication">
            <Comment>The radio message that was received</Comment>
        </Argument>
        <Code/>
        <Coordinate x="220" y="500"/>
    </Event>
</SimEntity>

