<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<SimEntity author="pjsulliv" extend="diskit.HostileForce" name="ExplosiveLadenVessel" package="Hostile" version="1.0" xsi:noNamespaceSchemaLocation="http://diana.gl.nps.navy.mil/Simkit/simkit.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Comment>Terrorist that starts from a point randomly within ProbabilityZoneGeometry objects.  Terrorist will proceed towards the harbor, scans the area for potential targets and attacks the targets in order of proximity and order in which detected.
TODO: Add booleans to the constructor for attack Friendly, attack HVU</Comment>
    <Parameter name="moverID" type="int">
        <Comment>Unique DIS entity ID number</Comment>
    </Parameter>
    <Parameter name="entityDefinition" type="diskit.SMAL.EntityDefinition">
        <Comment>The SMAL entity definition for this entity</Comment>
    </Parameter>
    <StateVariable name="avoidanceRange" type="double">
        <Comment>The proximity tollerance for this entity</Comment>
    </StateVariable>
    <StateVariable name="visualPerception" type="diskit.Sensor">
        <Comment>Sensor object that processes all targets in the state space before attacking</Comment>
    </StateVariable>
    <StateVariable name="waypointCreator" type="diskit.WaypointCreator">
        <Comment>The utility that creates waypoints based on the arguments passed</Comment>
    </StateVariable>
    <StateVariable name="targetQueue" type="diskit.TargetQueue">
        <Comment>The queue of active targets for this entity</Comment>
    </StateVariable>
    <StateVariable name="collisionAvoidance" type="diskit.Sensor">
        <Comment>Sensor that implements collision avoidance</Comment>
    </StateVariable>
    <StateVariable name="obstacleQueue" type="diskit.ObstacleQueue">
        <Comment>The active list of obstacles that this entity is concerned with. Special class that organizes the queue based on the proximity of the obstacles</Comment>
    </StateVariable>
    <StateVariable name="tacticalMode" type="diskit.TacticalMode">
        <Comment>The current tactical mode of this entity</Comment>
    </StateVariable>
    <StateVariable name="calc" type="diskit.util.MovementCalculator">
        <Comment>A utility class that performs 3D vector math calculations</Comment>
    </StateVariable>
    <StateVariable name="detonateProximity" type="diskit.Sensor">
        <Comment>Sensor that determines if the contact is close enough to kill</Comment>
    </StateVariable>
    <StateVariable name="visualRange" type="double">
        <Comment>Visual range for this entity</Comment>
    </StateVariable>
    <StateVariable name="plasticExplosives" type="diskit.Explosive">
        <Comment>Explosives that this entity is carrying</Comment>
    </StateVariable>
    <StateVariable name="blastRadius" type="double">
        <Comment>The radius of the explosives</Comment>
    </StateVariable>
    <StateVariable name="harborChart" type="diskit.AStarZoneMap">
        <Comment>A map of the environment that contains the collection of search nodes for path finding</Comment>
    </StateVariable>
    <StateVariable name="primaryTarget" type="java.lang.String">
        <Comment>The primary target for this entity</Comment>
    </StateVariable>
    <StateVariable name="aStarSearch" type="diskit.AStarSearch">
        <Comment>The A* search implementation that is used for path finding</Comment>
    </StateVariable>
    <StateVariable name="tactic" type="diskit.Tactic">
        <Comment>The tactic that has been ordered for this terrorist</Comment>
    </StateVariable>
    <StateVariable name="startZone" type="diskit.AStarZoneGeometry">
        <Comment>The zone from which the terrorist should start</Comment>
    </StateVariable>
    <StateVariable name="goalZone" type="diskit.AStarZoneGeometry">
        <Comment>The area where this terrorist should head towards to execute it's tactics</Comment>
    </StateVariable>
    <StateVariable name="attackAuthorized" type="boolean">
        <Comment>A flag to indicate whether or not the cell planner has authorized the execution of the attack plan</Comment>
    </StateVariable>
    <StateVariable name="planFinalized" type="boolean">
        <Comment>A flag that indicates that this entity has processed it's attack order and is ready to attack</Comment>
    </StateVariable>
    <StateVariable name="zoneMoverManager" type="diskit.ZoneMoverManager">
        <Comment>The primary mover for this entity, moves using A* search zone geometry</Comment>
    </StateVariable>
    <StateVariable name="attackStartWaypoint" type="diskit.Vec3d">
        <Comment>The waypoint selected to start the attack</Comment>
    </StateVariable>
    <StateVariable name="chosenToAttack" type="boolean">
        <Comment>Flag that is set to true when this entity has been selected to attack</Comment>
    </StateVariable>
    <StateVariable name="arrivedAtGoal" type="boolean">
        <Comment>Flags when the entity has reached it's destination</Comment>
    </StateVariable>
    <StateVariable name="speedScalar" type="double">
        <Comment>The default speed scale for this entity</Comment>
    </StateVariable>
    <StateVariable name="attackSuccess" type="java.lang.String">
        <Comment>String report of the result of the attack</Comment>
    </StateVariable>
    <StateVariable name="destroyedTarget" type="diskit.Mover3D">
        <Comment>The mover that was destroyed</Comment>
    </StateVariable>
    <StateVariable name="terroristLeader" type="simkit.SimEntity">
        <Comment>The entity that is giving the orders to this terrorist</Comment>
    </StateVariable>
    <StateVariable name="attackDelay" type="double">
        <Comment>The amount of time from when an order is received</Comment>
    </StateVariable>
    <StateVariable name="timeUndetected" type="double">
        <Comment>The amount of time from simulation start before this attacker was detected by a friendly force</Comment>
    </StateVariable>
    <StateVariable name="commsChannel" type="int">
        <Comment>The radio channel for this entity</Comment>
    </StateVariable>
    <StateVariable name="radioMsg" type="diskit.RadioCommunication">
        <Comment>The communication object that this entity uses to send messages</Comment>
    </StateVariable>
    <Event name="Run">
        <Comment>Represents the reseting features and initial events for this entity. State variables are reset to the desired state at the start of each simulation run</Comment>
        <StateTransition state="avoidanceRange">
            <Assignment value="30"/>
        </StateTransition>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.TRANSITING"/>
        </StateTransition>
        <StateTransition state="visualRange">
            <Assignment value="600"/>
        </StateTransition>
        <StateTransition state="blastRadius">
            <Assignment value="20"/>
        </StateTransition>
        <StateTransition state="attackAuthorized">
            <Assignment value="false"/>
        </StateTransition>
        <StateTransition state="planFinalized">
            <Assignment value="false"/>
        </StateTransition>
        <StateTransition state="chosenToAttack">
            <Assignment value="false"/>
        </StateTransition>
        <StateTransition state="arrivedAtGoal">
            <Assignment value="false"/>
        </StateTransition>
        <StateTransition state="speedScalar">
            <Assignment value="1"/>
        </StateTransition>
        <StateTransition state="destroyedTarget">
            <Assignment value="null"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="ScaleSpeed" priority="0">
            <Comment/>
            <EdgeParameter value="speedScalar"/>
        </Schedule>
        <Code/>
        <Coordinate x="20" y="10"/>
    </Event>
    <Event name="Init">
        <Comment/>
        <Argument name="entity" type="diskit.Mover3D"/>
        <LocalVariable name="numOfSensors" type="int" value="3">
            <Comment>Number of Sensors this entity has</Comment>
        </LocalVariable>
        <LocalVariable name="sensors" type="diskit.Sensor[]" value="new diskit.Sensor[numOfSensors]">
            <Comment/>
        </LocalVariable>
        <StateTransition state="calc">
            <Assignment value="new diskit.util.MovementCalculator(this)"/>
        </StateTransition>
        <StateTransition state="visualPerception">
            <Assignment value="new diskit.SphereCutterSensor(this, visualRange)"/>
        </StateTransition>
        <StateTransition state="detonateProximity">
            <Assignment value="new diskit.SphereCutterSensor(this, blastRadius)"/>
        </StateTransition>
        <StateTransition state="collisionAvoidance">
            <Assignment value="new diskit.SphereCutterSensor(this, avoidanceRange)"/>
        </StateTransition>
        <StateTransition state="targetQueue">
            <Assignment value="new diskit.TargetQueue(startPosition)"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="RegisterTarget" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Schedule condition="entity == this" delay="0.0" event="CreateSensors" priority="0">
            <Comment/>
        </Schedule>
        <Schedule event="CreateExplosive"/>
        <Code>//TODO: Elegant construction of sensors array
sensors[0] = visualPerception;
sensors[1] = detonateProximity;
sensors[2] = collisionAvoidance;
//Schedule.stopOnEvent("Stop");</Code>
        <Coordinate x="80" y="90"/>
    </Event>
    <Event name="RegisterTarget">
        <Comment/>
        <Argument name="target" type="diskit.Mover3D"/>
        <Code/>
        <Coordinate x="160" y="90"/>
    </Event>
    <Event name="Detection">
        <Comment>Determines whether or not a detected contact is a high value unit and makes a decision based on the evaluation of the entity</Comment>
        <Argument name="sensor" type="diskit.Sensor"/>
        <Argument name="contact" type="diskit.Mover3D"/>
        <LocalVariable name="isHostileForce" type="boolean" value="hostileForces.contains(contact.getMoverID())">
            <Comment>Check to see if contact is of the same force</Comment>
        </LocalVariable>
        <LocalVariable name="canIntercept" type="boolean" value="canIntercept(contact)">
            <Comment>Can I intercept the contact and blow it up</Comment>
        </LocalVariable>
        <LocalVariable name="currentTacticalMode" type="diskit.TacticalMode" value="getTacticalMode()">
            <Comment>The tactical mode of the entity when he detects the contact</Comment>
        </LocalVariable>
        <LocalVariable name="contactType" type="java.lang.String" value="contact.getEntityType()">
            <Comment>Checks the entity type of the contact</Comment>
        </LocalVariable>
        <Schedule condition="sensor == detonateProximity &amp;&amp;  tacticalMode != diskit.TacticalMode.DETONATING &amp;&amp;
(contactType.equals(&quot;MilitaryPatrolCraft&quot;) || contactType.equals(&quot;Barrier&quot;))" delay="0.0" event="CannotEscape" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Schedule condition="3&gt;7 &amp;&amp; sensor == collisionAvoidance &amp;&amp; !contactType.equals(primaryTarget)" delay="0.0" event="AssessObstacle" priority="0">
            <Comment>TODO: Remove patrol craft hardcoding</Comment>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Schedule condition="sensor == visualPerception &amp;&amp; contactType.equals(primaryTarget) &amp;&amp;  arrivedAtGoal &amp;&amp;  currentTacticalMode != diskit.TacticalMode.ATTACKING" delay="0.0" event="Attack" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Schedule condition="sensor == visualPerception &amp;&amp;  contactType.equals(primaryTarget) &amp;&amp;   !arrivedAtGoal &amp;&amp;   currentTacticalMode != diskit.TacticalMode.ATTACKING" delay="0.0" event="TargetSpotted" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Schedule condition="!isHostileForce" delay="0.0" event="SpottedByEnemy" priority="0">
            <Comment/>
        </Schedule>
        <Code>/*System.out.println(getName() + " detected: " + contact.getName());*/
contact.waitDelay("Die", 0.0);</Code>
        <Coordinate x="220" y="270"/>
    </Event>
    <Event name="RegisterSensors">
        <Comment>Registers Sensors for this entity, and adds simEventListenerConnections</Comment>
        <Argument name="sensors[]" type="diskit.Sensor[]">
            <Comment>Sensors for this entity</Comment>
        </Argument>
        <StateTransition state="visualPerception">
            <Operation method="addSimEventListener(this)"/>
        </StateTransition>
        <StateTransition state="detonateProximity">
            <Operation method="addSimEventListener(this)"/>
        </StateTransition>
        <StateTransition state="collisionAvoidance">
            <Operation method="addSimEventListener(this)"/>
        </StateTransition>
        <Code/>
        <Coordinate x="160" y="170"/>
    </Event>
    <Event name="Attack">
        <Comment>Determines the correct heading for an attack and attacks at Maximum speed</Comment>
        <Argument name="target" type="diskit.Mover3D">
            <Comment>The target to attack</Comment>
        </Argument>
        <LocalVariable name="attackDestination" type="diskit.Vec3d" value="getInterceptPoint()">
            <Comment>The location where an attack will succeed</Comment>
        </LocalVariable>
        <LocalVariable name="detonateTime" type="double" value="getInterceptTime()">
            <Comment>Set explosive to explode when you arrive</Comment>
        </LocalVariable>
        <LocalVariable name="attackReport" type="java.lang.String" value="&quot;Leader, I have succeeded. Good luck to all of you. I am attacking &quot; + target.getName() +&quot;. ----{Loud Explosion...Radio goes dead}&quot;">
            <Comment>The final report of a successfull attack</Comment>
        </LocalVariable>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.ATTACKING"/>
        </StateTransition>
        <StateTransition state="attackSuccess">
            <Assignment value="&quot;Succeeded&quot;"/>
        </StateTransition>
        <StateTransition state="destroyedTarget">
            <Assignment value="target"/>
        </StateTransition>
        <Schedule condition="true" delay="detonateTime" event="Detonate" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
            <EdgeParameter value="plasticExplosives"/>
        </Schedule>
        <Schedule condition="true   " delay="detonateTime - .5" event="PrepareRadioMessage" priority="0">
            <Comment>This message is sent right before the terrorist blows up</Comment>
            <EdgeParameter value="&quot;DestroyedTarget&quot;"/>
            <EdgeParameter value="target"/>
            <EdgeParameter value="attackReport"/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Code>setStartPosition(getLocation());
setDestination(attackDestination);
System.out.println("I've chosen to attack: " + target.getName());
//System.out.println("Attack Position is: " + attackDestination);</Code>
        <Coordinate x="330" y="330"/>
    </Event>
    <Event name="CreateSensors">
        <Comment>Builds array of all sensors to be registered</Comment>
        <LocalVariable name="numOfSensors" type="int" value="3">
            <Comment>Number of Sensors for this entity</Comment>
        </LocalVariable>
        <LocalVariable name="sensors" type="diskit.Sensor[]" value="new diskit.Sensor[numOfSensors]">
            <Comment>Array to add all sensors</Comment>
        </LocalVariable>
        <Schedule condition="true" delay="0.0" event="RegisterSensors" priority="0">
            <Comment/>
            <EdgeParameter value="sensors"/>
        </Schedule>
        <Code>sensors[0] = visualPerception;
sensors[1] = detonateProximity;
sensors[2] = collisionAvoidance;</Code>
        <Coordinate x="80" y="170"/>
    </Event>
    <Event name="CreateExplosive">
        <Comment>Creates the explosive for this entity</Comment>
        <StateTransition state="plasticExplosives">
            <Assignment value="new diskit.Explosive(getLocation(), getMaximumSpeed(), getMoverID(), blastRadius)"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="RegisterMunition" priority="0">
            <Comment/>
            <EdgeParameter value="plasticExplosives"/>
        </Schedule>
        <Code/>
        <Coordinate x="80" y="10"/>
    </Event>
    <Event name="RegisterMunition">
        <Comment>Register the explosive with scenario Manager</Comment>
        <Argument name="munition" type="diskit.Munition">
            <Comment>The explosives just created</Comment>
        </Argument>
        <StateTransition state="plasticExplosives">
            <Operation method="addSimEventListener(this)"/>
        </StateTransition>
        <Code>this.addSimEventListener(munition);</Code>
        <Coordinate x="160" y="10"/>
    </Event>
    <Event name="Detonate">
        <Comment/>
        <Argument name="shooter" type="diskit.Mover3D"/>
        <Argument name="munition" type="diskit.Munition"/>
        <LocalVariable name="closestZone" type="diskit.AStarZoneGeometry" value="harborChart.findClosestZone(getLocation())">
            <Comment>Returns the zone that was closest to the attack</Comment>
        </LocalVariable>
        <LocalVariable name="areaOfAttack" type="java.lang.String" value="closestZone.getName()">
            <Comment>The name of the closest zone for reporting purposes</Comment>
        </LocalVariable>
        <StateTransition state="zoneMoverManager">
            <Assignment value="null"/>
        </StateTransition>
        <Schedule condition="shooter == this &amp;&amp; tacticalMode != diskit.TacticalMode.DEAD" delay="0.0" event="Die" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Code>setCruiseSpeed(0);
stop();</Code>
        <Coordinate x="470" y="260"/>
    </Event>
    <Event name="AStarZoneMapDistributed">
        <Comment>Recieves the harbor chart information from the terrorist cell planner</Comment>
        <Argument name="chart" type="diskit.AStarZoneMap">
            <Comment>The chart that the terrorist sent</Comment>
        </Argument>
        <StateTransition state="harborChart">
            <Assignment value="chart"/>
        </StateTransition>
        <Code/>
        <Coordinate x="350" y="40"/>
    </Event>
    <Event name="TargetListSent">
        <Comment>Receives the target priority list from the terrorist cell planner</Comment>
        <Argument name="targetList" type="java.lang.String[]">
            <Comment>The list of target types in order of priority</Comment>
        </Argument>
        <Argument name="cellPlanner" type="simkit.SimEntity">
            <Comment>The entity who is giving the orders</Comment>
        </Argument>
        <Argument name="channelNumber" type="int">
            <Comment>The channel this entity should use for the radio</Comment>
        </Argument>
        <StateTransition state="primaryTarget">
            <Assignment value="targetList[0]"/>
        </StateTransition>
        <StateTransition state="terroristLeader">
            <Assignment value="cellPlanner"/>
        </StateTransition>
        <StateTransition state="radioMsg">
            <Assignment value="new diskit.RadioCommunication(channelNumber, this)"/>
        </StateTransition>
        <StateTransition state="radioMsg">
            <Operation method="setRecipients(hostileForceList)"/>
        </StateTransition>
        <Code/>
        <Coordinate x="430" y="30"/>
    </Event>
    <Event name="AttackOrderSent">
        <Comment>Checks to see if the order is for this entity. If so it begins to process the instructions and form a tactical plan. If not the order is ignored.  The target queue's relative point is set to the location of the destination of this entity.  The target queue uses this location to sort potential targets in order of proximity to this agents destination.</Comment>
        <Argument name="terroristID" type="int">
            <Comment>The moverID number of the terrorist the order is for</Comment>
        </Argument>
        <Argument name="attackStart" type="diskit.AStarZoneGeometry">
            <Comment>The start zone for this order</Comment>
        </Argument>
        <Argument name="attackGoal" type="diskit.AStarZoneGeometry">
            <Comment>The general goal area for this order</Comment>
        </Argument>
        <Argument name="tactic" type="diskit.Tactic">
            <Comment>The tactic for this order</Comment>
        </Argument>
        <LocalVariable name="start" type="diskit.AStarZoneGeometry" value="attackStart">
            <Comment>Local copy of order information in case the order is for this terrorist</Comment>
        </LocalVariable>
        <LocalVariable name="goal" type="diskit.AStarZoneGeometry" value="attackGoal">
            <Comment>Local copy of order information in case the order is for this terrorist</Comment>
        </LocalVariable>
        <LocalVariable name="tacticCopy" type="diskit.Tactic" value="tactic">
            <Comment>Local copy of order information in case the order is for this terrorist</Comment>
        </LocalVariable>
        <StateTransition state="targetQueue">
            <Operation method="setRelativePoint(attackGoal.getLocation())"/>
        </StateTransition>
        <Schedule condition="terroristID == moverID" delay="0.0" event="BeginAttackPlanning" priority="0">
            <Comment/>
            <EdgeParameter value="start"/>
            <EdgeParameter value="goal"/>
            <EdgeParameter value="tacticCopy"/>
        </Schedule>
        <Code/>
        <Coordinate x="270" y="30"/>
    </Event>
    <Event name="BeginAttackPlanning">
        <Comment>Takes the order information and prepares for its attack. Preparations include: 1) setting the startZone and goalZone state variables 2) Initializing a waypoint creator 3) Initializing an A* search object for path finding 4) Initializing a ZoneMoverManager for movement</Comment>
        <Argument name="orderedStart" type="diskit.AStarZoneGeometry">
            <Comment>The starting perimeter zone for this attack</Comment>
        </Argument>
        <Argument name="orderedGoal" type="diskit.AStarZoneGeometry">
            <Comment>The goal zone for this attack</Comment>
        </Argument>
        <Argument name="orderedTactic" type="diskit.Tactic">
            <Comment>The tactic for this attack</Comment>
        </Argument>
        <LocalVariable name="tacticToImplement" type="diskit.Tactic" value="orderedTactic">
            <Comment>Copy of the tactic that has been ordered</Comment>
        </LocalVariable>
        <StateTransition state="startZone">
            <Assignment value="orderedStart"/>
        </StateTransition>
        <StateTransition state="goalZone">
            <Assignment value="orderedGoal"/>
        </StateTransition>
        <StateTransition state="aStarSearch">
            <Assignment value="new diskit.AStarSearch(harborChart)"/>
        </StateTransition>
        <StateTransition state="waypointCreator">
            <Assignment value="new diskit.WaypointCreator()"/>
        </StateTransition>
        <StateTransition state="chosenToAttack">
            <Assignment value="true"/>
        </StateTransition>
        <StateTransition state="waypointCreator">
            <Operation method="setMover(this)"/>
        </StateTransition>
        <Schedule event="PickStartPosition"/>
        <Code/>
        <Coordinate x="270" y="140"/>
    </Event>
    <Event name="PickStartPosition">
        <Comment>Terrorist uses the start zone to select an exact start position. It then determines which zone on the map is the closest to his starting position and updates it's A* search object with its destination and first zone to visit.   This implementation purposely decouples perimeter zones from the zones of the environment to allow analysts to alter terrorist starting options without effecting the overall structure of the basic environment map (e.g. navigatable water spaces). Futhermore it allows developers to prevent defending forces from knowing exactly where terrorists are going to retreat to (e.g. where they started).</Comment>
        <LocalVariable name="initialWaypoint" type="diskit.Vec3d" value="waypointCreator.createWaypoint(startZone)">
            <Comment>Generates a waypoint from the starting perimeter zone</Comment>
        </LocalVariable>
        <LocalVariable name="closestZone" type="diskit.AStarZoneGeometry" value="harborChart.findClosestZone(initialWaypoint)">
            <Comment>Returns the A* zone that is not a perimeter zone and is the closest to the initial waypoint provided</Comment>
        </LocalVariable>
        <StateTransition state="aStarSearch">
            <Operation method="setStartZone(closestZone)"/>
        </StateTransition>
        <StateTransition state="aStarSearch">
            <Operation method="setGoalZone(goalZone)"/>
        </StateTransition>
        <StateTransition state="attackStartWaypoint">
            <Assignment value="initialWaypoint"/>
        </StateTransition>
        <Schedule event="FinalizePlan"/>
        <Code/>
        <Coordinate x="350" y="140"/>
    </Event>
    <Event name="FinalizePlan">
        <Comment>Uses the closest zone as the first destination and generates a path. Then a path mover manager is created with the attack plan. If the attack has been authorized by the terrorist planner while the terrorist was making its plan, the terrorist will start it's attack immediately after the plan is made. Otherwise it will wait for the 'BeginAttack' order from the terrorist cell planner</Comment>
        <LocalVariable name="attackPath" type="java.util.LinkedList" value="aStarSearch.createZonePath()">
            <Comment>Returns the zones that should be used to generate waypoints in the order that they should be used by the waypoint creator</Comment>
        </LocalVariable>
        <StateTransition state="planFinalized">
            <Assignment value="true"/>
        </StateTransition>
        <StateTransition state="zoneMoverManager">
            <Assignment value="new diskit.ZoneMoverManager(this, waypointCreator)"/>
        </StateTransition>
        <Schedule condition="attackAuthorized" delay="0.0" event="StartMove" priority="0">
            <Comment/>
        </Schedule>
        <Code>waypointCreator.setAStarZones(attackPath);
//aStarSearch.printPath(attackPath);</Code>
        <Coordinate x="430" y="140"/>
    </Event>
    <Event name="BeginAttack">
        <Comment>The execution order giving this terrorist permission to start its attack when ready</Comment>
        <StateTransition state="attackAuthorized">
            <Assignment value="true"/>
        </StateTransition>
        <Schedule condition="planFinalized" delay="0.0" event="StartMove" priority="0">
            <Comment/>
        </Schedule>
        <Schedule condition="!chosenToAttack" delay="0.0" event="NotAChosenPlatform" priority="0">
            <Comment>If this entity hasn't been selected for the attack, hide it from view as an inactive platform</Comment>
        </Schedule>
        <Code/>
        <Coordinate x="560" y="40"/>
    </Event>
    <Event name="StartMove">
        <Comment/>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.APPROACHING"/>
        </StateTransition>
        <Code>setCruiseSpeed(maximumSpeed);
setStartPosition(attackStartWaypoint);
setDestination(waypointCreator.createWaypoint());</Code>
        <Coordinate x="500" y="140"/>
    </Event>
    <Event name="NotAChosenPlatform">
        <Comment>Hides inactive platforms not chosen for attack</Comment>
        <LocalVariable name="hiddenPosition" type="diskit.Vec3d" value="new diskit.Vec3d(0, 0, 1000)">
            <Comment>A position that is removed from the scenario, hides the terrorist from view when not being used</Comment>
        </LocalVariable>
        <Code>setStartPosition(hiddenPosition);</Code>
        <Coordinate x="600" y="140"/>
    </Event>
    <Event name="AttackComplete">
        <Comment>Notifies the terrorist cell planner that the attack has ended. This does not mean that the attack succeeded just that it is over</Comment>
        <Argument name="attackResult" type="java.lang.String">
            <Comment>Whether or not the attack was succesfull</Comment>
        </Argument>
        <Argument name="targetDestroyed" type="diskit.Mover3D">
            <Comment>The target that was destroyed</Comment>
        </Argument>
        <Argument name="attackLocation" type="java.lang.String">
            <Comment>The name of the area where the attack took place</Comment>
        </Argument>
        <Argument name="reportingUnit" type="diskit.Mover3D">
            <Comment>Identify this entity as the reporting unit</Comment>
        </Argument>
        <Code/>
        <Coordinate x="570" y="390"/>
    </Event>
    <Event name="DestinationReached">
        <Comment/>
        <LocalVariable name="targetChoice" type="diskit.Mover3D" value="targetQueue.closest()">
            <Comment>Picks the closest target</Comment>
        </LocalVariable>
        <StateTransition state="arrivedAtGoal">
            <Assignment value="true"/>
        </StateTransition>
        <Schedule condition="targetChoice != null &amp;&amp; tacticalMode != diskit.TacticalMode.ATTACKING" delay="0.0" event="PickFromTargets" priority="0">
            <Comment>If there is a target to attack, attack it</Comment>
            <EdgeParameter value="targetChoice"/>
        </Schedule>
        <Code>//System.out.println(getName() + ": I have arrived at " + //goalZone.getName());</Code>
        <Coordinate x="330" y="530"/>
    </Event>
    <Event name="PickFromTargets">
        <Comment/>
        <Argument name="target" type="diskit.Mover3D">
            <Comment>The target to attack</Comment>
        </Argument>
        <LocalVariable name="canIntercept" type="boolean" value="canIntercept(target, target.getEntityDefinition().getWidth() )">
            <Comment>Determines if this target can be intercepted</Comment>
        </LocalVariable>
        <Schedule condition="canIntercept" delay="0.0" event="Attack" priority="0">
            <Comment/>
            <EdgeParameter value="target"/>
        </Schedule>
        <Code/>
        <Coordinate x="330" y="420"/>
    </Event>
    <Event name="CannotEscape">
        <Comment>If the terrorist has been intercepted he will detonate</Comment>
        <Argument name="mover" type="diskit.Mover3D">
            <Comment>The mover that set off the sensor</Comment>
        </Argument>
        <LocalVariable name="failedReport" type="java.lang.String" value="&quot;Leader I have failed. I cannot achieve my objective.  I will sacrifice myself for our cause!!!!  I am destroying &quot; + mover.getName()">
            <Comment>A report of a failed attack</Comment>
        </LocalVariable>
        <StateTransition state="attackSuccess">
            <Assignment value="&quot;Failed&quot;"/>
        </StateTransition>
        <StateTransition state="destroyedTarget">
            <Assignment value="mover"/>
        </StateTransition>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.DETONATING"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="Detonate" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
            <EdgeParameter value="plasticExplosives"/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="PrepareRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="&quot;FailedAttack&quot;"/>
            <EdgeParameter value="mover"/>
            <EdgeParameter value="failedReport"/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Code>/*System.out.println("Detonate Proximity sensed");
System.out.println("I'm blowing up "+  mover.getName());*/
setCruiseSpeed(0);</Code>
        <Coordinate x="330" y="260"/>
    </Event>
    <Event name="ScaleSpeed">
        <Comment>Allows the scenario manager to add a cross the board speed scale to all entities</Comment>
        <Argument name="speedScale" type="double">
            <Comment>The scale to apply to the max speed of this entity</Comment>
        </Argument>
        <Code>setMaximumSpeed(getMaximumSpeed() * speedScale);</Code>
        <Coordinate x="20" y="90"/>
    </Event>
    <Event name="AssessObstacle">
        <Comment>If something is determined to be potential obstacle assess whether or not there will be a collision</Comment>
        <Argument name="obstacle" type="diskit.Mover3D">
            <Comment>The mover that is a potential obstacle</Comment>
        </Argument>
        <StateTransition state="calc">
            <Operation method="checkCollision(obstacle, collisionAvoidance, avoidanceRange)"/>
        </StateTransition>
        <Schedule condition="calc.willCollide()" delay="0.0" event="AvoidObstacle" priority="0">
            <Comment/>
            <EdgeParameter value="obstacle"/>
        </Schedule>
        <Code>//System.out.println(getName() + " Assessing Obstacle: " + obstacle.getName());</Code>
        <Coordinate x="120" y="260"/>
    </Event>
    <Event name="AvoidObstacle">
        <Comment>Avoids an obstacle if a collision is going to happen</Comment>
        <Argument name="obstacle" type="diskit.Mover3D">
            <Comment>The obstacle that needs to be avoided</Comment>
        </Argument>
        <LocalVariable name="avoidancePoint" type="diskit.Vec3d" value="calc.getCollisionAvoidance(obstacle)">
            <Comment>The point that avoids the collision</Comment>
        </LocalVariable>
        <Code>setStartPosition(getLocation());
setDestination(avoidancePoint);</Code>
        <Coordinate x="30" y="260"/>
    </Event>
    <Event name="Die">
        <Comment>Stops this entity</Comment>
        <Argument name="mover" type="diskit.Mover3D">
            <Comment>Terrorist killed himself</Comment>
        </Argument>
        <LocalVariable name="closestZone" type="diskit.AStarZoneGeometry" value="harborChart.findClosestZone(getLocation())">
            <Comment>Returns the zone that was closest to the attack</Comment>
        </LocalVariable>
        <LocalVariable name="areaOfAttack" type="java.lang.String" value="closestZone.getName()">
            <Comment>The name of the general area of the attack</Comment>
        </LocalVariable>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.DEAD"/>
        </StateTransition>
        <StateTransition state="zoneMoverManager">
            <Assignment value="null"/>
        </StateTransition>
        <StateTransition state="terroristLeader">
            <Operation method="waitDelay(&quot;AttackComplete&quot;,0.0,new Object[]{attackSuccess,destroyedTarget,areaOfAttack,this},0)"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="AttackComplete" priority="0">
            <Comment/>
            <EdgeParameter value="attackSuccess"/>
            <EdgeParameter value="destroyedTarget"/>
            <EdgeParameter value="areaOfAttack"/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Code/>
        <Coordinate x="570" y="260"/>
    </Event>
    <Event name="TargetSpotted">
        <Comment>Adds spotted targets to queue in the event that the this entity has not reached it's ordered destination</Comment>
        <Argument name="target" type="diskit.Mover3D">
            <Comment>The target to add to the target list</Comment>
        </Argument>
        <StateTransition state="targetQueue">
            <Operation method="add(target)"/>
        </StateTransition>
        <Code/>
        <Coordinate x="220" y="350"/>
    </Event>
    <Event name="SpottedByEnemy">
        <Comment>Marks when this entity was spotted by any Friendly force</Comment>
        <StateTransition state="timeUndetected">
            <Assignment value="Schedule.getSimTime()"/>
        </StateTransition>
        <Code/>
        <Coordinate x="90" y="350"/>
    </Event>
    <Event name="RadioMessageReceived">
        <Comment>A radio message was transmitted to this entity</Comment>
        <Argument name="msg" type="diskit.RadioCommunication">
            <Comment>The message that was received</Comment>
        </Argument>
        <LocalVariable name="msgType" type="java.lang.String" value="msg.getType()">
            <Comment>The type of message sent</Comment>
        </LocalVariable>
        <LocalVariable name="msgContext" type="diskit.Mover3D" value="msg.getContext()">
            <Comment>The contact the message is about</Comment>
        </LocalVariable>
        <LocalVariable name="msgSender" type="diskit.Mover3D" value="msg.getSender()">
            <Comment>The person who sent this message</Comment>
        </LocalVariable>
        <Schedule condition="msgType.equals(&quot;DestroyedTarget&quot;) &amp;&amp; targetQueue.contains(msgContext) &amp;&amp; msgSender != this" delay="0.0" event="UpdateTargetQueue" priority="0">
            <Comment>If this is a destruction report and we have this target on our list, remove it</Comment>
            <EdgeParameter value="msgContext"/>
        </Schedule>
        <Code/>
        <Coordinate x="440" y="520"/>
    </Event>
    <Event name="UpdateTargetQueue">
        <Comment>This entity changes updates it's targets if a destroyed target report comes across the radio</Comment>
        <Argument name="target" type="diskit.Mover3D">
            <Comment>The target to evaluate</Comment>
        </Argument>
        <LocalVariable name="closestZone" type="diskit.AStarZoneGeometry" value="harborChart.findClosestZone(getLocation())">
            <Comment>Gets the updated closest zone base on the current location of this entity for reporting purposes</Comment>
        </LocalVariable>
        <LocalVariable name="messageReport" type="java.lang.String" value="(&quot;This is &quot; + getName() + &quot;. I've updated my target list, I am still inbound in the vicinity of &quot; + closestZone.getName())">
            <Comment>The text of the message</Comment>
        </LocalVariable>
        <StateTransition state="targetQueue">
            <Operation method="remove(target)"/>
        </StateTransition>
        <Schedule condition="true" delay="5" event="PrepareRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="&quot;UpdateReport&quot;"/>
            <EdgeParameter value="target"/>
            <EdgeParameter value="messageReport"/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Code>System.out.println(getName() + " Received DestroyedTarget");</Code>
        <Coordinate x="440" y="420"/>
    </Event>
    <Event name="PrepareRadioMessage">
        <Comment>Prepares the radio communication object for transmission</Comment>
        <Argument name="msgType" type="java.lang.String">
            <Comment>The type of message</Comment>
        </Argument>
        <Argument name="msgContext" type="diskit.Mover3D">
            <Comment>The context of the message</Comment>
        </Argument>
        <Argument name="msgText" type="java.lang.String">
            <Comment>The text of the message</Comment>
        </Argument>
        <Argument name="msgSender" type="diskit.Mover3D">
            <Comment>The sender of the message</Comment>
        </Argument>
        <StateTransition state="radioMsg">
            <Operation method="setType(msgType)"/>
        </StateTransition>
        <StateTransition state="radioMsg">
            <Operation method="setContext(msgContext)"/>
        </StateTransition>
        <StateTransition state="radioMsg">
            <Operation method="setMessage(msgText)"/>
        </StateTransition>
        <Schedule condition="msgSender == this" delay="0" event="SendRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="radioMsg"/>
        </Schedule>
        <Code/>
        <Coordinate x="470" y="330"/>
    </Event>
    <Event name="SendRadioMessage">
        <Comment>Transmits a radio message through the scenario manager</Comment>
        <Argument name="radioCommunication" type="diskit.RadioCommunication">
            <Comment>The message to transmit</Comment>
        </Argument>
        <Code/>
        <Coordinate x="510" y="410"/>
    </Event>
</SimEntity>

