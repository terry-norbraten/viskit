<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<SimEntity author="pjsulliv" extend="diskit.FriendlyForce" name="RHIBDevelopment" package="diskit" version="1.0" xsi:noNamespaceSchemaLocation="http://diana.gl.nps.navy.mil/Simkit/simkit.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Comment>A US Navy RHIB (Rigid Hull Inflatable Boat) typically found on DDG51, CG47, and FFG7 class US Navy Ships.  RHIB's are manned by ships company with a crew of two to four personnel.  In foreign ports these platforms are a primary resource for harbor patrol.
NOTE: Visual perception and communications are behaviors representing the personnel onboard the craft and not the craft itself.  As such, this event graph should not be used for Unmanned Surface Vehicles (USVs).</Comment>
    <Parameter name="startPosition" type="diskit.Vec3d">
        <Comment>Must be different then the first waypoint</Comment>
    </Parameter>
    <Parameter name="maxSpeed" type="double">
        <Comment>Maximum speed of this craft</Comment>
    </Parameter>
    <Parameter name="moverID" type="int">
        <Comment>ESPDU unique id Number [0 - 999]</Comment>
    </Parameter>
    <StateVariable name="visualPerception" type="diskit.Sensor">
        <Comment>Visual sense of RHIB crew</Comment>
    </StateVariable>
    <StateVariable name="visualRange" type="double">
        <Comment>Visual Range for the crew</Comment>
    </StateVariable>
    <StateVariable name="avoidanceRange" type="double">
        <Comment>Proximity tolerance for this contact. Will maneuver to avoid objects that will breach this range</Comment>
    </StateVariable>
    <StateVariable name="tacticalMode" type="diskit.TacticalMode">
        <Comment>Tactical State that the RHIB is in (e.g. Patrolling, Intercepting)</Comment>
    </StateVariable>
    <StateVariable name="patrolManager" type="diskit.ZoneMoverManager">
        <Comment>Mover manager that manages entity movement based on diskit.ZoneGeometry patrol zones</Comment>
    </StateVariable>
    <StateVariable name="waypointGenerator" type="diskit.WaypointCreator">
        <Comment>Generates waypoints based on the diskit.ZoneGeometry for this entity</Comment>
    </StateVariable>
    <StateVariable name="obstacleQueue" type="diskit.ObstacleQueue">
        <Comment>Stores and sorts obstacles based on proximity</Comment>
    </StateVariable>
    <StateVariable name="targetQueue" type="diskit.TargetQueue">
        <Comment>Stores and sorts targets based on proximity</Comment>
    </StateVariable>
    <StateVariable name="successfulIntercepts" type="int">
        <Comment>DATA: Total number of successful intercepts</Comment>
    </StateVariable>
    <StateVariable name="unsuccessfulIntercepts" type="int">
        <Comment>DATA: Total number of successful intercepts</Comment>
    </StateVariable>
    <StateVariable name="speed" type="double">
        <Comment>DATA: Average Speed of this entity</Comment>
    </StateVariable>
    <StateVariable name="contactIDs" type="int">
        <Comment>DATA: Total number of contacts ID'd</Comment>
    </StateVariable>
    <StateVariable name="canIntercept" type="boolean">
        <Comment>Whether or not entity can catch up to contact</Comment>
    </StateVariable>
    <StateVariable name="missedIDs" type="int">
        <Comment>DATA: Total number of missed IDs due to distance</Comment>
    </StateVariable>
    <StateVariable name="distanceFromMissedAttacker" type="double">
        <Comment>DATA: Distance from attacker at time of successful attack</Comment>
    </StateVariable>
    <StateVariable name="destination" type="diskit.Vec3d">
        <Comment>This entities current destination</Comment>
    </StateVariable>
    <StateVariable name="calc" type="diskit.util.MovementCalculator">
        <Comment>Calculates intercept and avoidance</Comment>
    </StateVariable>
    <StateVariable name="idAttempts" type="int">
        <Comment>number of times it should take to id a contact</Comment>
    </StateVariable>
    <StateVariable name="amm" type="diskit.AvoidanceMoverManager">
        <Comment>MoverManager for avoiding collision</Comment>
    </StateVariable>
    <Event name="Run">
        <Comment>Initializes all state variables for each simulation run.</Comment>
        <StateTransition state="visualRange">
            <Assignment value="600"/>
        </StateTransition>
        <StateTransition state="avoidanceRange">
            <Assignment value="10"/>
        </StateTransition>
        <StateTransition state="successfulIntercepts">
            <Assignment value="0"/>
        </StateTransition>
        <StateTransition state="unsuccessfulIntercepts">
            <Assignment value="0"/>
        </StateTransition>
        <StateTransition state="speed">
            <Assignment value="0.0"/>
        </StateTransition>
        <StateTransition state="contactIDs">
            <Assignment value="0"/>
        </StateTransition>
        <StateTransition state="canIntercept">
            <Assignment value="false"/>
        </StateTransition>
        <StateTransition state="missedIDs">
            <Assignment value="0"/>
        </StateTransition>
        <StateTransition state="distanceFromMissedAttacker">
            <Assignment value="0"/>
        </StateTransition>
        <StateTransition state="obstacleQueue">
            <Assignment value="new diskit.ObstacleQueue(getLocation())"/>
        </StateTransition>
        <StateTransition state="targetQueue">
            <Assignment value="new diskit.TargetQueue(getLocation())"/>
        </StateTransition>
        <Code/>
        <Coordinate x="10" y="10"/>
    </Event>
    <Event name="Init">
        <Comment>Used by diskit.ScenarioManager to register all entities</Comment>
        <Argument name="entity" type="simkit.SimEntity">
            <Comment>Entity being initialized</Comment>
        </Argument>
        <StateTransition state="visualPerception">
            <Assignment value="new diskit.SphereCutterSensor(this, visualRange)"/>
        </StateTransition>
        <StateTransition state="calc">
            <Assignment value="new diskit.util.MovementCalculator(this)"/>
        </StateTransition>
        <Schedule condition="entity == this" delay="0.0" event="RegisterTarget" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="RegisterSensor" priority="0">
            <Comment/>
            <EdgeParameter value="visualPerception"/>
        </Schedule>
        <Code/>
        <Coordinate x="10" y="80"/>
    </Event>
    <Event name="RegisterTarget">
        <Comment>Registers this mover with the simulation</Comment>
        <Argument name="m" type="diskit.Mover3D">
            <Comment>This mover being registered</Comment>
        </Argument>
        <Code/>
        <Coordinate x="90" y="80"/>
    </Event>
    <Event name="RegisterSensor">
        <Comment>Registers this entity's sensor with the simulation. Also registers a SimEventListener between this mover and its sensor</Comment>
        <Argument name="s" type="diskit.Sensor">
            <Comment>This entities Sensor</Comment>
        </Argument>
        <StateTransition state="visualPerception">
            <Operation method="addSimEventListener(this)"/>
        </StateTransition>
        <Code/>
        <Coordinate x="10" y="170"/>
    </Event>
    <Event name="CreateZones">
        <Comment>Listens to diskit.SceneZoneCreator to get Patrol Zone responsibilities</Comment>
        <Argument name="zones" type="diskit.ZoneGeometry[]">
            <Comment>Zones for this simulation</Comment>
        </Argument>
        <LocalVariable name="zoneReader" type="diskit.ZoneReader" value="new diskit.ZoneReader(moverID, zones)">
            <Comment>Reads Zones for only those that are for this entity</Comment>
        </LocalVariable>
        <LocalVariable name="myPatrol" type="diskit.ZoneGeometry[]" value="zoneReader.getMyPatrol()">
            <Comment>Returns this entities patrol zones</Comment>
        </LocalVariable>
        <StateTransition state="waypointGenerator">
            <Assignment value="new diskit.WaypointCreator(myPatrol)"/>
        </StateTransition>
        <StateTransition state="patrolManager">
            <Assignment value="new diskit.ZoneMoverManager(this, waypointGenerator, avoidanceRange)"/>
        </StateTransition>
        <Schedule event="Patrol"/>
        <Code/>
        <Coordinate x="40" y="580"/>
    </Event>
    <Event name="Patrol">
        <Comment>Patrolling behavior for this entity. Speed is random and always less than the max speed</Comment>
        <LocalVariable name="rn" type="java.util.Random" value="new Random()">
            <Comment>Pseudorandom number generator for fluxuating speeds and times between patrol movements</Comment>
        </LocalVariable>
        <LocalVariable name="currentSpeed" type="double" value="maxSpeed * rn.nextDouble()">
            <Comment>creates a crusing speed between zero and the max speed of this craft</Comment>
        </LocalVariable>
        <LocalVariable name="waypoint" type="diskit.Vec3d" value="waypointGenerator.createWaypoint()">
            <Comment>Provides a waypoint within the geometry specified</Comment>
        </LocalVariable>
        <LocalVariable name="startPosition" type="diskit.Vec3d" value="waypointGenerator.createWaypoint()">
            <Comment>Start somewhere different each time</Comment>
        </LocalVariable>
        <StateTransition state="speed">
            <Assignment value="currentSpeed"/>
        </StateTransition>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.PATROLLING"/>
        </StateTransition>
        <Code>setCruisingSpeed(maxSpeed/2);
setStartPosition(startPosition);
setDestination(waypoint);

//System.out.println("doPatrol Event:");
//System.out.println("Heading to: " + waypoint);</Code>
        <Coordinate x="140" y="580"/>
    </Event>
    <Event name="Detection">
        <Comment>The Sensor of this entity has detected a contact</Comment>
        <Argument name="sensor" type="diskit.Sensor">
            <Comment>The sensor of the contact detected</Comment>
        </Argument>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>The contact detected</Comment>
        </Argument>
        <LocalVariable name="entityID" type="int" value="contact.getMoverID()">
            <Comment>Find out the id# of this entity for comparison</Comment>
        </LocalVariable>
        <LocalVariable name="interceptOffset" type="double" value="avoidanceRange * 2">
            <Comment>Stay outside the contacts avoidance range for routine intercept</Comment>
        </LocalVariable>
        <Schedule condition="3&gt;7 &amp;&amp; (!tacticalMode.equals(diskit.TacticalMode.INTERCEPTING) || !tacticalMode.equals(diskit.TacticalMode.INTERDICTING))" delay="0.0" event="AssessObstacle" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Schedule condition="!friendlyForces.contains(entityID)  &amp;&amp; calc.canIntercept(contact, interceptOffset)" delay="0.0" event="Intercept" priority="0">
            <Comment>Check to see if contact is a friend, if not, close contact for ID</Comment>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Code>contact.addSimEventListener(this);</Code>
        <Coordinate x="170" y="210"/>
    </Event>
    <Event name="EvaluateContact">
        <Comment>Intercept is possible, proceeds to contact to make an evaluation</Comment>
        <Argument name="idIdx" type="int">
            <Comment>Creates time loop for doing an ID</Comment>
        </Argument>
        <LocalVariable name="target" type="diskit.Mover3D" value="targetQueue.closest()">
            <Comment/>
        </LocalVariable>
        <StateTransition state="idAttempts">
            <Assignment value="idAttempts + 1"/>
        </StateTransition>
        <Schedule condition="idAttempts &lt; 40" delay="4" event="EvaluateContact" priority="0">
            <Comment/>
            <EdgeParameter value="idAttempts"/>
        </Schedule>
        <Schedule condition="idAttempts == 40" delay="0.0" event="IDContact" priority="0">
            <Comment/>
        </Schedule>
        <Code>System.out.println("RHIB doEvaluateContact");
setCruisingSpeed(4.5); 
//stop();
setStartPosition(getLocation());
setDestination(target.getLocation());
//System.out.println("Intercept Complete");
//System.out.println(target.getCruisingSpeed());
//System.out.println(target.getDestination());</Code>
        <Coordinate x="370" y="110"/>
    </Event>
    <Event name="Interdict">
        <Comment/>
        <Schedule condition="3&gt;7" delay="0.0" event="EndIntercept" priority="0">
            <Comment/>
        </Schedule>
        <Code>setCruisingSpeed(0);</Code>
        <Coordinate x="570" y="290"/>
    </Event>
    <Event name="ClearExclusionZone">
        <Comment/>
        <Schedule event="Escort"/>
        <Code/>
        <Coordinate x="660" y="200"/>
    </Event>
    <Event name="Escort">
        <Comment/>
        <Schedule event="EndEscort"/>
        <Code/>
        <Coordinate x="660" y="300"/>
    </Event>
    <Event name="AssessObstacle">
        <Comment/>
        <Argument name="obstacle" type="diskit.Mover3D">
            <Comment>Mover that is a potential obstacle</Comment>
        </Argument>
        <StateTransition state="calc">
            <Operation method="checkCollision(obstacle, visualPerception, avoidanceRange)"/>
        </StateTransition>
        <Schedule condition="calc.willCollide()" delay="0.0" event="AvoidObstacle" priority="0">
            <Comment/>
            <EdgeParameter value="obstacle"/>
        </Schedule>
        <Code>System.out.println("Avoiding Obstacle");</Code>
        <Coordinate x="280" y="300"/>
    </Event>
    <Event name="AvoidObstacle">
        <Comment>Uses diskit.AvoidanceMoverManager to stop the normal MoverManager, perform the avoidance based on the diskit.util.MovementCalculator calculations, and then allows the normal mover manager to take over after the contact is avoided. AvoidanceMoverManager accepts both the avoidance point and the current mover manager as arguments</Comment>
        <Argument name="obstacle" type="diskit.Mover3D">
            <Comment>Obstacle to avoid</Comment>
        </Argument>
        <LocalVariable name="avoidancePoint" type="diskit.Vec3d" value="calc.getCollisionAvoidance(obstacle)">
            <Comment>The point this mover should go to to avoid collision</Comment>
        </LocalVariable>
        <StateTransition state="amm">
            <Assignment value="new diskit.AvoidanceMoverManager(this)"/>
        </StateTransition>
        <StateTransition state="amm">
            <Operation method="avoidToOffset(avoidancePoint, patrolManager)"/>
        </StateTransition>
        <Schedule condition="3&gt;7" delay="0.0" event="ResumePatrol" priority="0">
            <Comment/>
        </Schedule>
        <Code>setStartPosition(getLocation());
System.out.println("Avoiding Obstacle " + obstacle.getMoverID());</Code>
        <Coordinate x="280" y="390"/>
    </Event>
    <Event name="SecurityAlert">
        <Comment/>
        <Argument name="reportedBy" type="diskit.Mover3D">
            <Comment>Contact making Security Alert report</Comment>
        </Argument>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>Contact that prompted the security alert</Comment>
        </Argument>
        <Code/>
        <Coordinate x="470" y="30"/>
    </Event>
    <Event name="ResumePatrol">
        <Comment/>
        <Schedule event="Patrol"/>
        <Code/>
        <Coordinate x="470" y="580"/>
    </Event>
    <Event name="EndEscort">
        <Comment/>
        <Schedule event="ResumePatrol"/>
        <Code/>
        <Coordinate x="660" y="380"/>
    </Event>
    <Event name="EndIntercept">
        <Comment/>
        <Schedule event="ResumePatrol"/>
        <Code/>
        <Coordinate x="570" y="380"/>
    </Event>
    <Event name="Intercept">
        <Comment>Gets the intercept point and determines if intercept is possible based on speed of contact and max speed of this entity</Comment>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>Contact being evaluated</Comment>
        </Argument>
        <LocalVariable name="interceptPoint" type="diskit.Vec3d" value="calc.getInterceptPoint()">
            <Comment>Get the intercept point</Comment>
        </LocalVariable>
        <LocalVariable name="timeToIntercept" type="double" value="calc.getInterceptTime()">
            <Comment>Get the amount of time that it will take to intercept this contact</Comment>
        </LocalVariable>
        <LocalVariable name="c" type="diskit.Mover3D" value="contact">
            <Comment/>
        </LocalVariable>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.INTERCEPTING"/>
        </StateTransition>
        <StateTransition state="targetQueue">
            <Operation method="add(contact)"/>
        </StateTransition>
        <StateTransition state="idAttempts">
            <Assignment value="0"/>
        </StateTransition>
        <Schedule condition="true" delay="timeToIntercept" event="EvaluateContact" priority="0">
            <Comment/>
            <EdgeParameter value="idAttempts"/>
        </Schedule>
        <Cancel condition="true" event="AssessObstacle">
            <Comment>If you are Identifying a contact you will not avoid it, you will intercept it</Comment>
        </Cancel>
        <Code>System.out.println("RHIB doIntercept");
setCruisingSpeed(getMaxSpeed());
setStartPosition(getLocation());
setDestination(interceptPoint);
/*
System.out.println("***Simulation Time ***");
System.out.println(Schedule.getSimTime());
System.out.println("----------EVENT------------");
System.out.println("RHIB Intercepting: " + contact.getMoverID());
System.out.println("Intercepting to:     " + interceptPoint);
System.out.println("Time To Intercept: " + timeToIntercept + "\n");
*/</Code>
        <Coordinate x="280" y="110"/>
    </Event>
    <Event name="IDContact">
        <Comment/>
        <Schedule condition="3 &gt; 7" delay="0.0" event="SecurityAlert" priority="0">
            <Comment/>
        </Schedule>
        <Schedule event="ResumePatrol"/>
        <Code>setStartPosition(getLocation());
System.out.println("RHIB doIDContact");</Code>
        <Coordinate x="470" y="200"/>
    </Event>
    <Event name="Evade">
        <Comment/>
        <Argument name="runningFrom" type="diskit.Mover3D"/>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>Contact that is running away</Comment>
        </Argument>
        <LocalVariable name="interceptOffset" type="int" value="0">
            <Comment>Trying to block contact from proceeding</Comment>
        </LocalVariable>
        <Schedule condition="runningFrom == this" delay="0.0" event="SecurityAlert" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Schedule condition="calc.canIntercept(contact, interceptOffset)" delay="0.0" event="PursueHostile" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Schedule condition="!calc.canIntercept(contact, interceptOffset)" delay="0.0" event="StandOff" priority="0">
            <Comment/>
        </Schedule>
        <Cancel event="EvaluateContact"/>
        <Code>System.out.println("RHIB detected Evasion");</Code>
        <Coordinate x="570" y="110"/>
    </Event>
    <Event name="PursueHostile">
        <Comment/>
        <Argument name="contact" type="diskit.Mover3D"/>
        <LocalVariable name="interdictPoint" type="diskit.Vec3d" value="calc.getInterceptPoint()">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="timeToInterdict" type="double" value="calc.getInterceptTime()">
            <Comment/>
        </LocalVariable>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.INTERDICTING"/>
        </StateTransition>
        <Schedule condition="true" delay="timeToInterdict" event="Interdict" priority="0">
            <Comment/>
        </Schedule>
        <Cancel event="IDContact"/>
        <Code>setCruisingSpeed(getMaxSpeed());
setStartPosition(getLocation());
setDestination(interdictPoint);
System.out.println(moverID + " is Pursuing");</Code>
        <Coordinate x="570" y="200"/>
    </Event>
    <Event name="StandOff">
        <Comment/>
        <Code>setCruisingSpeed(0);
setStartPosition(getLocation());</Code>
        <Coordinate x="660" y="110"/>
    </Event>
    <Code>/**
 *		PATROL RESPONSIBILITY ASSIGNMENTS: 
 *This craft relies on diskit.ZoneGeometry patrol zones to determine where it is supposed to patrol and the 
 * frequency that it should visit various patrol areas.  As a result this event graph must have a 
 * SimEventListener connection to a SceneZoneCreator object in the assembly.  The SceneZoneCreator notifies
 * all listeners of the patrol zones that are of interest to them.
 */


</Code>
</SimEntity>

