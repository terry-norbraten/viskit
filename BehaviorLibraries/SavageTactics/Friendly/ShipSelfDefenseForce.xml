<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<SimEntity author="pjsulliv" extend="diskit.FriendlyForce" name="ShipSelfDefenseForce" package="Friendly" version="1.0" xsi:noNamespaceSchemaLocation="http://diana.gl.nps.navy.mil/Simkit/simkit.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Comment>A defense force person (originally authored to model Small Craft Attack Team (SCAT) members who man crew served weapon mounts for waterside force protection in port and underway). 

This entity receives a layout of the ship from it's parent ship which is in the form of an AStarZoneMap.  All entities are initially hidden (inside the ship) unless they are ordered to man their weapons.  Upon receiving the order they use the map of the ship to figure out how to get to their weapons.  

Once manned they will not fire until they receive the order from their ship.  This communication is passed via shared events between the military ship and this entity</Comment>
    <Parameter name="moverID" type="int">
        <Comment>Unique DIS entity ID number</Comment>
    </Parameter>
    <Parameter name="entityDefinition" type="diskit.SMAL.EntityDefinition">
        <Comment>The SMAL entity definition for this entity</Comment>
    </Parameter>
    <Parameter name="weaponAssignment" type="java.lang.String">
        <Comment>The weapon location where this person is assigned (i.e. PORTBOW)</Comment>
    </Parameter>
    <Parameter name="responseTime" type="diskit.random.RandomVariateInstantiator">
        <Comment>The time it takes from the order to man the weapon to when the weapon is ready to fire</Comment>
    </Parameter>
    <StateVariable name="visualPerception" type="diskit.Sensor">
        <Comment>Sensor object that processes all targets in the state space before attacking</Comment>
    </StateVariable>
    <StateVariable name="waypointCreator" type="diskit.WaypointCreator">
        <Comment>The utility that creates waypoints based on the arguments passed</Comment>
    </StateVariable>
    <StateVariable name="targetQueue" type="diskit.TargetQueue">
        <Comment>The queue of active targets for this entity</Comment>
    </StateVariable>
    <StateVariable name="tacticalMode" type="diskit.TacticalMode">
        <Comment>The current tactical mode of this entity</Comment>
    </StateVariable>
    <StateVariable name="calc" type="diskit.util.MovementCalculator">
        <Comment>A utility class that performs 3D vector math calculations</Comment>
    </StateVariable>
    <StateVariable name="visualRange" type="double">
        <Comment>Visual range for this entity</Comment>
    </StateVariable>
    <StateVariable name="layout" type="diskit.AStarZoneMap">
        <Comment>A map of the environment that contains the collection of search nodes for path finding</Comment>
    </StateVariable>
    <StateVariable name="aStarSearch" type="diskit.AStarSearch">
        <Comment>The A* search implementation that is used for path finding</Comment>
    </StateVariable>
    <StateVariable name="startZone" type="diskit.AStarZoneGeometry">
        <Comment>The zone from which the terrorist should start</Comment>
    </StateVariable>
    <StateVariable name="goalZone" type="diskit.AStarZoneGeometry">
        <Comment>The area where this terrorist should head towards to execute it's tactics</Comment>
    </StateVariable>
    <StateVariable name="zoneMoverManager" type="diskit.ZoneMoverManager">
        <Comment>The primary mover for this entity, moves using A* search zone geometry</Comment>
    </StateVariable>
    <StateVariable name="patrolStartWaypoint" type="diskit.Vec3d">
        <Comment>The waypoint selected to start the next leg of the patrol</Comment>
    </StateVariable>
    <StateVariable name="speedScalar" type="double">
        <Comment>The default speed scale for this entity</Comment>
    </StateVariable>
    <StateVariable name="timeToManWeapon" type="double">
        <Comment>[DATA] The time it takes to man this weapon</Comment>
    </StateVariable>
    <StateVariable name="mannedAndReady" type="boolean">
        <Comment>True when this weapon is manned and ready, required for the weapon to be shot</Comment>
    </StateVariable>
    <StateVariable name="batteriesReleased" type="boolean">
        <Comment>Whether this entity has batteries release and can shoot at a hostile contact</Comment>
    </StateVariable>
    <StateVariable name="hostile" type="diskit.Mover3D">
        <Comment>The target that this entity should shoot at</Comment>
    </StateVariable>
    <StateVariable name="shipBoardRadio" type="diskit.RadioCommunication">
        <Comment>The radio circuit used by this entity</Comment>
    </StateVariable>
    <StateVariable name="shipBoardRadioChannel" type="int">
        <Comment>The radio channel that this entity should use to communicate with its parent, value is received from the parent unit</Comment>
    </StateVariable>
    <StateVariable name="parentUnit" type="diskit.Mover3D">
        <Comment>The unit that has tactical control over this entity</Comment>
    </StateVariable>
    <StateVariable name="atSecurityAlert" type="boolean">
        <Comment>Whether or not this person is at security alert</Comment>
    </StateVariable>
    <Event name="Run">
        <Comment>Represents the reseting features and initial events for this entity. State variables are reset to the desired state at the start of each simulation run</Comment>
        <StateTransition state="visualRange">
            <Assignment value="100"/>
        </StateTransition>
        <Code/>
        <Coordinate x="90" y="10"/>
    </Event>
    <Event name="Init">
        <Comment/>
        <Argument name="entity" type="simkit.SimEntity"/>
        <StateTransition state="visualPerception">
            <Assignment value="new diskit.SphereCutterSensor(this, visualRange)"/>
        </StateTransition>
        <StateTransition state="targetQueue">
            <Assignment value="new diskit.TargetQueue(startPosition)"/>
        </StateTransition>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.TRANSITING"/>
        </StateTransition>
        <StateTransition state="atSecurityAlert">
            <Assignment value="false"/>
        </StateTransition>
        <Schedule condition="entity == this" delay="0.0" event="RegisterTarget" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="RegisterSensor" priority="0">
            <Comment/>
            <EdgeParameter value="visualPerception"/>
        </Schedule>
        <Code/>
        <Coordinate x="20" y="10"/>
    </Event>
    <Event name="RegisterTarget">
        <Comment/>
        <Argument name="mover" type="diskit.Mover3D"/>
        <Code/>
        <Coordinate x="90" y="100"/>
    </Event>
    <Event name="RegisterSensor">
        <Comment/>
        <Argument name="sensor" type="diskit.Sensor"/>
        <Code/>
        <Coordinate x="20" y="100"/>
    </Event>
    <Event name="SecurityAlert">
        <Comment>Represents the passing of Security alert which prompts this agent to man it's weapon station</Comment>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>The contact that caused the security alert</Comment>
        </Argument>
        <StateTransition state="timeToManWeapon">
            <Assignment value="responseTime.generate()"/>
        </StateTransition>
        <StateTransition state="hostile">
            <Assignment value="contact"/>
        </StateTransition>
        <StateTransition state="atSecurityAlert">
            <Assignment value="true"/>
        </StateTransition>
        <Schedule condition="true" delay="timeToManWeapon" event="MannedAndReady" priority="0">
            <Comment/>
        </Schedule>
        <Code/>
        <Coordinate x="180" y="200"/>
    </Event>
    <Event name="Fire">
        <Comment>Marks when this entity starts shooting at the contact</Comment>
        <Argument name="shooter" type="diskit.Mover3D">
            <Comment>This entity as the shooter</Comment>
        </Argument>
        <Argument name="target" type="diskit.Mover3D">
            <Comment>The mover that this entity is shooting at</Comment>
        </Argument>
        <Code/>
        <Coordinate x="330" y="200"/>
    </Event>
    <Event name="BatteriesReleased">
        <Comment>Passes the authority to shoot at a contact as determined by the parent unit</Comment>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>The contact who is the desired target</Comment>
        </Argument>
        <LocalVariable name="haveTargetVisual" type="boolean" value="targetQueue.contains(contact)">
            <Comment>Whether or not this target is in visual range</Comment>
        </LocalVariable>
        <LocalVariable name="fireReport" type="java.lang.String" value="weaponAssignment + &quot; Firing&quot;">
            <Comment>reports that they are firing as ordered</Comment>
        </LocalVariable>
        <StateTransition state="batteriesReleased">
            <Assignment value="true"/>
        </StateTransition>
        <StateTransition state="hostile">
            <Assignment value="contact"/>
        </StateTransition>
        <Schedule condition="mannedAndReady" delay="0.0" event="Fire" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
            <EdgeParameter value="hostile"/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="PrepareRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="&quot;FireReport&quot;"/>
            <EdgeParameter value="hostile"/>
            <EdgeParameter value="fireReport"/>
        </Schedule>
        <Code>//System.out.println("Batteries Released heard in SSDF");</Code>
        <Coordinate x="440" y="200"/>
    </Event>
    <Event name="MannedAndReady">
        <Comment/>
        <LocalVariable name="msgText" type="java.lang.String" value="(weaponAssignment + &quot; is manned and ready!&quot;)">
            <Comment>manned and ready report once they have arrived and are ready</Comment>
        </LocalVariable>
        <Schedule condition="batteriesReleased" delay="0.0" event="Fire" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
            <EdgeParameter value="hostile"/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="PrepareRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="&quot;MannedAndReady&quot;"/>
            <EdgeParameter value="this"/>
            <EdgeParameter value="msgText"/>
        </Schedule>
        <Code/>
        <Coordinate x="250" y="200"/>
    </Event>
    <Event name="WatchPositionAssigned">
        <Comment>Scheduled by the parent unit to establish who this entity belongs to and used by this entity to inform its parent of who this entity is.  This event and the one it schedules are used to create a specific list of radio message recipients for each unit.  Without this event the ship would have to communicate with all friendly forces which is not representative of real world operations.  This entity uses the information received to create a radio communication object and perform a radio check</Comment>
        <Argument name="ship" type="diskit.Mover3D">
            <Comment>The parent unit in charge of this entity</Comment>
        </Argument>
        <Argument name="radioCircuit" type="int">
            <Comment>The radio channel that this entity should use to communicate with its parent</Comment>
        </Argument>
        <StateTransition state="shipBoardRadio">
            <Assignment value="new diskit.RadioCommunication(shipBoardRadioChannel, this)"/>
        </StateTransition>
        <StateTransition state="shipBoardRadio">
            <Operation method="setRecipient(ship)"/>
        </StateTransition>
        <StateTransition state="parentUnit">
            <Assignment value="ship"/>
        </StateTransition>
        <StateTransition state="shipBoardRadio">
            <Operation method="setChannel(radioCircuit)"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="WatchPositionAccepted" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Code/>
        <Coordinate x="180" y="10"/>
    </Event>
    <Event name="WatchPositionAccepted">
        <Comment>Used to advise the parent unit that this entity has received it's assignment, has established a radio communications circuit and is ready to respond to future communications</Comment>
        <Argument name="watchStander" type="diskit.Mover3D">
            <Comment>Passes itself as the watch stander who is ready to respond</Comment>
        </Argument>
        <Code/>
        <Coordinate x="270" y="10"/>
    </Event>
    <Event name="RadioMessageReceived">
        <Comment>A radio communication was transmitted to this entity via the ScenarioManager</Comment>
        <Argument name="msg" type="diskit.RadioCommunication">
            <Comment>The message that was received</Comment>
        </Argument>
        <LocalVariable name="msgType" type="java.lang.String" value="msg.getType()">
            <Comment>The type of message sent</Comment>
        </LocalVariable>
        <LocalVariable name="msgContext" type="diskit.Mover3D" value="msg.getContext()">
            <Comment>The context of the message</Comment>
        </LocalVariable>
        <LocalVariable name="msgRecipient" type="diskit.Mover3D" value="msg.getRecipient()">
            <Comment>The recipient of the message</Comment>
        </LocalVariable>
        <Schedule condition="msgType.equals(&quot;SecurityAlert&quot;) &amp;&amp; !atSecurityAlert &amp;&amp; msgRecipient == this" delay="0.0" event="SecurityAlert" priority="0">
            <Comment/>
            <EdgeParameter value="msgContext"/>
        </Schedule>
        <Schedule condition="msgType.equals(&quot;BatteriesRelease&quot;) &amp;&amp; msgRecipient == this" delay="0.0" event="BatteriesReleased" priority="0">
            <Comment/>
            <EdgeParameter value="msgContext"/>
        </Schedule>
        <Code/>
        <Coordinate x="310" y="70"/>
    </Event>
    <Event name="PrepareRadioMessage">
        <Comment>Prepares a radio message to send</Comment>
        <Argument name="msgType" type="java.lang.String">
            <Comment>The type of message being sent</Comment>
        </Argument>
        <Argument name="msgContext" type="diskit.Mover3D">
            <Comment>The context of the message</Comment>
        </Argument>
        <Argument name="msgText" type="java.lang.String">
            <Comment>The text of the message</Comment>
        </Argument>
        <StateTransition state="shipBoardRadio">
            <Operation method="setType(msgType)"/>
        </StateTransition>
        <StateTransition state="shipBoardRadio">
            <Operation method="setContext(msgContext)"/>
        </StateTransition>
        <StateTransition state="shipBoardRadio">
            <Operation method="setMessage(msgText)"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="SendRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="shipBoardRadio"/>
        </Schedule>
        <Code/>
        <Coordinate x="330" y="310"/>
    </Event>
    <Event name="SendRadioMessage">
        <Comment>Transmits a radio message via the ScenarioManager</Comment>
        <Argument name="msg" type="diskit.RadioCommunication">
            <Comment>The radio message to send</Comment>
        </Argument>
        <Code/>
        <Coordinate x="330" y="420"/>
    </Event>
</SimEntity>

