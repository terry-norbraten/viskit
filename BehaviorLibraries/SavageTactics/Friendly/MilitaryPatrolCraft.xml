<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<SimEntity author="pjsulliv" extend="diskit.FriendlyForce" name="MilitaryPatrolCraft" package="Friendly" version="1.0" xsi:noNamespaceSchemaLocation="http://diana.gl.nps.navy.mil/Simkit/simkit.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Comment>A military patrol craft. This implementation is a basic patrolling pattern where a patrol craft will investigate unknown contacts and interdict perceived
    threats. This graph does not incorporate a complex set of Rules of Engagement, but rather simply patrols an area and attempts to identify all unknown contacts.
    The act of interdiction is accomplished by trying to block the contact with this craft. The overall implementation is based on a US Navy ship's Rigid Hull Inflatable Boat(RHIB) whose primary purpose is to defend a small area and primarily the ships that depend on it's patrol as an extension of the ships self defense posture</Comment>
    <Parameter name="moverID" type="int">
        <Comment>DIS entity ID</Comment>
    </Parameter>
    <Parameter name="entityDefinition" type="diskit.SMAL.EntityDefinition">
        <Comment>The Savage Modeling Analysis Language(SMAL) object that contains all specific information about the model being used</Comment>
    </Parameter>
    <Parameter name="zones" type="diskit.ProbabilityZoneGeometry[]">
        <Comment>General areas from which waypoints should be generated for this entity.</Comment>
    </Parameter>
    <Parameter name="driverReactionTime" type="diskit.random.RandomVariateInstantiator">
        <Comment>The reaction time of the driver to detection events and radio orders</Comment>
    </Parameter>
    <Parameter name="communicationsChannel" type="int">
        <Comment>The communications channel used by this entity</Comment>
    </Parameter>
    <StateVariable name="visualRange" type="double">
        <Comment>The visual range of a human on this platform</Comment>
    </StateVariable>
    <StateVariable name="avoidanceRange" type="double">
        <Comment>Contact proximity tolerance for this entity, used for collision avoidance</Comment>
    </StateVariable>
    <StateVariable name="visualPerception" type="diskit.Sensor">
        <Comment>The visual perception of a human on this platform</Comment>
    </StateVariable>
    <StateVariable name="collisionDetection" type="diskit.Sensor">
        <Comment>A collision avoidance sensor for this platform</Comment>
    </StateVariable>
    <StateVariable name="activeMoverManager" type="diskit.MoverManager">
        <Comment>The mover manager that is currently being used. Primarily used for swapping between mover manager types</Comment>
    </StateVariable>
    <StateVariable name="zoneMoverManager" type="diskit.ZoneMoverManager">
        <Comment>[Primary] mover manager used to transit in designated areas defined by the 'zones' parameter</Comment>
    </StateVariable>
    <StateVariable name="avoidanceMoverManager" type="diskit.AvoidanceMoverManager">
        <Comment>[Secondary] Mover Manager used for avoidance movement</Comment>
    </StateVariable>
    <StateVariable name="interceptMoverManager" type="diskit.InterceptMoverManager">
        <Comment>[Not used] Mover Manager that executes an interception</Comment>
    </StateVariable>
    <StateVariable name="pathMoverManager" type="diskit.PathMoverManager">
        <Comment>[Not used] Mover Manager that moves in a predetermined path</Comment>
    </StateVariable>
    <StateVariable name="waypointCreator" type="diskit.WaypointCreator">
        <Comment>[Mode - Probability] generates waypoints based on 'zones' parameter</Comment>
    </StateVariable>
    <StateVariable name="tacticalMode" type="diskit.TacticalMode">
        <Comment>Tactical Mode of this entity</Comment>
    </StateVariable>
    <StateVariable name="obstacleQueue" type="diskit.ObstacleQueue">
        <Comment>Collection of obstacles for this entity to negotiate</Comment>
    </StateVariable>
    <StateVariable name="speedScale" type="double">
        <Comment>A scalar variable which is applied to the speed of this entity. Variation in the speed scale is set for all entities by the diskit.ScenarioManager. This allows for simulation wide speed up /slow down functionality</Comment>
    </StateVariable>
    <StateVariable name="nauticalChart" type="diskit.AStarZoneMap">
        <Comment>The nautical chart object received from the scenario manager</Comment>
    </StateVariable>
    <StateVariable name="targetQueue" type="diskit.TargetQueue">
        <Comment>Stores and sorts targets based on proximity</Comment>
    </StateVariable>
    <StateVariable name="contactPicture" type="diskit.ContactPicture">
        <Comment>List of all contacts in this entities contact picture</Comment>
    </StateVariable>
    <StateVariable name="successfulIntercepts" type="int">
        <Comment>[DATA] Total number of successful intercepts</Comment>
    </StateVariable>
    <StateVariable name="speed" type="double">
        <Comment>[DATA] Used to collect speed statistics for this entity</Comment>
    </StateVariable>
    <StateVariable name="contactIDs" type="int">
        <Comment>[DATA] Total number of contacts ID'd</Comment>
    </StateVariable>
    <StateVariable name="distanceFromMissedAttacker" type="double">
        <Comment>[DATA] Distance from attacker at time of successful attack</Comment>
    </StateVariable>
    <StateVariable name="radioCommunication" type="diskit.RadioCommunication">
        <Comment>A radio communication template used to construct and transmit radio messages through the scenario manager</Comment>
    </StateVariable>
    <StateVariable name="responseFromContact" type="boolean">
        <Comment>Whether or not a contact that has been called on the radio has answered</Comment>
    </StateVariable>
    <StateVariable name="timeSpentIntercepting" type="double">
        <Comment>[DATA] The time it takes to intercept a contact</Comment>
    </StateVariable>
    <StateVariable name="driverResponseTime" type="double">
        <Comment>[DATA] The response time of the driver</Comment>
    </StateVariable>
    <Event name="Run">
        <Comment>The run event sets the parameter values for each simulation run</Comment>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.TRANSITING"/>
        </StateTransition>
        <StateTransition state="zoneMoverManager">
            <Assignment value="null"/>
        </StateTransition>
        <StateTransition state="avoidanceMoverManager">
            <Assignment value="null"/>
        </StateTransition>
        <StateTransition state="obstacleQueue">
            <Assignment value="new diskit.ObstacleQueue(getLocation())"/>
        </StateTransition>
        <StateTransition state="speedScale">
            <Assignment value="1.0"/>
        </StateTransition>
        <StateTransition state="responseFromContact">
            <Assignment value="false"/>
        </StateTransition>
        <StateTransition state="timeSpentIntercepting">
            <Assignment value="0"/>
        </StateTransition>
        <Schedule condition="zones.length &gt; 0" delay="0.0" event="ProcessZones" priority="0">
            <Comment>If zones have been specified, schedule movement setup events</Comment>
        </Schedule>
        <Code/>
        <Coordinate x="210" y="10"/>
    </Event>
    <Event name="Init">
        <Comment>An initialization event that is scheduled by diskit.SMALMover3D to initialize it's subclasses. The event creates sensor objects and registers this mover and it's sensors with the diskit.ScenarioManager.</Comment>
        <Argument name="entity" type="simkit.SimEntity">
            <Comment>The entity that is being initialized, passed as an argument from diskit.SMALMover3D</Comment>
        </Argument>
        <StateTransition state="avoidanceRange">
            <Assignment value="getEntityDefinition().getLength() * 1.5"/>
        </StateTransition>
        <StateTransition state="visualRange">
            <Assignment value="600"/>
        </StateTransition>
        <StateTransition state="visualPerception">
            <Assignment value="new diskit.SphereCutterSensor(this, visualRange)"/>
        </StateTransition>
        <StateTransition state="collisionDetection">
            <Assignment value="new diskit.SphereCutterSensor(this, avoidanceRange)"/>
        </StateTransition>
        <StateTransition state="contactPicture">
            <Operation method="clear()"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Assignment value="new diskit.RadioCommunication(communicationsChannel, this)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setRecipients(friendlyForceList)"/>
        </StateTransition>
        <Schedule condition="entity == this" delay="0.0" event="RegisterTarget" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Schedule condition="zones.length == 0" delay="0.0" event="RegisterSensor" priority="0">
            <Comment>Only register the visualSensor if this entity is not moving</Comment>
            <EdgeParameter value="visualPerception"/>
        </Schedule>
        <Schedule condition="zones.length &gt; 0" delay="0.0" event="BuildSensorArray" priority="0">
            <Comment>If this zone is moving register all sensors</Comment>
        </Schedule>
        <Code/>
        <Coordinate x="10" y="10"/>
    </Event>
    <Event name="ApplySpeedScale">
        <Comment>This event is scheduled by the diskit.ScenarioManager. All entities that have this event in their graph will adjust their speed values by the speed scale which will be applied throughout the entire simulation. Scheduling of this event occurs as part of the 'doRegisterTarget' process in diskit.ScenarioManager.</Comment>
        <Argument name="speedScaleChange" type="double">
            <Comment>The uniform speed scale change for this simulation</Comment>
        </Argument>
        <StateTransition state="speedScale">
            <Assignment value="speedScaleChange"/>
        </StateTransition>
        <Code/>
        <Coordinate x="100" y="220"/>
    </Event>
    <Event name="RegisterTarget">
        <Comment>Registers this mover with the diskit.ScenarioManager</Comment>
        <Argument name="mover" type="diskit.Mover3D">
            <Comment>This object should pass itself as an argument to this event as part of the registration process</Comment>
        </Argument>
        <Code/>
        <Coordinate x="100" y="10"/>
    </Event>
    <Event name="RegisterSensor">
        <Comment>If this entity is not moving (e.g. no probability zones) only the visual sensor is registered with this simulation</Comment>
        <Argument name="sensor" type="diskit.Sensor">
            <Comment>The visual sensor for this entity</Comment>
        </Argument>
        <Code/>
        <Coordinate x="100" y="80"/>
    </Event>
    <Event name="RegisterSensors">
        <Comment>Registers the complete sensor array if and only if this entity has at least one probability zone</Comment>
        <Argument name="sensors" type="diskit.Sensor[]">
            <Comment>The complete collection of sensors for this entity</Comment>
        </Argument>
        <Code/>
        <Coordinate x="100" y="150"/>
    </Event>
    <Event name="ProcessZones">
        <Comment>This event creates waypoint creator and mover manager objects with the zones that were included as a parameter to this graph. If no zones are specificed the movement process will not be scheduled.</Comment>
        <StateTransition state="waypointCreator">
            <Assignment value="new diskit.WaypointCreator(zones)"/>
        </StateTransition>
        <StateTransition state="zoneMoverManager">
            <Assignment value="new diskit.ZoneMoverManager(this, waypointCreator)"/>
        </StateTransition>
        <StateTransition state="activeMoverManager">
            <Assignment value="zoneMoverManager"/>
        </StateTransition>
        <Schedule event="StartMoving"/>
        <Code/>
        <Coordinate x="210" y="90"/>
    </Event>
    <Event name="StartMoving">
        <Comment>Begins the movement of this entity. Continuous movement based on waypoints from the provided zones will continue until the mover manager is changed</Comment>
        <LocalVariable name="initialStartPosition" type="diskit.Vec3d" value="waypointCreator.createWaypoint()">
            <Comment>An initial waypoint in one of the provided zones</Comment>
        </LocalVariable>
        <LocalVariable name="initialDestination" type="diskit.Vec3d" value="waypointCreator.createWaypoint()">
            <Comment>An initial destination selected from one of the zones</Comment>
        </LocalVariable>
        <Code>setMaximumSpeed(getEntityDefinition().getMaximumSpeed() * speedScale);
setStartPosition(initialStartPosition);
setCruiseSpeed(getEntityDefinition().getCruiseSpeed() * speedScale);
setDestination(initialDestination);
start();</Code>
        <Coordinate x="210" y="180"/>
    </Event>
    <Event name="Detection">
        <Comment>A detection event from any sensor that this entity is listening to (e.g. registered with the simulation)</Comment>
        <Argument name="sensor" type="diskit.Sensor">
            <Comment>The sensor that detected another simEntity</Comment>
        </Argument>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>The mover that was detected</Comment>
        </Argument>
        <LocalVariable name="alreadyIDd" type="boolean" value="contactPicture.contains(contact)">
            <Comment>Check to see if this contact is part of the entity's contact picture</Comment>
        </LocalVariable>
        <LocalVariable name="entitySize" type="double" value="contact.getBoundingBox().getArea()">
            <Comment>TODO: Higher fidelity intercept</Comment>
        </LocalVariable>
        <LocalVariable name="canIntercept" type="boolean" value="canIntercept(contact, avoidanceRange)">
            <Comment>Check to see if intercept is possible</Comment>
        </LocalVariable>
        <LocalVariable name="isFriendlyForce" type="boolean" value="friendlyForces.contains(contact.getMoverID())">
            <Comment>Check to see if this is a contact of like forces</Comment>
        </LocalVariable>
        <LocalVariable name="contactSpeed" type="double" value="contact.getEntityDefinition().getMaximumSpeed()">
            <Comment>TODO: Remove this and add an obstacle check, buoys, barriers, etc, will have slow movement</Comment>
        </LocalVariable>
        <StateTransition state="driverResponseTime">
            <Assignment value="driverReactionTime.generate()"/>
        </StateTransition>
        <Schedule condition="sensor == collisionDetection &amp;&amp; (alreadyIDd || isFriendlyForce)" delay="0.0" event="AssessObstacle" priority="0">
            <Comment>If the sensor that detected the mover is the collision detection sensor, process the mover as an obstacle</Comment>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Schedule condition="sensor == visualPerception &amp;&amp;  !isFriendlyForce &amp;&amp; !alreadyIDd &amp;&amp;  contact.getCruiseSpeed() &gt; 0 &amp;&amp;  canIntercept &amp;&amp; tacticalMode != diskit.TacticalMode.INTERCEPTING" delay="0.0" event="Intercept" priority="0">
            <Comment>Evaluate whether this contact should be intercepted and react to it based on the drivers response time</Comment>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Code>/*System.out.println(getName() + " Detected: " + contact.getName());*/</Code>
        <Coordinate x="650" y="110"/>
    </Event>
    <Event name="AssessObstacle">
        <Comment>This event uses diskit.util.MovementCalculator to determine if this entity is going to collide with the obstacle</Comment>
        <Argument name="obstacle" type="diskit.Mover3D">
            <Comment>The mover being evaluated as a potential obstacle</Comment>
        </Argument>
        <LocalVariable name="obstacleToAvoid" type="boolean" value="willCollide(obstacle, collisionDetection, avoidanceRange)">
            <Comment>Method call to diskit.SMALMover3D that uses diskit.util.MovementCalculator to determine if there will be a collision</Comment>
        </LocalVariable>
        <Schedule condition="obstacleToAvoid " delay="0.0" event="AvoidObstacle" priority="0">
            <Comment>If I am going to hit this obstacle, and its bigger then I am (give way vessel simulated) or it's not moving then avoid it</Comment>
            <EdgeParameter value="obstacle"/>
        </Schedule>
        <Code/>
        <Coordinate x="650" y="240"/>
    </Event>
    <Event name="AvoidObstacle">
        <Comment>If a collision will occur avoid the obstacle using the avoidance mover manager. The avoidance mover manager will perform the avoidance and then reset the activeMoverManager to its pre-avoidance value after completing the avoidance maneuver.</Comment>
        <Argument name="obstacle" type="diskit.Mover3D">
            <Comment>The obstacle that must be avoided</Comment>
        </Argument>
        <LocalVariable name="avoidancePoint" type="diskit.Vec3d" value="getAvoidancePoint(obstacle)">
            <Comment>Method call to diskit.SMALMover3D to get the exact avoidance point for this obstacle</Comment>
        </LocalVariable>
        <StateTransition state="avoidanceMoverManager">
            <Assignment value="new diskit.AvoidanceMoverManager(this)"/>
        </StateTransition>
        <StateTransition state="avoidanceMoverManager">
            <Operation method="avoidToOffset(avoidancePoint, getActiveMoverManager())"/>
        </StateTransition>
        <Code>setStartPosition(getLocation());</Code>
        <Coordinate x="650" y="340"/>
    </Event>
    <Event name="BuildSensorArray">
        <Comment>Combines all sensors in an array</Comment>
        <LocalVariable name="multipleSensors" type="diskit.Sensor[]" value="new diskit.Sensor[2]">
            <Comment>Initialized to the maximum number of sensors possible for this object</Comment>
        </LocalVariable>
        <Schedule condition="true" delay="0.0" event="RegisterSensors" priority="0">
            <Comment/>
            <EdgeParameter value="multipleSensors"/>
        </Schedule>
        <Code>multipleSensors[0] = visualPerception;
multipleSensors[1] = collisionDetection;</Code>
        <Coordinate x="10" y="150"/>
    </Event>
    <Event name="AStarZoneMapDistributed">
        <Comment>Recieves a copy of a Utilities.NauticalChart object from the Scenario Manager. When the NauticalChart registers with this simulation the scenario manager schedules a 'doNauticalChartRecieved' event for all movers registered with the simulation.  Only those entities with this exact event will actually receive the nautical chart object. It will be ignored otherwise.</Comment>
        <Argument name="harborChart" type="diskit.AStarZoneMap">
            <Comment>An A* zone map that is used as a nautical chart</Comment>
        </Argument>
        <StateTransition state="nauticalChart">
            <Assignment value="harborChart"/>
        </StateTransition>
        <Code/>
        <Coordinate x="10" y="220"/>
    </Event>
    <Event name="Intercept">
        <Comment>Gets the intercept point and determines if intercept is possible based on speed of contact and maximum speed of this entity</Comment>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>Contact being evaluated</Comment>
        </Argument>
        <LocalVariable name="interceptPoint" type="diskit.Vec3d" value="getInterceptPoint()">
            <Comment>Get the intercept point</Comment>
        </LocalVariable>
        <LocalVariable name="timeToIntercept" type="double" value="getInterceptTime()">
            <Comment>Get the amount of time that it will take to intercept this contact</Comment>
        </LocalVariable>
        <LocalVariable name="contactLocation" type="java.lang.String" value="nauticalChart.findClosestZone(contact.getLocation()).getName()">
            <Comment/>
        </LocalVariable>
        <LocalVariable name="report" type="java.lang.String" value="&quot;All stations this is &quot; + getName() + &quot;.  I am enroute to identify an unknown contact in the vicinity of &quot; + contactLocation + &quot;. Over..&quot;">
            <Comment/>
        </LocalVariable>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.INTERCEPTING"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setMessage(report)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setContext(contact)"/>
        </StateTransition>
        <StateTransition state="responseFromContact">
            <Assignment value="false"/>
        </StateTransition>
        <StateTransition state="timeSpentIntercepting">
            <Assignment value="timeToIntercept"/>
        </StateTransition>
        <Schedule condition="true" delay="timeToIntercept" event="QueryContact" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="SendRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="radioCommunication"/>
        </Schedule>
        <Code>setCruiseSpeed(getMaximumSpeed());
setStartPosition(getLocation());
setDestination(interceptPoint);</Code>
        <Coordinate x="480" y="110"/>
    </Event>
    <Event name="QueryContact">
        <Comment>After completing an intercept this vessel will call the contact on the radio to make an identification and shadow the contacts course and speed</Comment>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>The contact of interest</Comment>
        </Argument>
        <LocalVariable name="contactLocation" type="java.lang.String" value="nauticalChart.findClosestZone(contact.getLocation()).getName()">
            <Comment>The general area of this contact</Comment>
        </LocalVariable>
        <LocalVariable name="query" type="java.lang.String" value="&quot;Unidentified contact in the vicinity of &quot; + contactLocation +&quot;. This is &quot; + getName() + &quot;. Request you identify yourself and your intentions...Over&quot;">
            <Comment/>
        </LocalVariable>
        <StateTransition state="radioCommunication">
            <Operation method="setRecipient(contact)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setType(&quot;Query&quot;)"/>
        </StateTransition>
        <StateTransition state="successfulIntercepts">
            <Assignment value="successfulIntercepts + 1"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setMessage(query)"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="SendRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="radioCommunication"/>
        </Schedule>
        <Schedule condition="!responseFromContact" delay="getDuration()" event="QueryContact" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Code>setStartPosition(getLocation());
setCruiseSpeed(contact.getCruiseSpeed());
setDestination(contact.getDestination());</Code>
        <Coordinate x="370" y="110"/>
    </Event>
    <Event name="IDContact">
        <Comment>Contact has been identified and is not in any exclusion zone. Add to contact picture and make contact report to other friendly forces</Comment>
        <Argument name="identifiedContact" type="diskit.Mover3D">
            <Comment>The contact that was identified</Comment>
        </Argument>
        <LocalVariable name="contactReport" type="java.lang.String" value="&quot;All stations, this is &quot; + getName() + &quot; contact has been identified as a &quot; + identifiedContact.getEntityType()">
            <Comment>Contact report to send to all friendly forces</Comment>
        </LocalVariable>
        <StateTransition state="contactPicture">
            <Operation method="add(identifiedContact)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setRecipients(friendlyForceList)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setContext(identifiedContact)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setType(&quot;ContactReport&quot;)"/>
        </StateTransition>
        <StateTransition state="contactIDs">
            <Assignment value="contactIDs + 1"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setMessage(contactReport)"/>
        </StateTransition>
        <Schedule event="ResumePatrol"/>
        <Schedule condition="true" delay="0.0" event="SendRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="radioCommunication"/>
        </Schedule>
        <Code/>
        <Coordinate x="300" y="300"/>
    </Event>
    <Event name="ResumePatrol">
        <Comment/>
        <LocalVariable name="patrolDestination" type="diskit.Vec3d" value="waypointCreator.createWaypoint()">
            <Comment>Resuming patrol so pick a waypoint</Comment>
        </LocalVariable>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.PATROLLING"/>
        </StateTransition>
        <Code>setStartPosition(getLocation());
setCruiseSpeed(getEntityDefinition().getCruiseSpeed() * speedScale);
setDestination(patrolDestination);</Code>
        <Coordinate x="200" y="300"/>
    </Event>
    <Event name="PursueHostile">
        <Comment/>
        <Schedule event="Interdict"/>
        <Schedule event="StandOff"/>
        <Code/>
        <Coordinate x="300" y="460"/>
    </Event>
    <Event name="StandOff">
        <Comment/>
        <Code/>
        <Coordinate x="380" y="550"/>
    </Event>
    <Event name="Evading">
        <Comment/>
        <Schedule event="PursueHostile"/>
        <Cancel event="Interdict"/>
        <Code/>
        <Coordinate x="300" y="550"/>
    </Event>
    <Event name="Interdict">
        <Comment/>
        <Code/>
        <Coordinate x="220" y="550"/>
    </Event>
    <Event name="SecurityAlert">
        <Comment/>
        <Schedule event="PursueHostile"/>
        <Code/>
        <Coordinate x="300" y="380"/>
    </Event>
    <Event name="SendRadioMessage">
        <Comment/>
        <Argument name="message" type="diskit.RadioCommunication"/>
        <Code/>
        <Coordinate x="420" y="240"/>
    </Event>
    <Event name="RadioMessageReceived">
        <Comment>A radio message was transmitted by the scenario manager to this entity</Comment>
        <Argument name="message" type="diskit.RadioCommunication">
            <Comment>A radio communication object</Comment>
        </Argument>
        <LocalVariable name="messageType" type="java.lang.String" value="message.getType()">
            <Comment>The type of message being received</Comment>
        </LocalVariable>
        <LocalVariable name="sender" type="diskit.Mover3D" value="message.getSender()">
            <Comment>The contact that sent the message</Comment>
        </LocalVariable>
        <LocalVariable name="contact" type="diskit.Mover3D" value="message.getContext()">
            <Comment>The context of this message</Comment>
        </LocalVariable>
        <Schedule condition="sender != this &amp;&amp;  messageType != null &amp;&amp; messageType.equals(&quot;QueryResponse&quot;)" delay="0.0" event="QueryResponseReceived" priority="0">
            <Comment>Response received process the response</Comment>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Code/>
        <Coordinate x="560" y="450"/>
    </Event>
    <Event name="QueryResponseReceived">
        <Comment>When the contact makes a response the radio transmission recieved is processed</Comment>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>The contact that made the response</Comment>
        </Argument>
        <LocalVariable name="reply" type="java.lang.String" value="contact.getName() + &quot; this is &quot; + getName() + &quot;. Thank you for your cooperation, have a good day. Out&quot;">
            <Comment>Basic reply</Comment>
        </LocalVariable>
        <StateTransition state="radioCommunication">
            <Operation method="setRecipient(contact)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setType(&quot;GeneralMessage&quot;)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setMessage(reply)"/>
        </StateTransition>
        <Cancel condition="true" event="QueryContact">
            <Comment>The contact responded so stop evaluating it</Comment>
            <EdgeParameter value="contact"/>
        </Cancel>
        <Schedule condition="true" delay="driverReactionTime.generate()" event="IDContact" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Schedule condition="true" delay="0.0" event="SendRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="radioCommunication"/>
        </Schedule>
        <Code/>
        <Coordinate x="550" y="300"/>
    </Event>
</SimEntity>

