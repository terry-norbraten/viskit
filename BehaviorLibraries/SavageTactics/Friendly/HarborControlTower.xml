<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<SimEntity author="pjsulliv" extend="diskit.FriendlyForce" name="HarborControlTower" package="Friendly" version="1.0" xsi:noNamespaceSchemaLocation="http://diana.gl.nps.navy.mil/Simkit/simkit.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Comment>This behavior was developed for the Pearl Harbor scenario where there is a harbor control tower that is in charge of monitoring all traffic in the harbor.  This is unique to this area since the entire harbor is a restricted area.</Comment>
    <Parameter name="moverID" type="int">
        <Comment>The id number for this mover</Comment>
    </Parameter>
    <Parameter name="entityDefinition" type="diskit.SMAL.EntityDefinition">
        <Comment>The entity definition for this entity</Comment>
    </Parameter>
    <Parameter name="radioCommunicationsChannel" type="int">
        <Comment>The radio channel that this entity uses to communicate</Comment>
    </Parameter>
    <Parameter name="radioCommunicationDelay" type="diskit.random.RandomVariateInstantiator">
        <Comment>The delay of a radio communication for this circuit</Comment>
    </Parameter>
    <Parameter name="publicHarborControlChannel" type="int">
        <Comment>The channel that this entity uses to talk with the public</Comment>
    </Parameter>
    <Parameter name="perimeterZoneSensor" type="diskit.Sensor">
        <Comment/>
    </Parameter>
    <Parameter name="middleZoneSensor" type="diskit.Sensor">
        <Comment/>
    </Parameter>
    <Parameter name="innerZoneSensor" type="diskit.Sensor">
        <Comment/>
    </Parameter>
    <StateVariable name="perimeterZone" type="diskit.Sensor">
        <Comment>The zone that this entity is monitoring</Comment>
    </StateVariable>
    <StateVariable name="perimeterZoneRange" type="double">
        <Comment>The perimeter Zone range for this entity</Comment>
    </StateVariable>
    <StateVariable name="radioCommunication" type="diskit.RadioCommunication">
        <Comment>An object used to transmit radio traffic</Comment>
    </StateVariable>
    <StateVariable name="harborChart" type="diskit.AStarZoneMap">
        <Comment>The AStar representation of the environment</Comment>
    </StateVariable>
    <StateVariable name="publicRadioTraffic" type="diskit.RadioCommunication">
        <Comment>The object used to communicate with the public</Comment>
    </StateVariable>
    <StateVariable name="middleZone" type="diskit.Sensor">
        <Comment>The middle zone for detection in the harbor</Comment>
    </StateVariable>
    <StateVariable name="innerZone" type="diskit.Sensor">
        <Comment>The innerZone in the harbor</Comment>
    </StateVariable>
    <StateVariable name="contactPicture" type="diskit.ContactPicture">
        <Comment>The contact picture for this entity</Comment>
    </StateVariable>
    <Event name="Run">
        <Comment/>
        <StateTransition state="perimeterZoneRange">
            <Assignment value="getPerimeterZoneSensor().getMaxRange()"/>
        </StateTransition>
        <StateTransition state="perimeterZone">
            <Assignment value="getPerimeterZoneSensor()"/>
        </StateTransition>
        <StateTransition state="middleZone">
            <Assignment value="getMiddleZoneSensor()"/>
        </StateTransition>
        <StateTransition state="innerZone">
            <Assignment value="getInnerZoneSensor()"/>
        </StateTransition>
        <Code/>
        <Coordinate x="30" y="30"/>
    </Event>
    <Event name="Init">
        <Comment>Initializes this entity with the simulation</Comment>
        <Argument name="init" type="diskit.Mover3D"/>
        <StateTransition state="perimeterZone">
            <Operation method="setMover(this)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Assignment value="new diskit.RadioCommunication(radioCommunicationsChannel, this)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setRecipients(friendlyForceList)"/>
        </StateTransition>
        <StateTransition state="publicRadioTraffic">
            <Assignment value="new diskit.RadioCommunication(publicHarborControlChannel, this)"/>
        </StateTransition>
        <StateTransition state="middleZone">
            <Operation method="setMover(this)"/>
        </StateTransition>
        <StateTransition state="innerZone">
            <Operation method="setMover(this)"/>
        </StateTransition>
        <Schedule condition="init == this" delay="0.0" event="RegisterTarget" priority="0.0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Schedule condition="init == this" delay="0.0" event="BuildSensorArray" priority="0.0">
            <Comment/>
        </Schedule>
        <Code/>
        <Coordinate x="30" y="120"/>
    </Event>
    <Event name="RegisterTarget">
        <Comment>Registers this entity with the Simulation</Comment>
        <Argument name="mover" type="diskit.Mover3D">
            <Comment>Passes itself for registration</Comment>
        </Argument>
        <Code/>
        <Coordinate x="120" y="120"/>
    </Event>
    <Event name="RegisterSensors">
        <Comment>Registers the sensor for this object with the simulation</Comment>
        <Argument name="sensors" type="diskit.Sensor[]">
            <Comment>The sensor to register with the simulation</Comment>
        </Argument>
        <Code/>
        <Coordinate x="130" y="200"/>
    </Event>
    <Event name="PrepareRadioMessage">
        <Comment>Prepares a radio message for transmitting</Comment>
        <Argument name="msgText" type="java.lang.String">
            <Comment>The text of the message</Comment>
        </Argument>
        <Argument name="msgType" type="java.lang.String">
            <Comment>The type of message being sent</Comment>
        </Argument>
        <Argument name="msgContext" type="diskit.Mover3D">
            <Comment>The context of the message</Comment>
        </Argument>
        <StateTransition state="radioCommunication">
            <Operation method="setMessage(msgText)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setType(msgType)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setContext(msgContext)"/>
        </StateTransition>
        <Schedule condition="true" delay="java.lang.Math.max(0.0,radioCommunicationDelay.generate())" event="SendRadioMessage" priority="0.0">
            <Comment/>
            <EdgeParameter value="radioCommunication"/>
        </Schedule>
        <Code/>
        <Coordinate x="170" y="360"/>
    </Event>
    <Event name="SendRadioMessage">
        <Comment>Transmits the radio message via the scenario manager.  Since this entity sends messages to different types of movers the recipient of the message is reset after transmission to ensure that the default is set</Comment>
        <Argument name="msg" type="diskit.RadioCommunication">
            <Comment>The message to transmit</Comment>
        </Argument>
        <Code/>
        <Coordinate x="300" y="360"/>
    </Event>
    <Event name="Detection">
        <Comment>Marks the detection event for this mover's sensor object</Comment>
        <Argument name="sensor" type="diskit.Sensor">
            <Comment>The sensor that detected the contact</Comment>
        </Argument>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>The mover that was detected</Comment>
        </Argument>
        <LocalVariable name="isFriendlyForce" type="boolean" value="friendlyForces.contains(contact.getMoverID())">
            <Comment>Returns true if this contact is a friendly force</Comment>
        </LocalVariable>
        <LocalVariable name="entityType" type="java.lang.String" value="contact.getEntityType()">
            <Comment>Returns this entities type</Comment>
        </LocalVariable>
        <Schedule condition="!isFriendlyForce &amp;&amp; !contactPicture.contains(contact) &amp;&amp; !entityType.equals(&quot;HarborFerry&quot;)" delay="0.0" event="UnknownContact" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Code/>
        <Coordinate x="30" y="360"/>
    </Event>
    <Event name="UnknownContact">
        <Comment>If there is an unknown contact this entity will attempt to contact it and warn all other friendly entities</Comment>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>The mover that is in question</Comment>
        </Argument>
        <LocalVariable name="contactArea" type="diskit.AStarZoneGeometry" value="harborChart.findClosestZone(contact.getLocation())">
            <Comment>Returns the zone closest to the contact</Comment>
        </LocalVariable>
        <LocalVariable name="contactLocation" type="java.lang.String" value="contactArea.getName()">
            <Comment>Returns the general area of the contact</Comment>
        </LocalVariable>
        <LocalVariable name="query" type="java.lang.String" value="&quot;Unknown contact in the vicinity of &quot; + contactLocation + &quot;, this is &quot; + getName() +&quot;. You are in restricted waters. Request you identify yourself, over.&quot;">
            <Comment>The query text for this entity</Comment>
        </LocalVariable>
        <LocalVariable name="warningText" type="java.lang.String" value="&quot;All stations, there is an inbound contact in the vicinity of &quot; + contactLocation">
            <Comment>message text for warning other entities</Comment>
        </LocalVariable>
        <StateTransition state="contactPicture">
            <Operation method="add(contact)"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="PrepareRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="warningText"/>
            <EdgeParameter value="&quot;WarningReport&quot;"/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Schedule condition="true" delay="2" event="Query" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
            <EdgeParameter value="query"/>
        </Schedule>
        <Code>
System.out.println(contact.getEntityType());</Code>
        <Coordinate x="90" y="460"/>
    </Event>
    <Event name="AStarZoneMapDistributed">
        <Comment>Receives a copy of the AStarZoneMap from the ScenarioManager</Comment>
        <Argument name="map" type="diskit.AStarZoneMap">
            <Comment>The map to use as a guide to the environment</Comment>
        </Argument>
        <StateTransition state="harborChart">
            <Assignment value="map"/>
        </StateTransition>
        <Code/>
        <Coordinate x="200" y="30"/>
    </Event>
    <Event name="Query">
        <Comment>Performs a query on an unknown contact</Comment>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>The contact in question</Comment>
        </Argument>
        <Argument name="msgText" type="java.lang.String">
            <Comment>The wording of the query</Comment>
        </Argument>
        <StateTransition state="publicRadioTraffic">
            <Operation method="setRecipient(contact)"/>
        </StateTransition>
        <StateTransition state="publicRadioTraffic">
            <Operation method="setContext(this)"/>
        </StateTransition>
        <StateTransition state="publicRadioTraffic">
            <Operation method="setMessage(msgText)"/>
        </StateTransition>
        <StateTransition state="publicRadioTraffic">
            <Operation method="setType(&quot;Quey&quot;)"/>
        </StateTransition>
        <Schedule condition="true" delay="radioCommunicationDelay.generate()" event="SendRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="publicRadioTraffic"/>
        </Schedule>
        <Code/>
        <Coordinate x="210" y="460"/>
    </Event>
    <Event name="BuildSensorArray">
        <Comment>Creates an array of all sensors</Comment>
        <LocalVariable name="sensors" type="diskit.Sensor[]" value="new diskit.Sensor[3]">
            <Comment>The array to populate</Comment>
        </LocalVariable>
        <Schedule condition="true" delay="0.0" event="RegisterSensors" priority="0">
            <Comment/>
            <EdgeParameter value="sensors"/>
        </Schedule>
        <Code>sensors[0] = perimeterZone;
sensors[1] = middleZone;
sensors[2] = innerZone;</Code>
        <Coordinate x="30" y="200"/>
    </Event>
</SimEntity>
