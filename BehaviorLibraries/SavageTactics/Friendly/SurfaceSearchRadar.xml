<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<SimEntity author="pjsulliv" extend="diskit.FriendlyForce" name="SurfaceSearchRadar" package="Friendly" version="1.0" xsi:noNamespaceSchemaLocation="http://diana.gl.nps.navy.mil/Simkit/simkit.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Comment>A civilian merchant ship. This behavior is set up for typical civilian merchant ship traffic. There is currenlty no difference between this graph and civilian merchant ship. It is a place holder for future developments</Comment>
    <Parameter name="moverID" type="int">
        <Comment>DIS entity ID</Comment>
    </Parameter>
    <Parameter name="entityDefinition" type="diskit.SMAL.EntityDefinition">
        <Comment>The Savage Modeling Analysis Language(SMAL) object that contains all specific information about the model being used</Comment>
    </Parameter>
    <Parameter name="radioCommunicationsChannel" type="int">
        <Comment>The radio channel that this entity uses to communicate</Comment>
    </Parameter>
    <Parameter name="radioCommunicationDelay" type="diskit.random.RandomVariateInstantiator">
        <Comment>The delay of a radio communication for this circuit</Comment>
    </Parameter>
    <Parameter name="surfaceRadar" type="diskit.Sensor">
        <Comment>The sensor range on this platform</Comment>
    </Parameter>
    <StateVariable name="radioCommunication" type="diskit.RadioCommunication">
        <Comment>An object used to transmit radio traffic</Comment>
    </StateVariable>
    <StateVariable name="nauticalChart" type="diskit.AStarZoneMap">
        <Comment>The AStar representation of the environment</Comment>
    </StateVariable>
    <StateVariable name="contactPicture" type="diskit.ContactPicture">
        <Comment>The contact picture for this entity</Comment>
    </StateVariable>
    <StateVariable name="radar" type="diskit.Sensor">
        <Comment/>
    </StateVariable>
    <Event name="Run">
        <Comment>The run event sets the parameter values for each simulation run</Comment>
        <Schedule condition="true" delay="0.0" event="Init" priority="0.0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Code/>
        <Coordinate x="10" y="160"/>
    </Event>
    <Event name="Init">
        <Comment>An initialization event that is scheduled by diskit.SMALMover3D to initialize it's subclasses. The event creates sensor objects and registers this mover and it's sensors with the diskit.ScenarioManager.</Comment>
        <Argument name="init" type="diskit.Mover3D"/>
        <StateTransition state="radar">
            <Assignment value="surfaceRadar"/>
        </StateTransition>
        <StateTransition state="radar">
            <Operation method="setMover(this)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Assignment value="new diskit.RadioCommunication(radioCommunicationsChannel,this)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setRecipients(friendlyForceList)"/>
        </StateTransition>
        <Schedule condition="init == this" delay="0.0" event="RegisterTarget" priority="0.0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Schedule condition="init == this" delay="0.0" event="RegisterSensor" priority="0.0">
            <EdgeParameter value="surfaceRadar"/>
        </Schedule>
        <Code>System.out.println("***Init");</Code>
        <Coordinate x="10" y="10"/>
    </Event>
    <Event name="RegisterTarget">
        <Comment>Registers this mover with the diskit.ScenarioManager</Comment>
        <Argument name="mover" type="diskit.Mover3D">
            <Comment>This object should pass itself as an argument to this event as part of the registration process</Comment>
        </Argument>
        <Code/>
        <Coordinate x="100" y="10"/>
    </Event>
    <Event name="RegisterSensor">
        <Comment/>
        <Argument name="sensor" type="diskit.Sensor">
            <Comment>The sensor for this entity</Comment>
        </Argument>
        <Code>System.out.println("***Sensors registered");</Code>
        <Coordinate x="100" y="80"/>
    </Event>
    <Event name="PrepareRadioMessage">
        <Comment>Prepares a radio message for transmitting</Comment>
        <Argument name="msgText" type="java.lang.String">
            <Comment>The text of the message</Comment>
        </Argument>
        <Argument name="msgType" type="java.lang.String">
            <Comment>The type of message being sent</Comment>
        </Argument>
        <Argument name="msgContext" type="diskit.Mover3D">
            <Comment>The context of the message</Comment>
        </Argument>
        <StateTransition state="radioCommunication">
            <Operation method="setMessage(msgText)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setType(msgType)"/>
        </StateTransition>
        <StateTransition state="radioCommunication">
            <Operation method="setContext(msgContext)"/>
        </StateTransition>
        <Schedule condition="true" delay="java.lang.Math.max(0.0,radioCommunicationDelay.generate())" event="SendRadioMessage" priority="0.0">
            <Comment/>
            <EdgeParameter value="radioCommunication"/>
        </Schedule>
        <Code/>
        <Coordinate x="170" y="360"/>
    </Event>
    <Event name="SendRadioMessage">
        <Comment>Transmits the radio message via the scenario manager.  Since this entity sends messages to different types of movers the recipient of the message is reset after transmission to ensure that the default is set</Comment>
        <Argument name="msg" type="diskit.RadioCommunication">
            <Comment>The message to transmit</Comment>
        </Argument>
        <Code/>
        <Coordinate x="300" y="360"/>
    </Event>
    <Event name="Detection">
        <Comment>Marks the detection event for this mover's sensor object</Comment>
        <Argument name="sensor" type="diskit.Sensor">
            <Comment>The sensor that detected the contact</Comment>
        </Argument>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>The mover that was detected</Comment>
        </Argument>
        <LocalVariable name="isFriendlyForce" type="boolean" value="friendlyForces.contains(contact.getMoverID())">
            <Comment>Returns true if this contact is a friendly force</Comment>
        </LocalVariable>
        <LocalVariable name="entityType" type="java.lang.String" value="contact.getEntityType()">
            <Comment>Returns this entities type</Comment>
        </LocalVariable>
        <Schedule condition="!isFriendlyForce &amp;&amp; !contactPicture.contains(contact)" delay="0.0" event="UnknownContact" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Code>System.out.println("*** Radar got detection");
System.out.println("harbor map: " + nauticalChart);</Code>
        <Coordinate x="30" y="360"/>
    </Event>
    <Event name="UnknownContact">
        <Comment>If there is an unknown contact this entity will attempt to contact it and warn all other friendly entities</Comment>
        <Argument name="contact" type="diskit.Mover3D">
            <Comment>The mover that is in question</Comment>
        </Argument>
        <LocalVariable name="contactArea" type="diskit.AStarZoneGeometry" value="nauticalChart.findClosestZone(contact.getLocation())">
            <Comment>Returns the zone closest to the contact</Comment>
        </LocalVariable>
        <LocalVariable name="contactLocation" type="java.lang.String" value="contactArea.getName()">
            <Comment>Returns the general area of the contact</Comment>
        </LocalVariable>
        <LocalVariable name="query" type="java.lang.String" value="&quot;Unknown contact in the vicinity of &quot; + contactLocation + &quot;, this is &quot; + getName() +&quot;. You are in restricted waters. Request you identify yourself, over.&quot;">
            <Comment>The query text for this entity</Comment>
        </LocalVariable>
        <LocalVariable name="warningText" type="java.lang.String" value="&quot;All stations, there is an inbound contact in the vicinity of &quot; + contactLocation">
            <Comment>message text for warning other entities</Comment>
        </LocalVariable>
        <StateTransition state="contactPicture">
            <Operation method="add(contact)"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="PrepareRadioMessage" priority="0">
            <Comment/>
            <EdgeParameter value="warningText"/>
            <EdgeParameter value="&quot;WarningReport&quot;"/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Code/>
        <Coordinate x="90" y="460"/>
    </Event>
    <Event name="AStarZoneMapDistributed">
        <Comment>Receives a copy of the AStarZoneMap from the ScenarioManager</Comment>
        <Argument name="recipient" type="simkit.SimEntity"/>
        <Argument name="harborChart" type="diskit.AStarZoneMap"/>
        <StateTransition state="nauticalChart">
            <Assignment value="harborChart"/>
        </StateTransition>
        <Code>System.out.println("Got map: " + harborChart);</Code>
        <Coordinate x="200" y="30"/>
    </Event>
</SimEntity>
