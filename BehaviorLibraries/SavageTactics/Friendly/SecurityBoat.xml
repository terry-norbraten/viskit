<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<SimEntity author="pjsulliv" extend="diskit.FriendlyForce" name="SecurityBoat" package="Friendly" version="1.0" xsi:noNamespaceSchemaLocation="http://diana.gl.nps.navy.mil/Simkit/simkit.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Comment>A security boat that patrols an entire harbor area.  The complexity of most harbors requires that this entity use a nautical chart object (diskit.AStarMap) to navigate through the environment.  The initial implementation randomly picks a new location to travel to from all of the navigatable waters in the scene.  

TODO: Future work. Allow control over where the patol boat will go</Comment>
    <Parameter name="moverID" type="int">
        <Comment>Unique DIS entity ID number</Comment>
    </Parameter>
    <Parameter name="entityDefinition" type="diskit.SMAL.EntityDefinition">
        <Comment>The SMAL entity definition for this entity</Comment>
    </Parameter>
    <StateVariable name="avoidanceRange" type="double">
        <Comment>The proximity tollerance for this entity</Comment>
    </StateVariable>
    <StateVariable name="visualPerception" type="diskit.Sensor">
        <Comment>Sensor object that processes all targets in the state space before attacking</Comment>
    </StateVariable>
    <StateVariable name="waypointCreator" type="diskit.WaypointCreator">
        <Comment>The utility that creates waypoints based on the arguments passed</Comment>
    </StateVariable>
    <StateVariable name="targetQueue" type="diskit.TargetQueue">
        <Comment>The queue of active targets for this entity</Comment>
    </StateVariable>
    <StateVariable name="collisionAvoidance" type="diskit.Sensor">
        <Comment>Sensor that implements collision avoidance</Comment>
    </StateVariable>
    <StateVariable name="obstacleQueue" type="diskit.ObstacleQueue">
        <Comment>The active list of obstacles that this entity is concerned with. Special class that organizes the queue based on the proximity of the obstacles</Comment>
    </StateVariable>
    <StateVariable name="tacticalMode" type="diskit.TacticalMode">
        <Comment>The current tactical mode of this entity</Comment>
    </StateVariable>
    <StateVariable name="calc" type="diskit.util.MovementCalculator">
        <Comment>A utility class that performs 3D vector math calculations</Comment>
    </StateVariable>
    <StateVariable name="surfaceSearchRadar" type="diskit.Sensor">
        <Comment>Sensor that determines if the contact is close enough to kill</Comment>
    </StateVariable>
    <StateVariable name="visualRange" type="double">
        <Comment>Visual range for this entity</Comment>
    </StateVariable>
    <StateVariable name="harborChart" type="diskit.AStarZoneMap">
        <Comment>A map of the environment that contains the collection of search nodes for path finding</Comment>
    </StateVariable>
    <StateVariable name="aStarSearch" type="diskit.AStarSearch">
        <Comment>The A* search implementation that is used for path finding</Comment>
    </StateVariable>
    <StateVariable name="startZone" type="diskit.AStarZoneGeometry">
        <Comment>The zone from which the terrorist should start</Comment>
    </StateVariable>
    <StateVariable name="goalZone" type="diskit.AStarZoneGeometry">
        <Comment>The area where this terrorist should head towards to execute it's tactics</Comment>
    </StateVariable>
    <StateVariable name="zoneMoverManager" type="diskit.ZoneMoverManager">
        <Comment>The primary mover for this entity, moves using A* search zone geometry</Comment>
    </StateVariable>
    <StateVariable name="patrolStartWaypoint" type="diskit.Vec3d">
        <Comment>The waypoint selected to start the next leg of the patrol</Comment>
    </StateVariable>
    <StateVariable name="speedScalar" type="double">
        <Comment>The default speed scale for this entity</Comment>
    </StateVariable>
    <StateVariable name="rn" type="java.util.Random">
        <Comment>A random number object for randomly selecting new places to travel in the harbor</Comment>
    </StateVariable>
    <StateVariable name="workingChart" type="diskit.AStarZoneMap">
        <Comment>This is a local copy of the nautical chart object being used. This copy is re-created after each use to ensure that the master chart is not getting altered</Comment>
    </StateVariable>
    <StateVariable name="patrolAreas" type="java.lang.String[0]">
        <Comment>The areas where this entity may travel to</Comment>
    </StateVariable>
    <Event name="Run">
        <Comment>Represents the reseting features and initial events for this entity. State variables are reset to the desired state at the start of each simulation run</Comment>
        <StateTransition state="avoidanceRange">
            <Assignment value="30"/>
        </StateTransition>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.PATROLLING"/>
        </StateTransition>
        <StateTransition state="visualRange">
            <Assignment value="600"/>
        </StateTransition>
        <StateTransition state="speedScalar">
            <Assignment value="1"/>
        </StateTransition>
        <StateTransition state="rn">
            <Assignment value="new java.util.Random()"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="ScaleSpeed" priority="0">
            <Comment/>
            <EdgeParameter value="speedScalar"/>
        </Schedule>
        <Code/>
        <Coordinate x="80" y="20"/>
    </Event>
    <Event name="Init">
        <Comment/>
        <Argument name="entity" type="diskit.Mover3D"/>
        <LocalVariable name="numOfSensors" type="int" value="3">
            <Comment>Number of Sensors this entity has</Comment>
        </LocalVariable>
        <LocalVariable name="sensors" type="diskit.Sensor[]" value="new diskit.Sensor[numOfSensors]">
            <Comment/>
        </LocalVariable>
        <StateTransition state="calc">
            <Assignment value="new diskit.util.MovementCalculator(this)"/>
        </StateTransition>
        <StateTransition state="visualPerception">
            <Assignment value="new diskit.SphereCutterSensor(this, visualRange)"/>
        </StateTransition>
        <StateTransition state="collisionAvoidance">
            <Assignment value="new diskit.SphereCutterSensor(this, avoidanceRange)"/>
        </StateTransition>
        <StateTransition state="targetQueue">
            <Assignment value="new diskit.TargetQueue(startPosition)"/>
        </StateTransition>
        <StateTransition state="surfaceSearchRadar">
            <Assignment value="new diskit.SphereCutterSensor(this, getEntityDefinition().getMaximumSurfaceDetectionRange())"/>
        </StateTransition>
        <StateTransition state="rn">
            <Assignment value="new java.util.Random()"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="RegisterTarget" priority="0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Schedule condition="entity == this" delay="0.0" event="CreateSensors" priority="0">
            <Comment/>
        </Schedule>
        <Code>sensors[0] = visualPerception;
sensors[1] = surfaceSearchRadar;
sensors[2] = collisionAvoidance;
//Schedule.stopOnEvent("Stop");</Code>
        <Coordinate x="80" y="90"/>
    </Event>
    <Event name="RegisterTarget">
        <Comment/>
        <Argument name="target" type="diskit.Mover3D"/>
        <Code/>
        <Coordinate x="160" y="90"/>
    </Event>
    <Event name="Detection">
        <Comment>Determines whether or not a detected contact is a high value unit and makes a decision based on the evaluation of the entity</Comment>
        <Argument name="sensor" type="diskit.Sensor"/>
        <Argument name="contact" type="diskit.Mover3D"/>
        <LocalVariable name="isFriendlyForce" type="boolean" value="friendlyForces.contains(contact.getMoverID())">
            <Comment>Check to see if contact is of the same force</Comment>
        </LocalVariable>
        <LocalVariable name="canIntercept" type="boolean" value="canIntercept(contact)">
            <Comment>Can I intercept the contact and blow it up</Comment>
        </LocalVariable>
        <LocalVariable name="currentTacticalMode" type="diskit.TacticalMode" value="getTacticalMode()">
            <Comment>The tactical mode of the entity when he detects the contact</Comment>
        </LocalVariable>
        <LocalVariable name="contactType" type="java.lang.String" value="contact.getEntityType()">
            <Comment>Checks the entity type of the contact</Comment>
        </LocalVariable>
        <Schedule condition="sensor == collisionAvoidance " delay="0.0" event="AssessObstacle" priority="0">
            <Comment/>
            <EdgeParameter value="contact"/>
        </Schedule>
        <Code>/*System.out.println(getName() + " detected: " + contact.getName());*/</Code>
        <Coordinate x="210" y="260"/>
    </Event>
    <Event name="RegisterSensors">
        <Comment>Registers Sensors for this entity, and adds simEventListenerConnections</Comment>
        <Argument name="sensors[]" type="diskit.Sensor[]">
            <Comment>Sensors for this entity</Comment>
        </Argument>
        <StateTransition state="visualPerception">
            <Operation method="addSimEventListener(this)"/>
        </StateTransition>
        <StateTransition state="surfaceSearchRadar">
            <Operation method="addSimEventListener(this)"/>
        </StateTransition>
        <StateTransition state="collisionAvoidance">
            <Operation method="addSimEventListener(this)"/>
        </StateTransition>
        <Code/>
        <Coordinate x="160" y="170"/>
    </Event>
    <Event name="CreateSensors">
        <Comment>Builds array of all sensors to be registered</Comment>
        <LocalVariable name="numOfSensors" type="int" value="3">
            <Comment>Number of Sensors for this entity</Comment>
        </LocalVariable>
        <LocalVariable name="sensors" type="diskit.Sensor[]" value="new diskit.Sensor[numOfSensors]">
            <Comment>Array to add all sensors</Comment>
        </LocalVariable>
        <Schedule condition="true" delay="0.0" event="RegisterSensors" priority="0">
            <Comment/>
            <EdgeParameter value="sensors"/>
        </Schedule>
        <Code>sensors[0] = visualPerception;
sensors[1] = surfaceSearchRadar;
sensors[2] = collisionAvoidance;</Code>
        <Coordinate x="80" y="170"/>
    </Event>
    <Event name="AStarZoneMapDistributed">
        <Comment>Recieves the harbor chart information from the terrorist cell planner</Comment>
        <Argument name="chart" type="diskit.AStarZoneMap">
            <Comment>The chart that the terrorist sent</Comment>
        </Argument>
        <LocalVariable name="potentialZones" type="java.lang.String[]" value="chart.getNavigatableZoneNames()">
            <Comment>The names of all navigatable water areas</Comment>
        </LocalVariable>
        <LocalVariable name="startIdx" type="int" value="rn.nextInt(potentialZones.length)">
            <Comment>Returns a random selection of a start zone</Comment>
        </LocalVariable>
        <LocalVariable name="goalIdx" type="int" value="rn.nextInt(potentialZones.length)">
            <Comment>Returns a random index position</Comment>
        </LocalVariable>
        <LocalVariable name="selectedStart" type="diskit.AStarZoneGeometry" value="chart.getZone(potentialZones[startIdx])">
            <Comment>The selected starting zone</Comment>
        </LocalVariable>
        <LocalVariable name="selectedGoal" type="diskit.AStarZoneGeometry" value="chart.getZone(potentialZones[goalIdx])">
            <Comment>The selected goal zone</Comment>
        </LocalVariable>
        <StateTransition state="harborChart">
            <Assignment value="chart"/>
        </StateTransition>
        <StateTransition state="workingChart">
            <Assignment value="chart"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="PlanPatrolMove" priority="0">
            <Comment/>
            <EdgeParameter value="selectedStart"/>
            <EdgeParameter value="selectedGoal"/>
        </Schedule>
        <Code/>
        <Coordinate x="270" y="40"/>
    </Event>
    <Event name="PlanPatrolMove">
        <Comment>Security boat picks a zone to head to from its chosen starting zone</Comment>
        <Argument name="startingZone" type="diskit.AStarZoneGeometry">
            <Comment>The zone that this entity is going to start from</Comment>
        </Argument>
        <Argument name="destinationZone" type="diskit.AStarZoneGeometry">
            <Comment>The zone that is the destination area</Comment>
        </Argument>
        <StateTransition state="startZone">
            <Assignment value="startingZone"/>
        </StateTransition>
        <StateTransition state="goalZone">
            <Assignment value="destinationZone"/>
        </StateTransition>
        <StateTransition state="aStarSearch">
            <Assignment value="new diskit.AStarSearch(workingChart)"/>
        </StateTransition>
        <StateTransition state="waypointCreator">
            <Assignment value="new diskit.WaypointCreator()"/>
        </StateTransition>
        <StateTransition state="waypointCreator">
            <Operation method="setMover(this)"/>
        </StateTransition>
        <Schedule event="PickStartPosition"/>
        <Code>System.out.println("InPlanPatrolMove");
System.out.println("StartZone: " + startingZone.getName());
System.out.println("EndZone:  " + destinationZone.getName());</Code>
        <Coordinate x="270" y="140"/>
    </Event>
    <Event name="PickStartPosition">
        <Comment>Terrorist uses the start zone to select an exact start position. It then determines which zone on the map is the closest to his starting position and updates it's A* search object with its destination and first zone to visit.   This implementation purposely decouples perimeter zones from the zones of the environment to allow analysts to alter terrorist starting options without effecting the overall structure of the basic environment map (e.g. navigatable water spaces). Futhermore it allows developers to prevent defending forces from knowing exactly where terrorists are going to retreat to (e.g. where they started).</Comment>
        <StateTransition state="aStarSearch">
            <Operation method="setStartZone(startZone)"/>
        </StateTransition>
        <StateTransition state="aStarSearch">
            <Operation method="setGoalZone(goalZone)"/>
        </StateTransition>
        <Schedule event="FinalizePlan"/>
        <Code/>
        <Coordinate x="350" y="140"/>
    </Event>
    <Event name="FinalizePlan">
        <Comment>Uses the closest zone as the first destination and generates a path. Then a path mover manager is created with the attack plan. If the attack has been authorized by the terrorist planner while the terrorist was making its plan, the terrorist will start it's attack immediately after the plan is made. Otherwise it will wait for the 'BeginAttack' order from the terrorist cell planner</Comment>
        <LocalVariable name="patrolPath" type="java.util.LinkedList" value="aStarSearch.createZonePath()">
            <Comment>Returns the zones that should be used to generate waypoints in the order that they should be used by the waypoint creator</Comment>
        </LocalVariable>
        <StateTransition state="zoneMoverManager">
            <Assignment value="new diskit.ZoneMoverManager(this, waypointCreator)"/>
        </StateTransition>
        <Schedule condition="true" delay="0.0" event="StartMove" priority="0">
            <Comment/>
        </Schedule>
        <Code>waypointCreator.setAStarZones(patrolPath);
//aStarSearch.printPath(patrolPath);</Code>
        <Coordinate x="430" y="140"/>
    </Event>
    <Event name="StartMove">
        <Comment/>
        <StateTransition state="tacticalMode">
            <Assignment value="diskit.TacticalMode.PATROLLING"/>
        </StateTransition>
        <Code>setCruiseSpeed(maximumSpeed);
setStartPosition(startZone.getLocation());
setDestination(waypointCreator.createWaypoint());</Code>
        <Coordinate x="510" y="140"/>
    </Event>
    <Event name="DestinationReached">
        <Comment>This entity has reached its destination for this leg of the patrol and is ready to patrol another area.</Comment>
        <LocalVariable name="potentialZones" type="java.lang.String[]" value="harborChart.getNavigatableZoneNames()">
            <Comment>A list of all possible zones</Comment>
        </LocalVariable>
        <LocalVariable name="nextIdx" type="int" value="rn.nextInt(potentialZones.length)">
            <Comment>A randomly selected index of the potential zones</Comment>
        </LocalVariable>
        <LocalVariable name="nextZone" type="diskit.AStarZoneGeometry" value="harborChart.getZone(potentialZones[nextIdx])">
            <Comment>The zone that is selected to be the next zone</Comment>
        </LocalVariable>
        <StateTransition state="workingChart">
            <Assignment value="null"/>
        </StateTransition>
        <StateTransition state="workingChart">
            <Assignment value="harborChart"/>
        </StateTransition>
        <StateTransition state="aStarSearch">
            <Assignment value="null"/>
        </StateTransition>
        <Schedule condition="!goalZone.getName().equals(nextZone.getName())" delay="0.0" event="PlanPatrolMove" priority="0">
            <Comment>Passes the goal zone as the starting zone because it reached it's destination</Comment>
            <EdgeParameter value="goalZone"/>
            <EdgeParameter value="nextZone"/>
        </Schedule>
        <Schedule condition="goalZone.getName().equals(nextZone.getName())" delay="0.0" event="DestinationReached" priority="0">
            <Comment/>
        </Schedule>
        <Code>/*System.out.println("InDestinationReachedPHSB");
System.out.println("NextSelectedZone: " + nextZone.getName());
System.out.println("LastGoalZone: " + goalZone.getName());*/</Code>
        <Coordinate x="270" y="220"/>
    </Event>
    <Event name="ScaleSpeed">
        <Comment>Allows the scenario manager to add a cross the board speed scale to all entities</Comment>
        <Argument name="speedScale" type="double">
            <Comment>The scale to apply to the max speed of this entity</Comment>
        </Argument>
        <Code>setMaximumSpeed(getMaximumSpeed() * speedScale);</Code>
        <Coordinate x="160" y="20"/>
    </Event>
    <Event name="AssessObstacle">
        <Comment>If something is determined to be potential obstacle assess whether or not there will be a collision</Comment>
        <Argument name="obstacle" type="diskit.Mover3D">
            <Comment>The mover that is a potential obstacle</Comment>
        </Argument>
        <StateTransition state="calc">
            <Operation method="checkCollision(obstacle, collisionAvoidance, avoidanceRange)"/>
        </StateTransition>
        <Schedule condition="calc.willCollide()" delay="0.0" event="AvoidObstacle" priority="0">
            <Comment/>
            <EdgeParameter value="obstacle"/>
        </Schedule>
        <Code>//System.out.println(getName() + " Assessing Obstacle: " + obstacle.getName());</Code>
        <Coordinate x="120" y="260"/>
    </Event>
    <Event name="AvoidObstacle">
        <Comment>Avoids an obstacle if a collision is going to happen</Comment>
        <Argument name="obstacle" type="diskit.Mover3D">
            <Comment>The obstacle that needs to be avoided</Comment>
        </Argument>
        <LocalVariable name="avoidancePoint" type="diskit.Vec3d" value="calc.getCollisionAvoidance(obstacle)">
            <Comment>The point that avoids the collision</Comment>
        </LocalVariable>
        <Code>setStartPosition(getLocation());
setDestination(avoidancePoint);</Code>
        <Coordinate x="30" y="260"/>
    </Event>
    <Event name="PursueHostile">
        <Comment/>
        <Schedule event="Interdict"/>
        <Schedule event="StandOff"/>
        <Code/>
        <Coordinate x="300" y="460"/>
    </Event>
    <Event name="StandOff">
        <Comment/>
        <Code/>
        <Coordinate x="380" y="550"/>
    </Event>
    <Event name="Evading">
        <Comment/>
        <Schedule event="PursueHostile"/>
        <Cancel event="Interdict"/>
        <Code/>
        <Coordinate x="300" y="550"/>
    </Event>
    <Event name="Interdict">
        <Comment/>
        <Code/>
        <Coordinate x="220" y="550"/>
    </Event>
    <Event name="SecurityAlert">
        <Comment>Marks when this unit should go to security alert and the contact of interest that caused the alert</Comment>
        <Argument name="contactOfInterest" type="diskit.Mover3D">
            <Comment>The contact that caused the security alert</Comment>
        </Argument>
        <Schedule event="PursueHostile"/>
        <Code/>
        <Coordinate x="300" y="350"/>
    </Event>
</SimEntity>

