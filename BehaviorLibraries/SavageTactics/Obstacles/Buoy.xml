<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<SimEntity author="pjsulliv" extend="diskit.Obstacle" name="Buoy" package="Obstacles" version="1.0" xsi:noNamespaceSchemaLocation="http://diana.gl.nps.navy.mil/Simkit/simkit.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Comment>A buoy which may be moving and effected by currents, wakes and tides.</Comment>
    <Parameter name="moverID" type="int">
        <Comment>Unique ID number for this object</Comment>
    </Parameter>
    <Parameter name="center" type="diskit.Vec3d">
        <Comment>Center point of the pier</Comment>
    </Parameter>
    <Parameter name="length" type="double">
        <Comment>length of the pier</Comment>
    </Parameter>
    <Parameter name="width" type="double">
        <Comment>width of this pier</Comment>
    </Parameter>
    <Parameter name="height" type="double">
        <Comment>Height in meters above the waterline</Comment>
    </Parameter>
    <Parameter name="rotation" type="diskit.Vec4d">
        <Comment>Orientation in radians about the (Z DIS axis (Y for X3D)) example: 0 0 1 1.57</Comment>
    </Parameter>
    <Parameter name="buoyColor" type="java.lang.String">
        <Comment>The color of this navaid, if identified on a chart. Named aid color to distinguish this parameter from 
        the 'color' parameter of the diskit.Mover3D interface.</Comment>
    </Parameter>
    <Parameter name="lightFlashInterval" type="double">
        <Comment>Interval between flashing of light (zero if no light) in seconds</Comment>
    </Parameter>
    <Parameter name="buoyProximitySensor" type="diskit.Sensor">
        <Comment/>
    </Parameter>
    <StateVariable name="proximitySensor" type="diskit.Sensor">
        <Comment>Sensor used to detect when movers are getting close to the pier and should consider it for navigation</Comment>
    </StateVariable>
    <StateVariable name="closeContactQueue" type="java.util.LinkedList">
        <Comment>Collection of contacts that have gotten close to the pier and have not exited</Comment>
    </StateVariable>
    <Event name="Run">
        <Comment>Initializes all state variables for each simulation run.</Comment>
        <StateTransition state="closeContactQueue">
            <Operation method="clear()"/>
        </StateTransition>
        <StateTransition state="proximitySensor">
            <Assignment value="getBuoyProximitySensor()"/>
        </StateTransition>
        <Code/>
        <Coordinate x="30" y="30"/>
    </Event>
    <Event name="Init">
        <Comment>Used by diskit.ScenarioManager to register all entities</Comment>
        <Argument name="init" type="diskit.Mover3D"/>
        <StateTransition state="proximitySensor">
            <Operation method="setMover(this)"/>
        </StateTransition>
        <Schedule condition="init == this" delay="0.0" event="RegisterSensor" priority="0.0">
            <Comment/>
            <EdgeParameter value="proximitySensor"/>
        </Schedule>
        <Schedule condition="init == this" delay="0.0" event="RegisterTarget" priority="0.0">
            <Comment/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Code/>
        <Coordinate x="130" y="30"/>
    </Event>
    <Event name="RegisterSensor">
        <Comment>Passes Sensor to Relay for Registration</Comment>
        <Argument name="sensor" type="diskit.Sensor"/>
        <Code/>
        <Coordinate x="250" y="110"/>
    </Event>
    <Event name="RegisterTarget">
        <Comment/>
        <Argument name="target" type="diskit.Mover3D"/>
        <Code/>
        <Coordinate x="250" y="30"/>
    </Event>
    <Event name="Detection">
        <Comment>Detects when a mover is getting close to this object</Comment>
        <Argument name="sensor" type="diskit.Sensor">
            <Comment>Sensor that detected the mover</Comment>
        </Argument>
        <Argument name="mover" type="diskit.Mover3D">
            <Comment>Mover that is getting close to obstacle</Comment>
        </Argument>
        <Schedule condition="!closeContactQueue.contains(mover)" delay="0.0" event="ObstacleClose" priority="0">
            <Comment/>
            <EdgeParameter value="mover"/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Code/>
        <Coordinate x="150" y="210"/>
    </Event>
    <Event name="ObstacleClose">
        <Comment>Notification event that passes obstacle information to the detected mover. Also adds mover to the close contact queue.</Comment>
        <Argument name="mover" type="diskit.Mover3D">
            <Comment>Mover who is close to this object</Comment>
        </Argument>
        <Argument name="buoy" type="diskit.Obstacle">
            <Comment>Object that may need to be avoided</Comment>
        </Argument>
        <StateTransition state="closeContactQueue">
            <Operation method="add(mover)"/>
        </StateTransition>
        <Code/>
        <Coordinate x="260" y="210"/>
    </Event>
    <Event name="UnDetection">
        <Comment>Senses when mover has exited the proximity range for this object</Comment>
        <Argument name="sensor" type="diskit.Sensor">
            <Comment>Sensor that detected the exit range event</Comment>
        </Argument>
        <Argument name="mover" type="diskit.Mover3D">
            <Comment>Mover that exited the range</Comment>
        </Argument>
        <Schedule condition="closeContactQueue.contains(mover)" delay="0.0" event="ObstacleCleared" priority="0">
            <Comment/>
            <EdgeParameter value="mover"/>
            <EdgeParameter value="this"/>
        </Schedule>
        <Code/>
        <Coordinate x="150" y="290"/>
    </Event>
    <Event name="ObstacleCleared">
        <Comment>Notification event to mover that the obstacle has been cleared. Also removes the mover from the close contact queue</Comment>
        <Argument name="mover" type="diskit.Mover3D">
            <Comment>Mover that has cleared the range</Comment>
        </Argument>
        <Argument name="buoy" type="diskit.Obstacle">
            <Comment>Navigational aid that has been cleared and should be removed from the obstacle queue of the mover</Comment>
        </Argument>
        <StateTransition state="closeContactQueue">
            <Operation method="remove(mover)"/>
        </StateTransition>
        <Code/>
        <Coordinate x="260" y="290"/>
    </Event>
    <Code/>
</SimEntity>
