This file will explain the inner workings of Viskit.

To build Viskit, from the command line, type "ant compile."  This process will
first generate XML binding source files from various Schema files located in the
"Schemas: directory.  The generated bindings are generated to specific packages
in the "src" directory of the Viskit build.  This is accomplished via JAXB.  XML
bindings help to interface java source with the XML representations of
EventGraph and Assembly files.

Next, the main Viskit source is compiled.  Viskit can now be launched by typing
"ant quick.run" on the command line. How to use Viskit is explained in the
JavaHelp tutorial that can be accessed from Viskit once it's launched by
selecting the Help menu, or by launching the help menu via a command line call
to "ant help."

When Viskit is first launched, it creates a .viskit directory in the
${user.home}.  Here, configuration files are placed that can be modified from
Viskit by selecting File -> Settings.  Things such as what panels to expose, the
"look and feel" of the UI, size of the UI frame, what project space was last
opened, what files were recently opened, and other project history data.
Various logging output files are also generated and placed there for later
reference should an error have occurred.  All of these can be accessed for
content review by running any of the "ant show.*" targets from the command line.

After the .viskit directory is populated, Viskit will popup a dialog to either
open an existing Viskit project, or to create a new one.  A default Viskit
project will be created in ${user.home}/MyViskitProjects/DefaultProject if this
dialog is canceled.  Viskit must always point to a Viskit project space.

A Viskit project consists of a set of directories and a project config. file:

AnalystReports      (main directory for reporting material)
  charts            (JFreeChart charts showing statistical data)
  images            (main folder for screenshots of all Assembly and EventGraph views)
    Assemblies
    EventGraphs
  statistics        (XML files of Simkit generated statistics)
  viskit.ico        (favicon for generated HTML reports)

Assemblies          (main folder for Assembly XML files)

EventGraphs         (main folder for EvevtGraph XML files)

build               (generated java source and byte code class files from EventGraph and Assembly XML files)
  classes
  src

lib                 (directory to hold project specific java based libraries)

viskitProject       (project configuration XML file)

The most important feature of the viskitProject.xml file is the MD5 caching of
successfully validated and compiled EventGraph files.  This is to prevent
unnecessary recompilation of project materials once Viskit re-launches and opens
an existing project.  The MD5 hashes are recorded under the Cached element of
the viskitProject.xml file.

MD5 caching is not performed on Assemblies.  These are validated and compiled
each time the Assembly runner is launched.

If a Viskit project has specific dependencies, jar files can be placed in the
"lib" directory of the project and exposed on the classpath by selecting File ->
Settings -> Additional classpath entries and selecting those jars with the "+"
button which opens a dialog in the parent project directory in order to
navigate to and select those jars.  The project's "lib" is merely a convenience
folder for these jars.  Jar paths are annotated in the extraClassPaths element
of the viskitProject.xml file.

A chain of further events is initiated so that Viskit can track EventGraph and
Assembly XML file modifications.

1) A DirectoryWatch is first set on a /tmp location for EGs.  A listener listens
for the opening of, or changes to an EG file and copies them to the /tmp file
location.  Working changes are tracked here until the file is saved, then all
changes are copied back to the orig. file.  The same operation is applied to
Assembly files.

2) The nature of the above /tmp file operation is that once Viskit opens, a lck
file is recorded so that next time Viskit opens, the prior /tmp directory is
deleted in order to observe good housekeeping.

3) Next, the project's EventGraphs directory is parsed for the existence of EG
XML files.  These files are first validated against an EG schema, java source
is then generated and placed in build/src, then compiled and the completed
byte code is placed in build/classes.  Both src and classes observe package
structures.  During the first successful compilation of an EG, its MD5 hash is
generated, then recorded in the viskitProject.xml along with the path to its src
code and generated byte code (*.class).  The build/classes directory is then
placed on the live ClassLoader, the same used to compile these EGs.

Simultaneously, when an EG is successfully compiled, its icon symbol is placed
on the EG Node pallete of the Assembly Editor panel.  Accordingly, the current
ClassLoader is parsed for EGs which will also be depicted, i.e. from Simkit, as
well as any EGs in jars placed in the project's /lib directory.  This allows a
user to expand nodes, select EG icons (represented in blue color) and drag to
the Assembly canvas to visually construct an Assembly.

Also simultaneously, any PropertyChangeListeners parsed from the current
ClassLoader will be depicted on the PCL pallete under the EG Node pallete as in
the same manner as explained above.  The PCL icons are represented with a pink
color.

4) At this time, either EG files can be manually opened and modified, or created
new.  If an Assembly file is opened, its corresponding EG files will also open
in the Event Graph Editor view.

5) When an Assembly file is opened, the Design of Experiments (DOE) panel is
initialized with the Assembly and /tmp DOE input file is created and passed to
the DOE Job Launcher.  DOE is an advanced process and not necessary for pure
vanilla Viskit operations.

6) All corresponding EGs are opened in the Event Graph Editor panel when an
Assembly file is opened in the Assembly Editor panel.

7) At this point, the paths of the open Assembly and EGs are recorded in the
.viskit/c_app.xml file and will be opened upon next Viskit launch.  The last
open Viskit project, as well as the history of Assy and EG files will be listed
in the File -> Recents menu selections for each editor.

8) When it is time to run an Assy file, the Initialize assembly runner button is
selected from the Assy Editor which fires off a few events:
- a Directory Watch is set for the Assy file
- validate and compile the Assy
- place compiled source on the classpath
- prepare arguments to launch a separate thread for the Assy
- populate the Assy Run panel with replication selections, reset Sim start time to 0.0
- switch panel view to the Assy Run panel

9) When the Simulation Run VCR button is selected, the Assembly is launched via
a Thread who's ClassLoader context is separate (new) from the ClassLoader that
Viskit is currently running.  This is to eliminate any in memory static
references to the any previously initialized Assembly parameters thereby giving
the current Assembly a clean slate to run an independent sim.  The main Thread
run method for each XML Assembly file is via subclass of ViskitAssembly which
subclasses BasicAssembly which contains the run method.

10) The simulation can be immediately stopped via the VCR stop button, or it can
run until its sim. stop time has been reached for the number of replications
selected.  Step-through and rewind buttons are implemented, but not working
quite right, so, they are disabled upon instantiation from the InternalAssemblyRunner
as of now.
